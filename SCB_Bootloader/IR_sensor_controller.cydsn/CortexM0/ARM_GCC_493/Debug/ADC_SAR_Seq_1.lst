ARM GAS  C:\Users\PC69\AppData\Local\Temp\ccZV2CAg.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"ADC_SAR_Seq_1.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	ADC_SAR_Seq_1_initVar
  18              		.bss
  19              		.type	ADC_SAR_Seq_1_initVar, %object
  20              		.size	ADC_SAR_Seq_1_initVar, 1
  21              	ADC_SAR_Seq_1_initVar:
  22 0000 00       		.space	1
  23              		.comm	ADC_SAR_Seq_1_offset,16,4
  24              		.comm	ADC_SAR_Seq_1_countsPer10Volt,32,4
  25              		.section	.rodata
  26              		.align	2
  27              		.type	ADC_SAR_Seq_1_channelsConfig, %object
  28              		.size	ADC_SAR_Seq_1_channelsConfig, 32
  29              	ADC_SAR_Seq_1_channelsConfig:
  30 0000 00000000 		.space	32
  30      00000000 
  30      00000000 
  30      00000000 
  30      00000000 
  31              		.section	.text.ADC_SAR_Seq_1_Start,"ax",%progbits
  32              		.align	2
  33              		.global	ADC_SAR_Seq_1_Start
  34              		.code	16
  35              		.thumb_func
  36              		.type	ADC_SAR_Seq_1_Start, %function
  37              	ADC_SAR_Seq_1_Start:
  38              	.LFB0:
  39              		.file 1 ".\\Generated_Source\\PSoC4\\ADC_SAR_Seq_1.c"
   1:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * File Name: ADC_SAR_Seq_1.c
   3:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Version 2.20
   4:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
   5:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Description:
   6:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  This file provides the source code to the API for the Sequencing Successive
   7:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Approximation ADC Component Component.
   8:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
   9:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Note:
  10:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  11:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
  12:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  13:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * disclaimers, and limitations in the end user license agreement accompanying
ARM GAS  C:\Users\PC69\AppData\Local\Temp\ccZV2CAg.s 			page 2


  15:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * the software package with which this file was provided.
  16:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
  17:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  18:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** #include "ADC_SAR_Seq_1.h"
  19:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  20:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  21:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /***************************************
  22:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Global data allocation
  23:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ***************************************/
  24:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** uint8 ADC_SAR_Seq_1_initVar = 0u;
  25:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** volatile int16 ADC_SAR_Seq_1_offset[ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM];
  26:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** volatile int32 ADC_SAR_Seq_1_countsPer10Volt[ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM];   /* Gain compensat
  27:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  28:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  29:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /***************************************
  30:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Local data allocation
  31:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ***************************************/
  32:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /* Channels configuration generated by customiser */
  33:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** static const uint32 CYCODE ADC_SAR_Seq_1_channelsConfig[] = { 0x00000000u, 0x00000000u, 0x00000000u
  34:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****  0x00000000u, 0x00000000u, 0x00000000u };
  35:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  36:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  37:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
  38:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_Start
  39:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
  40:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  41:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
  42:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Performs all required initialization for this component
  43:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  and enables the power. The power will be set to the appropriate
  44:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  power based on the clock frequency.
  45:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  46:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
  47:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
  48:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  49:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
  50:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
  51:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  52:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Global variables:
  53:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  The ADC_SAR_Seq_1_initVar variable is used to indicate when/if initial
  54:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  configuration of this component has happened. The variable is initialized to
  55:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  zero and set to 1 the first time ADC_Start() is called. This allows for
  56:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  component Re-Start without re-initialization in all subsequent calls to the
  57:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_SAR_Seq_1_Start() routine.
  58:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  If re-initialization of the component is required the variable should be set
  59:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  to zero before call of ADC_SAR_Seq_1_Start() routine, or the user may call
  60:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_SAR_Seq_1_Init() and ADC_SAR_Seq_1_Enable() as done in the
  61:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_SAR_Seq_1_Start() routine.
  62:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  63:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
  64:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_Start(void)
  65:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
  40              		.loc 1 65 0
  41              		.cfi_startproc
  42 0000 80B5     		push	{r7, lr}
  43              		.cfi_def_cfa_offset 8
  44              		.cfi_offset 7, -8
  45              		.cfi_offset 14, -4
ARM GAS  C:\Users\PC69\AppData\Local\Temp\ccZV2CAg.s 			page 3


  46 0002 00AF     		add	r7, sp, #0
  47              		.cfi_def_cfa_register 7
  66:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /* If not Initialized then initialize all required hardware and software */
  67:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     if(ADC_SAR_Seq_1_initVar == 0u)
  48              		.loc 1 67 0
  49 0004 064B     		ldr	r3, .L3
  50 0006 1B78     		ldrb	r3, [r3]
  51 0008 002B     		cmp	r3, #0
  52 000a 04D1     		bne	.L2
  68:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
  69:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_Init();
  53              		.loc 1 69 0
  54 000c FFF7FEFF 		bl	ADC_SAR_Seq_1_Init
  70:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_initVar = 1u;
  55              		.loc 1 70 0
  56 0010 034B     		ldr	r3, .L3
  57 0012 0122     		mov	r2, #1
  58 0014 1A70     		strb	r2, [r3]
  59              	.L2:
  71:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
  72:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_Enable();
  60              		.loc 1 72 0
  61 0016 FFF7FEFF 		bl	ADC_SAR_Seq_1_Enable
  73:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
  62              		.loc 1 73 0
  63 001a BD46     		mov	sp, r7
  64              		@ sp needed
  65 001c 80BD     		pop	{r7, pc}
  66              	.L4:
  67 001e C046     		.align	2
  68              	.L3:
  69 0020 00000000 		.word	ADC_SAR_Seq_1_initVar
  70              		.cfi_endproc
  71              	.LFE0:
  72              		.size	ADC_SAR_Seq_1_Start, .-ADC_SAR_Seq_1_Start
  73              		.section	.text.ADC_SAR_Seq_1_Init,"ax",%progbits
  74              		.align	2
  75              		.global	ADC_SAR_Seq_1_Init
  76              		.code	16
  77              		.thumb_func
  78              		.type	ADC_SAR_Seq_1_Init, %function
  79              	ADC_SAR_Seq_1_Init:
  80              	.LFB1:
  74:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  75:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  76:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
  77:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_Init
  78:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
  79:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  80:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
  81:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Initialize component's parameters to the parameters set by user in the
  82:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  customizer of the component placed onto schematic. Usually called in
  83:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_SAR_Seq_1_Start().
  84:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  85:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
  86:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
  87:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
ARM GAS  C:\Users\PC69\AppData\Local\Temp\ccZV2CAg.s 			page 4


  88:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
  89:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
  90:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  91:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Global variables:
  92:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  The ADC_SAR_Seq_1_offset variable is initialized.
  93:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  94:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
  95:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_Init(void)
  96:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
  81              		.loc 1 96 0
  82              		.cfi_startproc
  83 0000 80B5     		push	{r7, lr}
  84              		.cfi_def_cfa_offset 8
  85              		.cfi_offset 7, -8
  86              		.cfi_offset 14, -4
  87 0002 84B0     		sub	sp, sp, #16
  88              		.cfi_def_cfa_offset 24
  89 0004 00AF     		add	r7, sp, #0
  90              		.cfi_def_cfa_register 7
  97:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     uint32 chNum;
  98:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     uint32 tmpRegVal;
  99:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     int32 counts;
 100:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 101:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 1u)
 102:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         static const uint8 CYCODE ADC_SAR_Seq_1_InputsPlacement[] =
 103:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 104:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             (uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_0_PORT << 4u) |
 105:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_0_PIN
 106:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_1_PORT << 4u) |
 107:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****              (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_1_PIN
 108:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 2u)
 109:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_2_PORT << 4u) |
 110:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_2_PIN
 111:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 2u */
 112:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 3u)
 113:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_3_PORT << 4u) |
 114:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_3_PIN
 115:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 3u */
 116:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 4u)
 117:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_4_PORT << 4u) |
 118:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_4_PIN
 119:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 4u */
 120:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 5u)
 121:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_5_PORT << 4u) |
 122:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_5_PIN
 123:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 5u */
 124:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 6u)
 125:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_6_PORT << 4u) |
 126:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_6_PIN
 127:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 6u */
 128:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 7u)
 129:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_7_PORT << 4u) |
 130:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_7_PIN
 131:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 7u */
 132:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 8u)
 133:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_8_PORT << 4u) |
 134:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_8_PIN
ARM GAS  C:\Users\PC69\AppData\Local\Temp\ccZV2CAg.s 			page 5


 135:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 8u */
 136:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 9u)
 137:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_9_PORT << 4u) |
 138:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_9_PIN
 139:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 9u */
 140:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 10u)
 141:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_10_PORT << 4u) |
 142:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_10_PIN
 143:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 10u */
 144:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 11u)
 145:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_11_PORT << 4u) |
 146:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_11_PIN
 147:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 11u */
 148:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 12u)
 149:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_12_PORT << 4u) |
 150:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_12_PIN
 151:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 12u */
 152:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 13u)
 153:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_13_PORT << 4u) |
 154:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_13_PIN
 155:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 13u */
 156:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 14u)
 157:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_14_PORT << 4u) |
 158:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_14_PIN
 159:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 14u */
 160:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 15u)
 161:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_15_PORT << 4u) |
 162:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_15_PIN
 163:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 15u */
 164:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 16u)
 165:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_16_PORT << 4u) |
 166:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_16_PIN
 167:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 16u */
 168:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         };
 169:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 1u */
 170:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 171:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_IRQ_REMOVE == 0u)
 172:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Start and set interrupt vector */
 173:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         CyIntSetPriority(ADC_SAR_Seq_1_INTC_NUMBER, ADC_SAR_Seq_1_INTC_PRIOR_NUMBER);
  91              		.loc 1 173 0
  92 0006 0E20     		mov	r0, #14
  93 0008 0321     		mov	r1, #3
  94 000a FFF7FEFF 		bl	CyIntSetPriority
 174:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         (void)CyIntSetVector(ADC_SAR_Seq_1_INTC_NUMBER, &ADC_SAR_Seq_1_ISR);
  95              		.loc 1 174 0
  96 000e 624B     		ldr	r3, .L17
  97 0010 0E20     		mov	r0, #14
  98 0012 191C     		mov	r1, r3
  99 0014 FFF7FEFF 		bl	CyIntSetVector
 175:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif   /* End ADC_SAR_Seq_1_IRQ_REMOVE */
 176:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 177:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /* Init SAR and MUX registers */
 178:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_CHAN_EN_REG = ADC_SAR_Seq_1_DEFAULT_EN_CHANNELS;
 100              		.loc 1 178 0
 101 0018 604B     		ldr	r3, .L17+4
 102 001a FF22     		mov	r2, #255
 103 001c 1A60     		str	r2, [r3]
ARM GAS  C:\Users\PC69\AppData\Local\Temp\ccZV2CAg.s 			page 6


 179:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_CTRL_REG |= ADC_SAR_Seq_1_DEFAULT_CTRL_REG_CFG | 
 180:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Enable the SAR internal pump when global pump is enabled */
 181:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         (((ADC_SAR_Seq_1_PUMP_CTRL_REG & ADC_SAR_Seq_1_PUMP_CTRL_ENABLED) != 0u) ? 
 104              		.loc 1 181 0
 105 001e 604B     		ldr	r3, .L17+8
 106 0020 1B68     		ldr	r3, [r3]
 179:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_CTRL_REG |= ADC_SAR_Seq_1_DEFAULT_CTRL_REG_CFG | 
 107              		.loc 1 179 0
 108 0022 002B     		cmp	r3, #0
 109 0024 01DA     		bge	.L6
 179:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_CTRL_REG |= ADC_SAR_Seq_1_DEFAULT_CTRL_REG_CFG | 
 110              		.loc 1 179 0 is_stmt 0 discriminator 1
 111 0026 5F49     		ldr	r1, .L17+12
 112 0028 00E0     		b	.L7
 113              	.L6:
 179:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_CTRL_REG |= ADC_SAR_Seq_1_DEFAULT_CTRL_REG_CFG | 
 114              		.loc 1 179 0 discriminator 2
 115 002a 5F49     		ldr	r1, .L17+16
 116              	.L7:
 179:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_CTRL_REG |= ADC_SAR_Seq_1_DEFAULT_CTRL_REG_CFG | 
 117              		.loc 1 179 0 discriminator 4
 118 002c 5F4B     		ldr	r3, .L17+20
 119 002e 5F4A     		ldr	r2, .L17+20
 120 0030 1268     		ldr	r2, [r2]
 121 0032 0A43     		orr	r2, r1
 122 0034 1A60     		str	r2, [r3]
 182:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_BOOSTPUMP_EN : 0u);
 183:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_SAMPLE_CTRL_REG = ADC_SAR_Seq_1_DEFAULT_SAMPLE_CTRL_REG_CFG;
 123              		.loc 1 183 0 is_stmt 1 discriminator 4
 124 0036 5E4B     		ldr	r3, .L17+24
 125 0038 5E4A     		ldr	r2, .L17+28
 126 003a 1A60     		str	r2, [r3]
 184:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_THRES_REG = ADC_SAR_Seq_1_DEFAULT_RANGE_THRES_REG_CFG;
 127              		.loc 1 184 0 discriminator 4
 128 003c 5E4B     		ldr	r3, .L17+32
 129 003e 5F4A     		ldr	r2, .L17+36
 130 0040 1A60     		str	r2, [r3]
 185:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_COND_REG  = ADC_SAR_Seq_1_COMPARE_MODE;
 131              		.loc 1 185 0 discriminator 4
 132 0042 5F4B     		ldr	r3, .L17+40
 133 0044 0022     		mov	r2, #0
 134 0046 1A60     		str	r2, [r3]
 186:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_SAMPLE_TIME01_REG = ADC_SAR_Seq_1_DEFAULT_SAMPLE_TIME01_REG_CFG;
 135              		.loc 1 186 0 discriminator 4
 136 0048 5E4B     		ldr	r3, .L17+44
 137 004a 5F4A     		ldr	r2, .L17+48
 138 004c 1A60     		str	r2, [r3]
 187:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_SAMPLE_TIME23_REG = ADC_SAR_Seq_1_DEFAULT_SAMPLE_TIME23_REG_CFG;
 139              		.loc 1 187 0 discriminator 4
 140 004e 5F4B     		ldr	r3, .L17+52
 141 0050 5F4A     		ldr	r2, .L17+56
 142 0052 1A60     		str	r2, [r3]
 188:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     
 189:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /* Connect Vm to VSSA when even one channel is single-ended or multiple channels configured */
 190:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_DEFAULT_MUX_SWITCH0 != 0u)
 191:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_MUX_SWITCH0_REG |= ADC_SAR_Seq_1_DEFAULT_MUX_SWITCH0;
 143              		.loc 1 191 0 discriminator 4
ARM GAS  C:\Users\PC69\AppData\Local\Temp\ccZV2CAg.s 			page 7


 144 0054 5F4B     		ldr	r3, .L17+60
 145 0056 5F4A     		ldr	r2, .L17+60
 146 0058 1268     		ldr	r2, [r2]
 147 005a 8021     		mov	r1, #128
 148 005c 4902     		lsl	r1, r1, #9
 149 005e 0A43     		orr	r2, r1
 150 0060 1A60     		str	r2, [r3]
 192:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Set MUX_HW_CTRL_VSSA in MUX_SWITCH_HW_CTRL when multiple channels enabled */
 193:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 1u)
 194:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             ADC_SAR_Seq_1_MUX_SWITCH_HW_CTRL_REG |= ADC_SAR_Seq_1_DEFAULT_MUX_SWITCH0;
 151              		.loc 1 194 0 discriminator 4
 152 0062 5D4B     		ldr	r3, .L17+64
 153 0064 5C4A     		ldr	r2, .L17+64
 154 0066 1268     		ldr	r2, [r2]
 155 0068 8021     		mov	r1, #128
 156 006a 4902     		lsl	r1, r1, #9
 157 006c 0A43     		orr	r2, r1
 158 006e 1A60     		str	r2, [r3]
 195:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 1u */
 196:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /*ADC_SAR_Seq_1_CHANNELS_MODE !=0 */
 197:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 198:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_SATURATE_INTR_MASK_REG = 0u;
 159              		.loc 1 198 0 discriminator 4
 160 0070 5A4B     		ldr	r3, .L17+68
 161 0072 0022     		mov	r2, #0
 162 0074 1A60     		str	r2, [r3]
 199:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_INTR_MASK_REG = 0u;
 163              		.loc 1 199 0 discriminator 4
 164 0076 5A4B     		ldr	r3, .L17+72
 165 0078 0022     		mov	r2, #0
 166 007a 1A60     		str	r2, [r3]
 200:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_INTR_MASK_REG = ADC_SAR_Seq_1_SAR_INTR_MASK;
 167              		.loc 1 200 0 discriminator 4
 168 007c 594B     		ldr	r3, .L17+76
 169 007e 0122     		mov	r2, #1
 170 0080 1A60     		str	r2, [r3]
 201:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 202:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_CY_SAR_IP_VER == ADC_SAR_Seq_1_CY_SAR_IP_VER0)
 203:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_ANA_TRIM_REG = ADC_SAR_Seq_1_TRIM_COEF;
 171              		.loc 1 203 0 discriminator 4
 172 0082 594B     		ldr	r3, .L17+80
 173 0084 0222     		mov	r2, #2
 174 0086 1A60     		str	r2, [r3]
 204:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /* (ADC_SAR_Seq_1_CY_SAR_IP_VER == ADC_SAR_Seq_1_CY_SAR_IP_VER0) */
 205:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 206:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /* Read and modify default configuration based on characterization */
 207:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     tmpRegVal = ADC_SAR_Seq_1_SAR_DFT_CTRL_REG;
 175              		.loc 1 207 0 discriminator 4
 176 0088 584B     		ldr	r3, .L17+84
 177 008a 1B68     		ldr	r3, [r3]
 178 008c 7B60     		str	r3, [r7, #4]
 208:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     tmpRegVal &= (uint32)~ADC_SAR_Seq_1_DCEN;
 179              		.loc 1 208 0 discriminator 4
 180 008e 7B68     		ldr	r3, [r7, #4]
 181 0090 574A     		ldr	r2, .L17+88
 182 0092 1340     		and	r3, r2
 183 0094 7B60     		str	r3, [r7, #4]
ARM GAS  C:\Users\PC69\AppData\Local\Temp\ccZV2CAg.s 			page 8


 209:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     
 210:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_CY_SAR_IP_VER == ADC_SAR_Seq_1_CY_SAR_IP_VER0)
 211:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_NOMINAL_CLOCK_FREQ > (ADC_SAR_Seq_1_MAX_FREQUENCY / 2))
 212:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             tmpRegVal |= ADC_SAR_Seq_1_SEL_CSEL_DFT_CHAR;
 213:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #else  /* clock speed < 9 Mhz */
 214:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             tmpRegVal |= ADC_SAR_Seq_1_DLY_INC;
 184              		.loc 1 214 0 discriminator 4
 185 0096 7B68     		ldr	r3, [r7, #4]
 186 0098 0122     		mov	r2, #1
 187 009a 1343     		orr	r3, r2
 188 009c 7B60     		str	r3, [r7, #4]
 215:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* clock speed > 9 Mhz */
 216:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #else
 217:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if ((ADC_SAR_Seq_1_DEFAULT_VREF_SEL == ADC_SAR_Seq_1__INTERNAL1024) || \
 218:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****              (ADC_SAR_Seq_1_DEFAULT_VREF_SEL == ADC_SAR_Seq_1__INTERNALVREF))
 219:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             tmpRegVal |= ADC_SAR_Seq_1_DLY_INC;
 220:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #else
 221:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             tmpRegVal |= ADC_SAR_Seq_1_DCEN;
 222:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             tmpRegVal &= (uint32)~ADC_SAR_Seq_1_DLY_INC;
 223:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ((ADC_SAR_Seq_1_DEFAULT_VREF_SEL == ADC_SAR_Seq_1__INTERNAL1024) || \
 224:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                    (ADC_SAR_Seq_1_DEFAULT_VREF_SEL == ADC_SAR_Seq_1__INTERNALVREF)) */
 225:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /* (ADC_SAR_Seq_1_CY_SAR_IP_VER == ADC_SAR_Seq_1_CY_SAR_IP_VER0) */
 226:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     
 227:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_DFT_CTRL_REG = tmpRegVal;
 189              		.loc 1 227 0 discriminator 4
 190 009e 534B     		ldr	r3, .L17+84
 191 00a0 7A68     		ldr	r2, [r7, #4]
 192 00a2 1A60     		str	r2, [r3]
 228:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 229:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_MAX_RESOLUTION != ADC_SAR_Seq_1_RESOLUTION_12)
 230:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_WOUNDING_REG = ADC_SAR_Seq_1_ALT_WOUNDING;
 231:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /* ADC_SAR_Seq_1_MAX_RESOLUTION != ADC_SAR_Seq_1_RESOLUTION_12 */
 232:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 233:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     for(chNum = 0u; chNum < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM; chNum++)
 193              		.loc 1 233 0 discriminator 4
 194 00a4 0023     		mov	r3, #0
 195 00a6 FB60     		str	r3, [r7, #12]
 196 00a8 70E0     		b	.L8
 197              	.L16:
 234:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 235:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         tmpRegVal = (ADC_SAR_Seq_1_channelsConfig[chNum] & ADC_SAR_Seq_1_CHANNEL_CONFIG_MASK);
 198              		.loc 1 235 0
 199 00aa 524B     		ldr	r3, .L17+92
 200 00ac FA68     		ldr	r2, [r7, #12]
 201 00ae 9200     		lsl	r2, r2, #2
 202 00b0 D258     		ldr	r2, [r2, r3]
 203 00b2 DC23     		mov	r3, #220
 204 00b4 9B01     		lsl	r3, r3, #6
 205 00b6 1340     		and	r3, r2
 206 00b8 7B60     		str	r3, [r7, #4]
 236:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 1u)
 237:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             tmpRegVal |= ADC_SAR_Seq_1_InputsPlacement[chNum];
 207              		.loc 1 237 0
 208 00ba 4F4A     		ldr	r2, .L17+96
 209 00bc FB68     		ldr	r3, [r7, #12]
 210 00be D318     		add	r3, r2, r3
 211 00c0 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\PC69\AppData\Local\Temp\ccZV2CAg.s 			page 9


 212 00c2 1A1C     		mov	r2, r3
 213 00c4 7B68     		ldr	r3, [r7, #4]
 214 00c6 1343     		orr	r3, r2
 215 00c8 7B60     		str	r3, [r7, #4]
 238:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 1u */
 239:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         
 240:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         
 241:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* When the part is limited to 10-bit then the SUB_RESOLUTION bit
 242:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         *  will be ignored and the RESOLUTION bit selects between 10-bit
 243:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         *  (0) and 8-bit (1) resolution.
 244:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         */
 245:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if((ADC_SAR_Seq_1_MAX_RESOLUTION != ADC_SAR_Seq_1_RESOLUTION_12) && \
 246:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             (ADC_SAR_Seq_1_ALT_WOUNDING == ADC_SAR_Seq_1_WOUNDING_10BIT))
 247:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             tmpRegVal &= (uint32)(~ADC_SAR_Seq_1_ALT_RESOLUTION_ON);
 248:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_MAX_RESOLUTION != ADC_SAR_Seq_1_RESOLUTION_12 */
 249:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 250:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED)
 251:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         if(chNum < ADC_SAR_Seq_1_SEQUENCED_CHANNELS_NUM)
 252:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED */
 253:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 254:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             CY_SET_REG32((reg32 *)(ADC_SAR_Seq_1_SAR_CHAN_CONFIG_IND + (uint32)(chNum << 2)), tmpRe
 216              		.loc 1 254 0
 217 00ca FB68     		ldr	r3, [r7, #12]
 218 00cc 9B00     		lsl	r3, r3, #2
 219 00ce 4B4A     		ldr	r2, .L17+100
 220 00d0 9446     		mov	ip, r2
 221 00d2 6344     		add	r3, r3, ip
 222 00d4 7A68     		ldr	r2, [r7, #4]
 223 00d6 1A60     		str	r2, [r3]
 255:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 256:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             if((ADC_SAR_Seq_1_channelsConfig[chNum] & ADC_SAR_Seq_1_IS_SATURATE_EN_MASK) != 0u)
 224              		.loc 1 256 0
 225 00d8 464B     		ldr	r3, .L17+92
 226 00da FA68     		ldr	r2, [r7, #12]
 227 00dc 9200     		lsl	r2, r2, #2
 228 00de D358     		ldr	r3, [r2, r3]
 229 00e0 0122     		mov	r2, #1
 230 00e2 1340     		and	r3, r2
 231 00e4 09D0     		beq	.L9
 257:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 258:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_SAR_SATURATE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 232              		.loc 1 258 0
 233 00e6 3D4B     		ldr	r3, .L17+68
 234 00e8 3C4A     		ldr	r2, .L17+68
 235 00ea 1268     		ldr	r2, [r2]
 236 00ec F968     		ldr	r1, [r7, #12]
 237 00ee 0120     		mov	r0, #1
 238 00f0 8840     		lsl	r0, r0, r1
 239 00f2 011C     		mov	r1, r0
 240 00f4 89B2     		uxth	r1, r1
 241 00f6 0A43     		orr	r2, r1
 242 00f8 1A60     		str	r2, [r3]
 243              	.L9:
 259:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 260:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 261:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             if((ADC_SAR_Seq_1_channelsConfig[chNum] & ADC_SAR_Seq_1_IS_RANGE_CTRL_EN_MASK) != 0u)
 244              		.loc 1 261 0
ARM GAS  C:\Users\PC69\AppData\Local\Temp\ccZV2CAg.s 			page 10


 245 00fa 3E4B     		ldr	r3, .L17+92
 246 00fc FA68     		ldr	r2, [r7, #12]
 247 00fe 9200     		lsl	r2, r2, #2
 248 0100 D358     		ldr	r3, [r2, r3]
 249 0102 0222     		mov	r2, #2
 250 0104 1340     		and	r3, r2
 251 0106 09D0     		beq	.L10
 262:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 263:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_SAR_RANGE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 252              		.loc 1 263 0
 253 0108 354B     		ldr	r3, .L17+72
 254 010a 354A     		ldr	r2, .L17+72
 255 010c 1268     		ldr	r2, [r2]
 256 010e F968     		ldr	r1, [r7, #12]
 257 0110 0120     		mov	r0, #1
 258 0112 8840     		lsl	r0, r0, r1
 259 0114 011C     		mov	r1, r0
 260 0116 89B2     		uxth	r1, r1
 261 0118 0A43     		orr	r2, r1
 262 011a 1A60     		str	r2, [r3]
 263              	.L10:
 264:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 265:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }
 266:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED)
 267:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             else
 268:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 269:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 CY_SET_REG32(ADC_SAR_Seq_1_SAR_INJ_CHAN_CONFIG_PTR, tmpRegVal | ADC_SAR_Seq_1_INJ_T
 270:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 271:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 if((ADC_SAR_Seq_1_channelsConfig[chNum] & ADC_SAR_Seq_1_IS_SATURATE_EN_MASK) != 0u)
 272:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 {
 273:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                     ADC_SAR_Seq_1_SAR_INTR_MASK_REG |= ADC_SAR_Seq_1_INJ_SATURATE_MASK;
 274:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 }
 275:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 276:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 if((ADC_SAR_Seq_1_channelsConfig[chNum] & ADC_SAR_Seq_1_IS_RANGE_CTRL_EN_MASK) != 0
 277:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 {
 278:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                     ADC_SAR_Seq_1_SAR_INTR_MASK_REG |= ADC_SAR_Seq_1_INJ_RANGE_MASK;
 279:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 }
 280:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 281:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED */
 282:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 283:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         if((ADC_SAR_Seq_1_channelsConfig[chNum] & ADC_SAR_Seq_1_ALT_RESOLUTION_ON) != 0u)
 264              		.loc 1 283 0
 265 011c 354B     		ldr	r3, .L17+92
 266 011e FA68     		ldr	r2, [r7, #12]
 267 0120 9200     		lsl	r2, r2, #2
 268 0122 D258     		ldr	r2, [r2, r3]
 269 0124 8023     		mov	r3, #128
 270 0126 9B00     		lsl	r3, r3, #2
 271 0128 1340     		and	r3, r2
 272 012a 03D0     		beq	.L11
 284:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 285:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                counts = (int32)ADC_SAR_Seq_1_DEFAULT_MAX_WRK_ALT;
 273              		.loc 1 285 0
 274 012c 8023     		mov	r3, #128
 275 012e 5B00     		lsl	r3, r3, #1
 276 0130 BB60     		str	r3, [r7, #8]
 277 0132 02E0     		b	.L12
ARM GAS  C:\Users\PC69\AppData\Local\Temp\ccZV2CAg.s 			page 11


 278              	.L11:
 286:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }
 287:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         else
 288:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 289:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                counts = (int32)ADC_SAR_Seq_1_SAR_WRK_MAX_12BIT;
 279              		.loc 1 289 0
 280 0134 8023     		mov	r3, #128
 281 0136 5B01     		lsl	r3, r3, #5
 282 0138 BB60     		str	r3, [r7, #8]
 283              	.L12:
 290:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }
 291:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 292:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         if((ADC_SAR_Seq_1_channelsConfig[chNum] & ADC_SAR_Seq_1_DIFFERENTIAL_EN) == 0u)
 284              		.loc 1 292 0
 285 013a 2E4B     		ldr	r3, .L17+92
 286 013c FA68     		ldr	r2, [r7, #12]
 287 013e 9200     		lsl	r2, r2, #2
 288 0140 D258     		ldr	r2, [r2, r3]
 289 0142 8023     		mov	r3, #128
 290 0144 5B00     		lsl	r3, r3, #1
 291 0146 1340     		and	r3, r2
 292 0148 05D1     		bne	.L13
 293:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 294:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if((ADC_SAR_Seq_1_DEFAULT_SE_RESULT_FORMAT_SEL == ADC_SAR_Seq_1__FSIGNED) && \
 295:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 (ADC_SAR_Seq_1_DEFAULT_NEG_INPUT_SEL == ADC_SAR_Seq_1__VREF))
 296:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 /* Set offset to the minus half scale to convert results to unsigned format */
 297:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_offset[chNum] = (int16)(counts / -2);
 298:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #else
 299:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_offset[chNum] = 0;
 293              		.loc 1 299 0
 294 014a 2D4B     		ldr	r3, .L17+104
 295 014c FA68     		ldr	r2, [r7, #12]
 296 014e 5200     		lsl	r2, r2, #1
 297 0150 0021     		mov	r1, #0
 298 0152 D152     		strh	r1, [r2, r3]
 299 0154 04E0     		b	.L14
 300              	.L13:
 300:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* end DEFAULT_SE_RESULT_FORMAT_SEL == ADC_SAR_Seq_1__FSIGNED */
 301:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }
 302:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         else    /* Differential channel */
 303:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 304:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC_SAR_Seq_1__FUNSIGNED)
 305:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 /* Set offset to the half scale to convert results to signed format */
 306:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_offset[chNum] = (int16)(counts / 2);
 307:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #else
 308:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_offset[chNum] = 0;
 301              		.loc 1 308 0
 302 0156 2A4B     		ldr	r3, .L17+104
 303 0158 FA68     		ldr	r2, [r7, #12]
 304 015a 5200     		lsl	r2, r2, #1
 305 015c 0021     		mov	r1, #0
 306 015e D152     		strh	r1, [r2, r3]
 307              	.L14:
 309:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* end ADC_SAR_Seq_1_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC_SAR_Seq_1__FUNSIGNED 
 310:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }
 311:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Calculate gain in counts per 10 volts with rounding */
 312:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_countsPer10Volt[chNum] = (int16)(((counts * ADC_SAR_Seq_1_10MV_COUNTS) +
ARM GAS  C:\Users\PC69\AppData\Local\Temp\ccZV2CAg.s 			page 12


 308              		.loc 1 312 0 discriminator 2
 309 0160 BB68     		ldr	r3, [r7, #8]
 310 0162 284A     		ldr	r2, .L17+108
 311 0164 5343     		mul	r3, r2
 312 0166 8022     		mov	r2, #128
 313 0168 D200     		lsl	r2, r2, #3
 314 016a 9446     		mov	ip, r2
 315 016c 6344     		add	r3, r3, ip
 313:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                             ADC_SAR_Seq_1_DEFAULT_VREF_MV_VALUE) / (ADC_SAR_Seq_1_DEFAULT_VREF_MV_V
 316              		.loc 1 313 0 discriminator 2
 317 016e 002B     		cmp	r3, #0
 318 0170 02DA     		bge	.L15
 319 0172 254A     		ldr	r2, .L17+112
 320 0174 9446     		mov	ip, r2
 321 0176 6344     		add	r3, r3, ip
 322              	.L15:
 323 0178 DB12     		asr	r3, r3, #11
 312:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                             ADC_SAR_Seq_1_DEFAULT_VREF_MV_VALUE) / (ADC_SAR_Seq_1_DEFAULT_VREF_MV_V
 324              		.loc 1 312 0 discriminator 2
 325 017a 9BB2     		uxth	r3, r3
 326 017c 19B2     		sxth	r1, r3
 327 017e 234B     		ldr	r3, .L17+116
 328 0180 FA68     		ldr	r2, [r7, #12]
 329 0182 9200     		lsl	r2, r2, #2
 330 0184 D150     		str	r1, [r2, r3]
 233:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 331              		.loc 1 233 0 discriminator 2
 332 0186 FB68     		ldr	r3, [r7, #12]
 333 0188 0133     		add	r3, r3, #1
 334 018a FB60     		str	r3, [r7, #12]
 335              	.L8:
 233:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 336              		.loc 1 233 0 is_stmt 0 discriminator 1
 337 018c FB68     		ldr	r3, [r7, #12]
 338 018e 072B     		cmp	r3, #7
 339 0190 8BD9     		bls	.L16
 314:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 315:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 340              		.loc 1 315 0 is_stmt 1
 341 0192 BD46     		mov	sp, r7
 342 0194 04B0     		add	sp, sp, #16
 343              		@ sp needed
 344 0196 80BD     		pop	{r7, pc}
 345              	.L18:
 346              		.align	2
 347              	.L17:
 348 0198 00000000 		.word	ADC_SAR_Seq_1_ISR
 349 019c 20001A40 		.word	1075445792
 350 01a0 80031A40 		.word	1075446656
 351 01a4 C0201013 		.word	319824064
 352 01a8 C0200013 		.word	318775488
 353 01ac 00001A40 		.word	1075445760
 354 01b0 04001A40 		.word	1075445764
 355 01b4 8C000080 		.word	-2147483508
 356 01b8 18001A40 		.word	1075445784
 357 01bc 0000FF07 		.word	134152192
 358 01c0 1C001A40 		.word	1075445788
ARM GAS  C:\Users\PC69\AppData\Local\Temp\ccZV2CAg.s 			page 13


 359 01c4 10001A40 		.word	1075445776
 360 01c8 04000200 		.word	131076
 361 01cc 14001A40 		.word	1075445780
 362 01d0 02000200 		.word	131074
 363 01d4 00031A40 		.word	1075446528
 364 01d8 40031A40 		.word	1075446592
 365 01dc 28021A40 		.word	1075446312
 366 01e0 38021A40 		.word	1075446328
 367 01e4 18021A40 		.word	1075446296
 368 01e8 000F1A40 		.word	1075449600
 369 01ec 30001A40 		.word	1075445808
 370 01f0 FFFFFFDF 		.word	-536870913
 371 01f4 00000000 		.word	ADC_SAR_Seq_1_channelsConfig
 372 01f8 20000000 		.word	ADC_SAR_Seq_1_InputsPlacement.4714
 373 01fc 80001A40 		.word	1075445888
 374 0200 00000000 		.word	ADC_SAR_Seq_1_offset
 375 0204 10270000 		.word	10000
 376 0208 FF070000 		.word	2047
 377 020c 00000000 		.word	ADC_SAR_Seq_1_countsPer10Volt
 378              		.cfi_endproc
 379              	.LFE1:
 380              		.size	ADC_SAR_Seq_1_Init, .-ADC_SAR_Seq_1_Init
 381              		.section	.text.ADC_SAR_Seq_1_Enable,"ax",%progbits
 382              		.align	2
 383              		.global	ADC_SAR_Seq_1_Enable
 384              		.code	16
 385              		.thumb_func
 386              		.type	ADC_SAR_Seq_1_Enable, %function
 387              	ADC_SAR_Seq_1_Enable:
 388              	.LFB2:
 316:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 317:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 318:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_1_Enable
 319:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 320:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 321:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 322:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Enables the clock and analog power for SAR ADC.
 323:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 324:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 325:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 326:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 327:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 328:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 329:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 330:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 331:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_Enable(void)
 332:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 389              		.loc 1 332 0
 390              		.cfi_startproc
 391 0000 80B5     		push	{r7, lr}
 392              		.cfi_def_cfa_offset 8
 393              		.cfi_offset 7, -8
 394              		.cfi_offset 14, -4
 395 0002 00AF     		add	r7, sp, #0
 396              		.cfi_def_cfa_register 7
 333:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     if (0u == (ADC_SAR_Seq_1_SAR_CTRL_REG & ADC_SAR_Seq_1_ENABLE))
 397              		.loc 1 333 0
ARM GAS  C:\Users\PC69\AppData\Local\Temp\ccZV2CAg.s 			page 14


 398 0004 074B     		ldr	r3, .L21
 399 0006 1B68     		ldr	r3, [r3]
 400 0008 002B     		cmp	r3, #0
 401 000a 09DB     		blt	.L19
 334:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 335:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_CY_SAR_IP_VER != ADC_SAR_Seq_1_CY_SAR_IP_VER0)
 336:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 337:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             while (0u != (ADC_SAR_Seq_1_SAR_STATUS_REG & ADC_SAR_Seq_1_STATUS_BUSY))
 338:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 339:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 /* wait for SAR to go idle to avoid deadlock */
 340:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 341:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* (ADC_SAR_Seq_1_CY_SAR_IP_VER != ADC_SAR_Seq_1_CY_SAR_IP_VER0) */
 342:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         
 343:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_SAR_CTRL_REG |= ADC_SAR_Seq_1_ENABLE;
 402              		.loc 1 343 0
 403 000c 054B     		ldr	r3, .L21
 404 000e 054A     		ldr	r2, .L21
 405 0010 1268     		ldr	r2, [r2]
 406 0012 8021     		mov	r1, #128
 407 0014 0906     		lsl	r1, r1, #24
 408 0016 0A43     		orr	r2, r1
 409 0018 1A60     		str	r2, [r3]
 344:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         
 345:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* The block is ready to use 10 us after the enable signal is set high. */
 346:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         CyDelayUs(ADC_SAR_Seq_1_10US_DELAY);         
 410              		.loc 1 346 0
 411 001a 0A20     		mov	r0, #10
 412 001c FFF7FEFF 		bl	CyDelayUs
 413              	.L19:
 347:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 348:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 414              		.loc 1 348 0
 415 0020 BD46     		mov	sp, r7
 416              		@ sp needed
 417 0022 80BD     		pop	{r7, pc}
 418              	.L22:
 419              		.align	2
 420              	.L21:
 421 0024 00001A40 		.word	1075445760
 422              		.cfi_endproc
 423              	.LFE2:
 424              		.size	ADC_SAR_Seq_1_Enable, .-ADC_SAR_Seq_1_Enable
 425              		.section	.text.ADC_SAR_Seq_1_Stop,"ax",%progbits
 426              		.align	2
 427              		.global	ADC_SAR_Seq_1_Stop
 428              		.code	16
 429              		.thumb_func
 430              		.type	ADC_SAR_Seq_1_Stop, %function
 431              	ADC_SAR_Seq_1_Stop:
 432              	.LFB3:
 349:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 350:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 351:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 352:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_Stop
 353:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 354:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 355:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
ARM GAS  C:\Users\PC69\AppData\Local\Temp\ccZV2CAg.s 			page 15


 356:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  This function stops ADC conversions and puts the ADC into its lowest power
 357:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  mode.
 358:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 359:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 360:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 361:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 362:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 363:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 364:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 365:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 366:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_Stop(void)
 367:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 433              		.loc 1 367 0
 434              		.cfi_startproc
 435 0000 80B5     		push	{r7, lr}
 436              		.cfi_def_cfa_offset 8
 437              		.cfi_offset 7, -8
 438              		.cfi_offset 14, -4
 439 0002 00AF     		add	r7, sp, #0
 440              		.cfi_def_cfa_register 7
 368:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_CTRL_REG &= (uint32)~ADC_SAR_Seq_1_ENABLE;
 441              		.loc 1 368 0
 442 0004 034B     		ldr	r3, .L24
 443 0006 034A     		ldr	r2, .L24
 444 0008 1268     		ldr	r2, [r2]
 445 000a 5200     		lsl	r2, r2, #1
 446 000c 5208     		lsr	r2, r2, #1
 447 000e 1A60     		str	r2, [r3]
 369:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 448              		.loc 1 369 0
 449 0010 BD46     		mov	sp, r7
 450              		@ sp needed
 451 0012 80BD     		pop	{r7, pc}
 452              	.L25:
 453              		.align	2
 454              	.L24:
 455 0014 00001A40 		.word	1075445760
 456              		.cfi_endproc
 457              	.LFE3:
 458              		.size	ADC_SAR_Seq_1_Stop, .-ADC_SAR_Seq_1_Stop
 459              		.section	.text.ADC_SAR_Seq_1_StartConvert,"ax",%progbits
 460              		.align	2
 461              		.global	ADC_SAR_Seq_1_StartConvert
 462              		.code	16
 463              		.thumb_func
 464              		.type	ADC_SAR_Seq_1_StartConvert, %function
 465              	ADC_SAR_Seq_1_StartConvert:
 466              	.LFB4:
 370:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 371:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 372:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 373:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_StartConvert
 374:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 375:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 376:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 377:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Description:
 378:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  For free running mode, this API starts the conversion process and it
ARM GAS  C:\Users\PC69\AppData\Local\Temp\ccZV2CAg.s 			page 16


 379:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  runs continuously.
 380:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 381:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  In a triggered mode, this routine triggers every conversion by
 382:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  writing into the FW_TRIGGER bit in SAR_START_CTRL reg. In triggered mode,
 383:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  every conversion has to start by this API.
 384:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 385:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 386:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 387:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 388:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 389:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 390:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 391:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 392:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_StartConvert(void)
 393:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 467              		.loc 1 393 0
 468              		.cfi_startproc
 469 0000 80B5     		push	{r7, lr}
 470              		.cfi_def_cfa_offset 8
 471              		.cfi_offset 7, -8
 472              		.cfi_offset 14, -4
 473 0002 00AF     		add	r7, sp, #0
 474              		.cfi_def_cfa_register 7
 394:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_DEFAULT_SAMPLE_MODE_SEL == ADC_SAR_Seq_1__FREERUNNING)
 395:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_SAR_SAMPLE_CTRL_REG |= ADC_SAR_Seq_1_CONTINUOUS_EN;
 475              		.loc 1 395 0
 476 0004 044B     		ldr	r3, .L27
 477 0006 044A     		ldr	r2, .L27
 478 0008 1268     		ldr	r2, [r2]
 479 000a 8021     		mov	r1, #128
 480 000c 4902     		lsl	r1, r1, #9
 481 000e 0A43     		orr	r2, r1
 482 0010 1A60     		str	r2, [r3]
 396:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #else /* Firmware trigger */
 397:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_SAR_START_CTRL_REG = ADC_SAR_Seq_1_FW_TRIGGER;
 398:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /* End ADC_SAR_Seq_1_DEFAULT_SAMPLE_MODE == ADC_SAR_Seq_1__FREERUNNING */
 399:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 400:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 483              		.loc 1 400 0
 484 0012 BD46     		mov	sp, r7
 485              		@ sp needed
 486 0014 80BD     		pop	{r7, pc}
 487              	.L28:
 488 0016 C046     		.align	2
 489              	.L27:
 490 0018 04001A40 		.word	1075445764
 491              		.cfi_endproc
 492              	.LFE4:
 493              		.size	ADC_SAR_Seq_1_StartConvert, .-ADC_SAR_Seq_1_StartConvert
 494              		.section	.text.ADC_SAR_Seq_1_StopConvert,"ax",%progbits
 495              		.align	2
 496              		.global	ADC_SAR_Seq_1_StopConvert
 497              		.code	16
 498              		.thumb_func
 499              		.type	ADC_SAR_Seq_1_StopConvert, %function
 500              	ADC_SAR_Seq_1_StopConvert:
 501              	.LFB5:
ARM GAS  C:\Users\PC69\AppData\Local\Temp\ccZV2CAg.s 			page 17


 401:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 402:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 403:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 404:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_StopConvert
 405:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 406:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 407:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 408:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Forces the ADC to stop all conversions.
 409:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 410:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 411:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 412:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 413:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 414:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 415:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 416:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 417:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_StopConvert(void)
 418:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 502              		.loc 1 418 0
 503              		.cfi_startproc
 504 0000 80B5     		push	{r7, lr}
 505              		.cfi_def_cfa_offset 8
 506              		.cfi_offset 7, -8
 507              		.cfi_offset 14, -4
 508 0002 00AF     		add	r7, sp, #0
 509              		.cfi_def_cfa_register 7
 419:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_DEFAULT_SAMPLE_MODE_SEL == ADC_SAR_Seq_1__FREERUNNING)
 420:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_SAR_SAMPLE_CTRL_REG &= (uint32)(~ADC_SAR_Seq_1_CONTINUOUS_EN);
 510              		.loc 1 420 0
 511 0004 034B     		ldr	r3, .L30
 512 0006 034A     		ldr	r2, .L30
 513 0008 1268     		ldr	r2, [r2]
 514 000a 0349     		ldr	r1, .L30+4
 515 000c 0A40     		and	r2, r1
 516 000e 1A60     		str	r2, [r3]
 421:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /* ADC_SAR_Seq_1_DEFAULT_SAMPLE_MODE == ADC_SAR_Seq_1__FREERUNNING */
 422:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 517              		.loc 1 422 0
 518 0010 BD46     		mov	sp, r7
 519              		@ sp needed
 520 0012 80BD     		pop	{r7, pc}
 521              	.L31:
 522              		.align	2
 523              	.L30:
 524 0014 04001A40 		.word	1075445764
 525 0018 FFFFFEFF 		.word	-65537
 526              		.cfi_endproc
 527              	.LFE5:
 528              		.size	ADC_SAR_Seq_1_StopConvert, .-ADC_SAR_Seq_1_StopConvert
 529              		.section	.text.ADC_SAR_Seq_1_IsEndConversion,"ax",%progbits
 530              		.align	2
 531              		.global	ADC_SAR_Seq_1_IsEndConversion
 532              		.code	16
 533              		.thumb_func
 534              		.type	ADC_SAR_Seq_1_IsEndConversion, %function
 535              	ADC_SAR_Seq_1_IsEndConversion:
 536              	.LFB6:
ARM GAS  C:\Users\PC69\AppData\Local\Temp\ccZV2CAg.s 			page 18


 423:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 424:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 425:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 426:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_IsEndConversion
 427:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 428:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 429:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 430:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Description: Checks for ADC end of conversion for the case one
 431:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  channel and end of scan for the case of multiple channels. It acts
 432:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  as a software version of the EOC. This function provides the
 433:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  programmer with two options. In one mode this function
 434:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  immediately returns with the conversion status. In the other mode,
 435:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  the function does not return (blocking) until the conversion has
 436:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  completed.
 437:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 438:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 439:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_RETURN_STATUS        -> Immediately returns conversion result status
 440:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_WAIT_FOR_RESULT      -> Does not return until ADC complete
 441:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_RETURN_STATUS_INJ    -> Immediately returns conversion result status
 442:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *                              for injection channel
 443:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_WAIT_FOR_RESULT_INJ  -> Does not return until ADC completes injection
 444:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *                              channel conversion
 445:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 446:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 447:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  If a non-zero value is returned, the last conversion or scan has completed.
 448:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  If the returned value is zero, the ADC is still in the process of a scan.
 449:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 450:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 451:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** uint32 ADC_SAR_Seq_1_IsEndConversion(uint32 retMode)
 452:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 537              		.loc 1 452 0
 538              		.cfi_startproc
 539 0000 80B5     		push	{r7, lr}
 540              		.cfi_def_cfa_offset 8
 541              		.cfi_offset 7, -8
 542              		.cfi_offset 14, -4
 543 0002 84B0     		sub	sp, sp, #16
 544              		.cfi_def_cfa_offset 24
 545 0004 00AF     		add	r7, sp, #0
 546              		.cfi_def_cfa_register 7
 547 0006 7860     		str	r0, [r7, #4]
 453:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     uint32 status = 0u;
 548              		.loc 1 453 0
 549 0008 0023     		mov	r3, #0
 550 000a FB60     		str	r3, [r7, #12]
 454:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 455:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     if((retMode & (ADC_SAR_Seq_1_RETURN_STATUS | ADC_SAR_Seq_1_WAIT_FOR_RESULT)) != 0u)
 551              		.loc 1 455 0
 552 000c 7B68     		ldr	r3, [r7, #4]
 553 000e 0322     		mov	r2, #3
 554 0010 1340     		and	r3, r2
 555 0012 11D0     		beq	.L33
 556              	.L35:
 456:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 457:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         do
 458:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 459:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             status = ADC_SAR_Seq_1_SAR_INTR_REG & ADC_SAR_Seq_1_EOS_MASK;
ARM GAS  C:\Users\PC69\AppData\Local\Temp\ccZV2CAg.s 			page 19


 557              		.loc 1 459 0 discriminator 2
 558 0014 0B4B     		ldr	r3, .L37
 559 0016 1B68     		ldr	r3, [r3]
 560 0018 0122     		mov	r2, #1
 561 001a 1340     		and	r3, r2
 562 001c FB60     		str	r3, [r7, #12]
 460:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }while((status == 0u) && ((retMode & ADC_SAR_Seq_1_WAIT_FOR_RESULT) != 0u));
 563              		.loc 1 460 0 discriminator 2
 564 001e FB68     		ldr	r3, [r7, #12]
 565 0020 002B     		cmp	r3, #0
 566 0022 03D1     		bne	.L34
 567              		.loc 1 460 0 is_stmt 0 discriminator 1
 568 0024 7B68     		ldr	r3, [r7, #4]
 569 0026 0222     		mov	r2, #2
 570 0028 1340     		and	r3, r2
 571 002a F3D1     		bne	.L35
 572              	.L34:
 461:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 462:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         if(status != 0u)
 573              		.loc 1 462 0 is_stmt 1
 574 002c FB68     		ldr	r3, [r7, #12]
 575 002e 002B     		cmp	r3, #0
 576 0030 02D0     		beq	.L33
 463:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 464:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             /* Clear EOS bit */
 465:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             ADC_SAR_Seq_1_SAR_INTR_REG = ADC_SAR_Seq_1_EOS_MASK;
 577              		.loc 1 465 0
 578 0032 044B     		ldr	r3, .L37
 579 0034 0122     		mov	r2, #1
 580 0036 1A60     		str	r2, [r3]
 581              	.L33:
 466:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }
 467:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 468:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 469:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED)
 470:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         if((retMode & (ADC_SAR_Seq_1_RETURN_STATUS_INJ | ADC_SAR_Seq_1_WAIT_FOR_RESULT_INJ)) != 0u)
 471:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 472:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             do
 473:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 474:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 status |= ADC_SAR_Seq_1_SAR_INTR_REG & ADC_SAR_Seq_1_INJ_EOC_MASK;
 475:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }while(((status & ADC_SAR_Seq_1_INJ_EOC_MASK) == 0u) &&
 476:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                    ((retMode & ADC_SAR_Seq_1_WAIT_FOR_RESULT_INJ) != 0u));
 477:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 478:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             if((status & ADC_SAR_Seq_1_INJ_EOC_MASK) != 0u)
 479:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 480:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 /* Clear Injection EOS bit */
 481:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_SAR_INTR_REG = ADC_SAR_Seq_1_INJ_EOC_MASK;
 482:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 483:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }
 484:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /* ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED */
 485:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 486:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     return (status);
 582              		.loc 1 486 0
 583 0038 FB68     		ldr	r3, [r7, #12]
 487:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 584              		.loc 1 487 0
 585 003a 181C     		mov	r0, r3
ARM GAS  C:\Users\PC69\AppData\Local\Temp\ccZV2CAg.s 			page 20


 586 003c BD46     		mov	sp, r7
 587 003e 04B0     		add	sp, sp, #16
 588              		@ sp needed
 589 0040 80BD     		pop	{r7, pc}
 590              	.L38:
 591 0042 C046     		.align	2
 592              	.L37:
 593 0044 10021A40 		.word	1075446288
 594              		.cfi_endproc
 595              	.LFE6:
 596              		.size	ADC_SAR_Seq_1_IsEndConversion, .-ADC_SAR_Seq_1_IsEndConversion
 597              		.section	.text.ADC_SAR_Seq_1_GetResult16,"ax",%progbits
 598              		.align	2
 599              		.global	ADC_SAR_Seq_1_GetResult16
 600              		.code	16
 601              		.thumb_func
 602              		.type	ADC_SAR_Seq_1_GetResult16, %function
 603              	ADC_SAR_Seq_1_GetResult16:
 604              	.LFB7:
 488:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 489:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 490:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 491:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_GetResult16
 492:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 493:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 494:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 495:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Gets the data available in the SAR DATA register.
 496:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 497:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 498:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  chan: The ADC channel in which to return the result. The first channel
 499:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  is 0 and the injection channel if enabled is the number of valid channels.
 500:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 501:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 502:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Returns converted data as a signed 16-bit integer
 503:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 504:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 505:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** int16 ADC_SAR_Seq_1_GetResult16(uint32 chan)
 506:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 605              		.loc 1 506 0
 606              		.cfi_startproc
 607 0000 80B5     		push	{r7, lr}
 608              		.cfi_def_cfa_offset 8
 609              		.cfi_offset 7, -8
 610              		.cfi_offset 14, -4
 611 0002 84B0     		sub	sp, sp, #16
 612              		.cfi_def_cfa_offset 24
 613 0004 00AF     		add	r7, sp, #0
 614              		.cfi_def_cfa_register 7
 615 0006 7860     		str	r0, [r7, #4]
 507:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     uint32 result;
 508:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 509:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 510:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     CYASSERT(chan < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM);
 616              		.loc 1 510 0
 617 0008 7B68     		ldr	r3, [r7, #4]
 618 000a 072B     		cmp	r3, #7
 619 000c 02D9     		bls	.L40
ARM GAS  C:\Users\PC69\AppData\Local\Temp\ccZV2CAg.s 			page 21


 620              		.loc 1 510 0 is_stmt 0 discriminator 1
 621 000e 0020     		mov	r0, #0
 622 0010 FFF7FEFF 		bl	CyHalt
 623              	.L40:
 511:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 512:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     if(chan < ADC_SAR_Seq_1_SEQUENCED_CHANNELS_NUM)
 624              		.loc 1 512 0 is_stmt 1
 625 0014 7B68     		ldr	r3, [r7, #4]
 626 0016 072B     		cmp	r3, #7
 627 0018 09D8     		bhi	.L41
 513:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 514:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         result = CY_GET_REG32((reg32 *)(ADC_SAR_Seq_1_SAR_CHAN_RESULT_IND + (uint32)(chan << 2u))) 
 628              		.loc 1 514 0
 629 001a 7B68     		ldr	r3, [r7, #4]
 630 001c 9B00     		lsl	r3, r3, #2
 631 001e 084A     		ldr	r2, .L44
 632 0020 9446     		mov	ip, r2
 633 0022 6344     		add	r3, r3, ip
 634 0024 1B68     		ldr	r3, [r3]
 635 0026 1B04     		lsl	r3, r3, #16
 636 0028 1B0C     		lsr	r3, r3, #16
 637 002a FB60     		str	r3, [r7, #12]
 638 002c 01E0     		b	.L42
 639              	.L41:
 515:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_RESULT_MASK;
 516:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 517:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     else
 518:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 519:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED)
 520:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             result = ADC_SAR_Seq_1_SAR_INJ_RESULT_REG & ADC_SAR_Seq_1_RESULT_MASK;
 521:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #else
 522:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             result = 0u;
 640              		.loc 1 522 0
 641 002e 0023     		mov	r3, #0
 642 0030 FB60     		str	r3, [r7, #12]
 643              	.L42:
 523:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED */
 524:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 525:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 526:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     return ( (int16)result );
 644              		.loc 1 526 0
 645 0032 FB68     		ldr	r3, [r7, #12]
 646 0034 9BB2     		uxth	r3, r3
 647 0036 1BB2     		sxth	r3, r3
 527:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 648              		.loc 1 527 0
 649 0038 181C     		mov	r0, r3
 650 003a BD46     		mov	sp, r7
 651 003c 04B0     		add	sp, sp, #16
 652              		@ sp needed
 653 003e 80BD     		pop	{r7, pc}
 654              	.L45:
 655              		.align	2
 656              	.L44:
 657 0040 80011A40 		.word	1075446144
 658              		.cfi_endproc
 659              	.LFE7:
ARM GAS  C:\Users\PC69\AppData\Local\Temp\ccZV2CAg.s 			page 22


 660              		.size	ADC_SAR_Seq_1_GetResult16, .-ADC_SAR_Seq_1_GetResult16
 661              		.section	.text.ADC_SAR_Seq_1_SetChanMask,"ax",%progbits
 662              		.align	2
 663              		.global	ADC_SAR_Seq_1_SetChanMask
 664              		.code	16
 665              		.thumb_func
 666              		.type	ADC_SAR_Seq_1_SetChanMask, %function
 667              	ADC_SAR_Seq_1_SetChanMask:
 668              	.LFB8:
 528:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 529:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 530:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 531:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_SetChanMask
 532:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 533:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 534:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 535:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Sets the channel enable mask.
 536:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 537:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 538:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  mask: Sets which channels that will be
 539:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  scanned. Setting bits for channels that do not exist will have no
 540:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  effect. For example, if only 6 channels were enabled, setting a
 541:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  mask of 0x0103 would only enable the last two channels (0 and 1).
 542:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  This API will not enable the injection channel.
 543:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Examples: If the component is setup to sequence through 8
 544:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  channels, a mask of 0x000F would enable channels 0, 1, 2, and 3.
 545:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 546:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 547:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 548:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 549:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 550:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_SetChanMask(uint32 mask)
 551:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 669              		.loc 1 551 0
 670              		.cfi_startproc
 671 0000 80B5     		push	{r7, lr}
 672              		.cfi_def_cfa_offset 8
 673              		.cfi_offset 7, -8
 674              		.cfi_offset 14, -4
 675 0002 82B0     		sub	sp, sp, #8
 676              		.cfi_def_cfa_offset 16
 677 0004 00AF     		add	r7, sp, #0
 678              		.cfi_def_cfa_register 7
 679 0006 7860     		str	r0, [r7, #4]
 552:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_CHAN_EN_REG = mask & ADC_SAR_Seq_1_MAX_CHANNELS_EN_MASK;
 680              		.loc 1 552 0
 681 0008 034B     		ldr	r3, .L47
 682 000a 7A68     		ldr	r2, [r7, #4]
 683 000c FF21     		mov	r1, #255
 684 000e 0A40     		and	r2, r1
 685 0010 1A60     		str	r2, [r3]
 553:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 686              		.loc 1 553 0
 687 0012 BD46     		mov	sp, r7
 688 0014 02B0     		add	sp, sp, #8
 689              		@ sp needed
 690 0016 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\PC69\AppData\Local\Temp\ccZV2CAg.s 			page 23


 691              	.L48:
 692              		.align	2
 693              	.L47:
 694 0018 20001A40 		.word	1075445792
 695              		.cfi_endproc
 696              	.LFE8:
 697              		.size	ADC_SAR_Seq_1_SetChanMask, .-ADC_SAR_Seq_1_SetChanMask
 698              		.section	.text.ADC_SAR_Seq_1_SetLowLimit,"ax",%progbits
 699              		.align	2
 700              		.global	ADC_SAR_Seq_1_SetLowLimit
 701              		.code	16
 702              		.thumb_func
 703              		.type	ADC_SAR_Seq_1_SetLowLimit, %function
 704              	ADC_SAR_Seq_1_SetLowLimit:
 705              	.LFB9:
 554:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 555:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** #if(ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED)
 556:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 557:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 558:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /*******************************************************************************
 559:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Function Name: ADC_SAR_Seq_1_EnableInjection
 560:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ********************************************************************************
 561:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 562:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Summary:
 563:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  Enables the injection channel for the next scan only.
 564:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 565:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Parameters:
 566:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  None.
 567:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 568:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Return:
 569:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  None.
 570:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 571:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *******************************************************************************/
 572:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     void ADC_SAR_Seq_1_EnableInjection(void)
 573:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 574:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_SAR_INJ_CHAN_CONFIG_REG |= ADC_SAR_Seq_1_INJ_CHAN_EN;
 575:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 576:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 577:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** #endif /* ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED */
 578:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 579:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 580:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 581:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_SetLowLimit
 582:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 583:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 584:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 585:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Sets the low limit parameter for a limit condition.
 586:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 587:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 588:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  lowLimit: The low limit for a limit condition.
 589:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 590:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 591:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 592:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 593:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 594:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_SetLowLimit(uint32 lowLimit)
 595:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
ARM GAS  C:\Users\PC69\AppData\Local\Temp\ccZV2CAg.s 			page 24


 706              		.loc 1 595 0
 707              		.cfi_startproc
 708 0000 80B5     		push	{r7, lr}
 709              		.cfi_def_cfa_offset 8
 710              		.cfi_offset 7, -8
 711              		.cfi_offset 14, -4
 712 0002 82B0     		sub	sp, sp, #8
 713              		.cfi_def_cfa_offset 16
 714 0004 00AF     		add	r7, sp, #0
 715              		.cfi_def_cfa_register 7
 716 0006 7860     		str	r0, [r7, #4]
 596:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_THRES_REG &= (uint32)(~ADC_SAR_Seq_1_RANGE_LOW_MASK);
 717              		.loc 1 596 0
 718 0008 084B     		ldr	r3, .L50
 719 000a 084A     		ldr	r2, .L50
 720 000c 1268     		ldr	r2, [r2]
 721 000e 120C     		lsr	r2, r2, #16
 722 0010 1204     		lsl	r2, r2, #16
 723 0012 1A60     		str	r2, [r3]
 597:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_THRES_REG |= lowLimit & ADC_SAR_Seq_1_RANGE_LOW_MASK;
 724              		.loc 1 597 0
 725 0014 054B     		ldr	r3, .L50
 726 0016 054A     		ldr	r2, .L50
 727 0018 1168     		ldr	r1, [r2]
 728 001a 7A68     		ldr	r2, [r7, #4]
 729 001c 1204     		lsl	r2, r2, #16
 730 001e 120C     		lsr	r2, r2, #16
 731 0020 0A43     		orr	r2, r1
 732 0022 1A60     		str	r2, [r3]
 598:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 733              		.loc 1 598 0
 734 0024 BD46     		mov	sp, r7
 735 0026 02B0     		add	sp, sp, #8
 736              		@ sp needed
 737 0028 80BD     		pop	{r7, pc}
 738              	.L51:
 739 002a C046     		.align	2
 740              	.L50:
 741 002c 18001A40 		.word	1075445784
 742              		.cfi_endproc
 743              	.LFE9:
 744              		.size	ADC_SAR_Seq_1_SetLowLimit, .-ADC_SAR_Seq_1_SetLowLimit
 745              		.section	.text.ADC_SAR_Seq_1_SetHighLimit,"ax",%progbits
 746              		.align	2
 747              		.global	ADC_SAR_Seq_1_SetHighLimit
 748              		.code	16
 749              		.thumb_func
 750              		.type	ADC_SAR_Seq_1_SetHighLimit, %function
 751              	ADC_SAR_Seq_1_SetHighLimit:
 752              	.LFB10:
 599:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 600:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 601:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 602:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_SetHighLimit
 603:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 604:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 605:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
ARM GAS  C:\Users\PC69\AppData\Local\Temp\ccZV2CAg.s 			page 25


 606:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Sets the low limit parameter for a limit condition.
 607:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 608:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 609:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  highLimit: The high limit for a limit condition.
 610:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 611:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 612:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 613:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 614:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 615:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_SetHighLimit(uint32 highLimit)
 616:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 753              		.loc 1 616 0
 754              		.cfi_startproc
 755 0000 80B5     		push	{r7, lr}
 756              		.cfi_def_cfa_offset 8
 757              		.cfi_offset 7, -8
 758              		.cfi_offset 14, -4
 759 0002 82B0     		sub	sp, sp, #8
 760              		.cfi_def_cfa_offset 16
 761 0004 00AF     		add	r7, sp, #0
 762              		.cfi_def_cfa_register 7
 763 0006 7860     		str	r0, [r7, #4]
 617:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_THRES_REG &= (uint32)(~ADC_SAR_Seq_1_RANGE_HIGH_MASK);
 764              		.loc 1 617 0
 765 0008 074B     		ldr	r3, .L53
 766 000a 074A     		ldr	r2, .L53
 767 000c 1268     		ldr	r2, [r2]
 768 000e 1204     		lsl	r2, r2, #16
 769 0010 120C     		lsr	r2, r2, #16
 770 0012 1A60     		str	r2, [r3]
 618:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_THRES_REG |= (uint32)(highLimit << ADC_SAR_Seq_1_RANGE_HIGH_OFFSET);
 771              		.loc 1 618 0
 772 0014 044B     		ldr	r3, .L53
 773 0016 044A     		ldr	r2, .L53
 774 0018 1168     		ldr	r1, [r2]
 775 001a 7A68     		ldr	r2, [r7, #4]
 776 001c 1204     		lsl	r2, r2, #16
 777 001e 0A43     		orr	r2, r1
 778 0020 1A60     		str	r2, [r3]
 619:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 779              		.loc 1 619 0
 780 0022 BD46     		mov	sp, r7
 781 0024 02B0     		add	sp, sp, #8
 782              		@ sp needed
 783 0026 80BD     		pop	{r7, pc}
 784              	.L54:
 785              		.align	2
 786              	.L53:
 787 0028 18001A40 		.word	1075445784
 788              		.cfi_endproc
 789              	.LFE10:
 790              		.size	ADC_SAR_Seq_1_SetHighLimit, .-ADC_SAR_Seq_1_SetHighLimit
 791              		.section	.text.ADC_SAR_Seq_1_SetLimitMask,"ax",%progbits
 792              		.align	2
 793              		.global	ADC_SAR_Seq_1_SetLimitMask
 794              		.code	16
 795              		.thumb_func
ARM GAS  C:\Users\PC69\AppData\Local\Temp\ccZV2CAg.s 			page 26


 796              		.type	ADC_SAR_Seq_1_SetLimitMask, %function
 797              	ADC_SAR_Seq_1_SetLimitMask:
 798              	.LFB11:
 620:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 621:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 622:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 623:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_SetLimitMask
 624:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 625:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 626:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 627:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Sets the channel limit condition mask.
 628:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 629:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 630:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  mask: Sets which channels that may cause a
 631:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  limit condition interrupt. Setting bits for channels that do not exist
 632:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  will have no effect. For example, if only 6 channels were enabled,
 633:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  setting a mask of 0x0103 would only enable the last two channels (0 and 1).
 634:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 635:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 636:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 637:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 638:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 639:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_SetLimitMask(uint32 mask)
 640:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 799              		.loc 1 640 0
 800              		.cfi_startproc
 801 0000 80B5     		push	{r7, lr}
 802              		.cfi_def_cfa_offset 8
 803              		.cfi_offset 7, -8
 804              		.cfi_offset 14, -4
 805 0002 82B0     		sub	sp, sp, #8
 806              		.cfi_def_cfa_offset 16
 807 0004 00AF     		add	r7, sp, #0
 808              		.cfi_def_cfa_register 7
 809 0006 7860     		str	r0, [r7, #4]
 641:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_INTR_MASK_REG = mask & ADC_SAR_Seq_1_MAX_CHANNELS_EN_MASK;
 810              		.loc 1 641 0
 811 0008 034B     		ldr	r3, .L56
 812 000a 7A68     		ldr	r2, [r7, #4]
 813 000c FF21     		mov	r1, #255
 814 000e 0A40     		and	r2, r1
 815 0010 1A60     		str	r2, [r3]
 642:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 816              		.loc 1 642 0
 817 0012 BD46     		mov	sp, r7
 818 0014 02B0     		add	sp, sp, #8
 819              		@ sp needed
 820 0016 80BD     		pop	{r7, pc}
 821              	.L57:
 822              		.align	2
 823              	.L56:
 824 0018 38021A40 		.word	1075446328
 825              		.cfi_endproc
 826              	.LFE11:
 827              		.size	ADC_SAR_Seq_1_SetLimitMask, .-ADC_SAR_Seq_1_SetLimitMask
 828              		.section	.text.ADC_SAR_Seq_1_SetSatMask,"ax",%progbits
 829              		.align	2
ARM GAS  C:\Users\PC69\AppData\Local\Temp\ccZV2CAg.s 			page 27


 830              		.global	ADC_SAR_Seq_1_SetSatMask
 831              		.code	16
 832              		.thumb_func
 833              		.type	ADC_SAR_Seq_1_SetSatMask, %function
 834              	ADC_SAR_Seq_1_SetSatMask:
 835              	.LFB12:
 643:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 644:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 645:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 646:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_SetSatMask
 647:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 648:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 649:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 650:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Sets the channel saturation event mask.
 651:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 652:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 653:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  mask: Sets which channels that may cause a
 654:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  saturation event interrupt. Setting bits for channels that do not exist
 655:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  will have no effect. For example, if only 8 channels were enabled,
 656:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  setting a mask of 0x01C0 would only enable two channels (6 and 7).
 657:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 658:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 659:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 660:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 661:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 662:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_SetSatMask(uint32 mask)
 663:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 836              		.loc 1 663 0
 837              		.cfi_startproc
 838 0000 80B5     		push	{r7, lr}
 839              		.cfi_def_cfa_offset 8
 840              		.cfi_offset 7, -8
 841              		.cfi_offset 14, -4
 842 0002 82B0     		sub	sp, sp, #8
 843              		.cfi_def_cfa_offset 16
 844 0004 00AF     		add	r7, sp, #0
 845              		.cfi_def_cfa_register 7
 846 0006 7860     		str	r0, [r7, #4]
 664:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_SATURATE_INTR_MASK_REG = mask & ADC_SAR_Seq_1_MAX_CHANNELS_EN_MASK;
 847              		.loc 1 664 0
 848 0008 034B     		ldr	r3, .L59
 849 000a 7A68     		ldr	r2, [r7, #4]
 850 000c FF21     		mov	r1, #255
 851 000e 0A40     		and	r2, r1
 852 0010 1A60     		str	r2, [r3]
 665:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 853              		.loc 1 665 0
 854 0012 BD46     		mov	sp, r7
 855 0014 02B0     		add	sp, sp, #8
 856              		@ sp needed
 857 0016 80BD     		pop	{r7, pc}
 858              	.L60:
 859              		.align	2
 860              	.L59:
 861 0018 28021A40 		.word	1075446312
 862              		.cfi_endproc
 863              	.LFE12:
ARM GAS  C:\Users\PC69\AppData\Local\Temp\ccZV2CAg.s 			page 28


 864              		.size	ADC_SAR_Seq_1_SetSatMask, .-ADC_SAR_Seq_1_SetSatMask
 865              		.section	.text.ADC_SAR_Seq_1_SetOffset,"ax",%progbits
 866              		.align	2
 867              		.global	ADC_SAR_Seq_1_SetOffset
 868              		.code	16
 869              		.thumb_func
 870              		.type	ADC_SAR_Seq_1_SetOffset, %function
 871              	ADC_SAR_Seq_1_SetOffset:
 872              	.LFB13:
 666:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 667:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 668:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 669:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_SetOffset
 670:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 671:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 672:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 673:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *   Description: Sets the ADC offset which is used by the functions
 674:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *   ADC_CountsTo_uVolts, ADC_CountsTo_mVolts and ADC_CountsTo_Volts
 675:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *   to substract the offset from the given reading
 676:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *   before calculating the voltage conversion.
 677:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 678:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 679:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  chan: ADC channel number.
 680:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  offset: This value is a measured value when the
 681:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *          inputs are shorted or connected to the same input voltage.
 682:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 683:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 684:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 685:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 686:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Global variables:
 687:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_SAR_Seq_1_Offset:  Modified to set the user provided offset.
 688:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 689:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 690:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_SetOffset(uint32 chan, int16 offset)
 691:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 873              		.loc 1 691 0
 874              		.cfi_startproc
 875 0000 80B5     		push	{r7, lr}
 876              		.cfi_def_cfa_offset 8
 877              		.cfi_offset 7, -8
 878              		.cfi_offset 14, -4
 879 0002 82B0     		sub	sp, sp, #8
 880              		.cfi_def_cfa_offset 16
 881 0004 00AF     		add	r7, sp, #0
 882              		.cfi_def_cfa_register 7
 883 0006 7860     		str	r0, [r7, #4]
 884 0008 0A1C     		mov	r2, r1
 885 000a BB1C     		add	r3, r7, #2
 886 000c 1A80     		strh	r2, [r3]
 692:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 693:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     CYASSERT(chan < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM);
 887              		.loc 1 693 0
 888 000e 7B68     		ldr	r3, [r7, #4]
 889 0010 072B     		cmp	r3, #7
 890 0012 02D9     		bls	.L62
 891              		.loc 1 693 0 is_stmt 0 discriminator 1
 892 0014 0020     		mov	r0, #0
ARM GAS  C:\Users\PC69\AppData\Local\Temp\ccZV2CAg.s 			page 29


 893 0016 FFF7FEFF 		bl	CyHalt
 894              	.L62:
 694:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 695:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_offset[chan] = offset;
 895              		.loc 1 695 0 is_stmt 1
 896 001a 044B     		ldr	r3, .L63
 897 001c 7A68     		ldr	r2, [r7, #4]
 898 001e 5200     		lsl	r2, r2, #1
 899 0020 B91C     		add	r1, r7, #2
 900 0022 0988     		ldrh	r1, [r1]
 901 0024 D152     		strh	r1, [r2, r3]
 696:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 902              		.loc 1 696 0
 903 0026 BD46     		mov	sp, r7
 904 0028 02B0     		add	sp, sp, #8
 905              		@ sp needed
 906 002a 80BD     		pop	{r7, pc}
 907              	.L64:
 908              		.align	2
 909              	.L63:
 910 002c 00000000 		.word	ADC_SAR_Seq_1_offset
 911              		.cfi_endproc
 912              	.LFE13:
 913              		.size	ADC_SAR_Seq_1_SetOffset, .-ADC_SAR_Seq_1_SetOffset
 914              		.section	.text.ADC_SAR_Seq_1_SetGain,"ax",%progbits
 915              		.align	2
 916              		.global	ADC_SAR_Seq_1_SetGain
 917              		.code	16
 918              		.thumb_func
 919              		.type	ADC_SAR_Seq_1_SetGain, %function
 920              	ADC_SAR_Seq_1_SetGain:
 921              	.LFB14:
 697:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 698:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 699:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 700:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_SetGain
 701:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 702:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 703:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 704:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Description: Sets the ADC gain in counts per 10 volt for the voltage
 705:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  conversion functions below. This value is set by default by the
 706:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  reference and input range settings. It should only be used to further
 707:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  calibrate the ADC with a known input or if an external reference is
 708:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  used. Affects the ADC_CountsTo_uVolts, ADC_CountsTo_mVolts
 709:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  and ADC_CountsTo_Volts functions by supplying the correct
 710:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  conversion between ADC counts and voltage.
 711:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 712:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 713:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  chan: ADC channel number.
 714:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  adcGain: ADC gain in counts per 10 volts.
 715:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 716:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 717:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 718:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 719:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Global variables:
 720:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_SAR_Seq_1_CountsPer10Volt:  modified to set the ADC gain in counts
 721:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *   per 10 volt.
ARM GAS  C:\Users\PC69\AppData\Local\Temp\ccZV2CAg.s 			page 30


 722:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 723:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 724:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_SetGain(uint32 chan, int32 adcGain)
 725:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 922              		.loc 1 725 0
 923              		.cfi_startproc
 924 0000 80B5     		push	{r7, lr}
 925              		.cfi_def_cfa_offset 8
 926              		.cfi_offset 7, -8
 927              		.cfi_offset 14, -4
 928 0002 82B0     		sub	sp, sp, #8
 929              		.cfi_def_cfa_offset 16
 930 0004 00AF     		add	r7, sp, #0
 931              		.cfi_def_cfa_register 7
 932 0006 7860     		str	r0, [r7, #4]
 933 0008 3960     		str	r1, [r7]
 726:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 727:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     CYASSERT(chan < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM);
 934              		.loc 1 727 0
 935 000a 7B68     		ldr	r3, [r7, #4]
 936 000c 072B     		cmp	r3, #7
 937 000e 02D9     		bls	.L66
 938              		.loc 1 727 0 is_stmt 0 discriminator 1
 939 0010 0020     		mov	r0, #0
 940 0012 FFF7FEFF 		bl	CyHalt
 941              	.L66:
 728:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 729:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_countsPer10Volt[chan] = adcGain;
 942              		.loc 1 729 0 is_stmt 1
 943 0016 044B     		ldr	r3, .L67
 944 0018 7A68     		ldr	r2, [r7, #4]
 945 001a 9200     		lsl	r2, r2, #2
 946 001c 3968     		ldr	r1, [r7]
 947 001e D150     		str	r1, [r2, r3]
 730:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 948              		.loc 1 730 0
 949 0020 BD46     		mov	sp, r7
 950 0022 02B0     		add	sp, sp, #8
 951              		@ sp needed
 952 0024 80BD     		pop	{r7, pc}
 953              	.L68:
 954 0026 C046     		.align	2
 955              	.L67:
 956 0028 00000000 		.word	ADC_SAR_Seq_1_countsPer10Volt
 957              		.cfi_endproc
 958              	.LFE14:
 959              		.size	ADC_SAR_Seq_1_SetGain, .-ADC_SAR_Seq_1_SetGain
 960              		.global	__aeabi_idiv
 961              		.section	.text.ADC_SAR_Seq_1_CountsTo_mVolts,"ax",%progbits
 962              		.align	2
 963              		.global	ADC_SAR_Seq_1_CountsTo_mVolts
 964              		.code	16
 965              		.thumb_func
 966              		.type	ADC_SAR_Seq_1_CountsTo_mVolts, %function
 967              	ADC_SAR_Seq_1_CountsTo_mVolts:
 968              	.LFB15:
 731:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
ARM GAS  C:\Users\PC69\AppData\Local\Temp\ccZV2CAg.s 			page 31


 732:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 733:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** #if(ADC_SAR_Seq_1_DEFAULT_JUSTIFICATION_SEL == ADC_SAR_Seq_1__RIGHT)
 734:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 735:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 736:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /*******************************************************************************
 737:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Function Name: ADC_SAR_Seq_1_CountsTo_mVolts
 738:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ********************************************************************************
 739:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 740:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Summary:
 741:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  This function converts ADC counts to mVolts
 742:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  This function is not available when left data format justification selected.
 743:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 744:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Parameters:
 745:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  chan: The ADC channel number.
 746:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  adcCounts: Result from the ADC conversion
 747:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 748:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Return:
 749:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  Results in mVolts
 750:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 751:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Global variables:
 752:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  ADC_SAR_Seq_1_countsPer10Volt:  used to convert ADC counts to mVolts.
 753:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  ADC_SAR_Seq_1_Offset:  Used as the offset while converting ADC counts
 754:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *   to mVolts.
 755:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 756:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *******************************************************************************/
 757:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     int16 ADC_SAR_Seq_1_CountsTo_mVolts(uint32 chan, int16 adcCounts)
 758:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 969              		.loc 1 758 0
 970              		.cfi_startproc
 971 0000 80B5     		push	{r7, lr}
 972              		.cfi_def_cfa_offset 8
 973              		.cfi_offset 7, -8
 974              		.cfi_offset 14, -4
 975 0002 84B0     		sub	sp, sp, #16
 976              		.cfi_def_cfa_offset 24
 977 0004 00AF     		add	r7, sp, #0
 978              		.cfi_def_cfa_register 7
 979 0006 7860     		str	r0, [r7, #4]
 980 0008 0A1C     		mov	r2, r1
 981 000a BB1C     		add	r3, r7, #2
 982 000c 1A80     		strh	r2, [r3]
 759:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         int16 mVolts;
 760:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 761:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 762:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         CYASSERT(chan < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM);
 983              		.loc 1 762 0
 984 000e 7B68     		ldr	r3, [r7, #4]
 985 0010 072B     		cmp	r3, #7
 986 0012 02D9     		bls	.L70
 987              		.loc 1 762 0 is_stmt 0 discriminator 1
 988 0014 0020     		mov	r0, #0
 989 0016 FFF7FEFF 		bl	CyHalt
 990              	.L70:
 763:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 764:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 765:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_DEFAULT_AVG_MODE == ADC_SAR_Seq_1__ACCUMULATE)
 766:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             if((ADC_SAR_Seq_1_channelsConfig[chan] & ADC_SAR_Seq_1_AVERAGING_EN) != 0u)
ARM GAS  C:\Users\PC69\AppData\Local\Temp\ccZV2CAg.s 			page 32


 767:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 768:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 adcCounts /= ADC_SAR_Seq_1_DEFAULT_AVG_SAMPLES_DIV;
 769:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 770:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_DEFAULT_AVG_MODE == ADC_SAR_Seq_1__ACCUMULATE */
 771:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 772:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Subtract ADC offset */
 773:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         adcCounts -= ADC_SAR_Seq_1_offset[chan];
 991              		.loc 1 773 0 is_stmt 1
 992 001a 1F4B     		ldr	r3, .L76
 993 001c 7A68     		ldr	r2, [r7, #4]
 994 001e 5200     		lsl	r2, r2, #1
 995 0020 D35A     		ldrh	r3, [r2, r3]
 996 0022 99B2     		uxth	r1, r3
 997 0024 BB1C     		add	r3, r7, #2
 998 0026 1A88     		ldrh	r2, [r3]
 999 0028 8BB2     		uxth	r3, r1
 1000 002a D31A     		sub	r3, r2, r3
 1001 002c 9AB2     		uxth	r2, r3
 1002 002e BB1C     		add	r3, r7, #2
 1003 0030 1A80     		strh	r2, [r3]
 774:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 775:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         mVolts = (int16)((((int32)adcCounts * ADC_SAR_Seq_1_10MV_COUNTS) + ( (adcCounts > 0) ?
 1004              		.loc 1 775 0
 1005 0032 BB1C     		add	r3, r7, #2
 1006 0034 0022     		mov	r2, #0
 1007 0036 9B5E     		ldrsh	r3, [r3, r2]
 1008 0038 184A     		ldr	r2, .L76+4
 1009 003a 5A43     		mul	r2, r3
 776:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (ADC_SAR_Seq_1_countsPer10Volt[chan] / 2) : (-(ADC_SAR_Seq_1_countsPer10Volt[chan]
 1010              		.loc 1 776 0
 1011 003c BB1C     		add	r3, r7, #2
 1012 003e 0021     		mov	r1, #0
 1013 0040 5B5E     		ldrsh	r3, [r3, r1]
 1014 0042 002B     		cmp	r3, #0
 1015 0044 08DD     		ble	.L71
 1016              		.loc 1 776 0 is_stmt 0 discriminator 1
 1017 0046 164B     		ldr	r3, .L76+8
 1018 0048 7968     		ldr	r1, [r7, #4]
 1019 004a 8900     		lsl	r1, r1, #2
 1020 004c CB58     		ldr	r3, [r1, r3]
 1021 004e 002B     		cmp	r3, #0
 1022 0050 00DA     		bge	.L72
 1023 0052 0133     		add	r3, r3, #1
 1024              	.L72:
 1025 0054 5B10     		asr	r3, r3, #1
 1026 0056 08E0     		b	.L73
 1027              	.L71:
 1028              		.loc 1 776 0 discriminator 2
 1029 0058 114B     		ldr	r3, .L76+8
 1030 005a 7968     		ldr	r1, [r7, #4]
 1031 005c 8900     		lsl	r1, r1, #2
 1032 005e CB58     		ldr	r3, [r1, r3]
 1033 0060 002B     		cmp	r3, #0
 1034 0062 00DA     		bge	.L74
 1035 0064 0133     		add	r3, r3, #1
 1036              	.L74:
 1037 0066 5B10     		asr	r3, r3, #1
ARM GAS  C:\Users\PC69\AppData\Local\Temp\ccZV2CAg.s 			page 33


 1038 0068 5B42     		neg	r3, r3
 1039              	.L73:
 775:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (ADC_SAR_Seq_1_countsPer10Volt[chan] / 2) : (-(ADC_SAR_Seq_1_countsPer10Volt[chan]
 1040              		.loc 1 775 0 is_stmt 1
 1041 006a D118     		add	r1, r2, r3
 777:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  / ADC_SAR_Seq_1_countsPer10Volt[chan]);
 1042              		.loc 1 777 0
 1043 006c 0C4B     		ldr	r3, .L76+8
 1044 006e 7A68     		ldr	r2, [r7, #4]
 1045 0070 9200     		lsl	r2, r2, #2
 1046 0072 D358     		ldr	r3, [r2, r3]
 1047 0074 081C     		mov	r0, r1
 1048 0076 191C     		mov	r1, r3
 1049 0078 FFF7FEFF 		bl	__aeabi_idiv
 1050 007c 031C     		mov	r3, r0
 1051 007e 1A1C     		mov	r2, r3
 775:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (ADC_SAR_Seq_1_countsPer10Volt[chan] / 2) : (-(ADC_SAR_Seq_1_countsPer10Volt[chan]
 1052              		.loc 1 775 0
 1053 0080 0E23     		mov	r3, #14
 1054 0082 FB18     		add	r3, r7, r3
 1055 0084 1A80     		strh	r2, [r3]
 778:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 779:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         return( mVolts );
 1056              		.loc 1 779 0
 1057 0086 0E23     		mov	r3, #14
 1058 0088 FB18     		add	r3, r7, r3
 1059 008a 1B88     		ldrh	r3, [r3]
 1060 008c 1BB2     		sxth	r3, r3
 780:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 1061              		.loc 1 780 0
 1062 008e 181C     		mov	r0, r3
 1063 0090 BD46     		mov	sp, r7
 1064 0092 04B0     		add	sp, sp, #16
 1065              		@ sp needed
 1066 0094 80BD     		pop	{r7, pc}
 1067              	.L77:
 1068 0096 C046     		.align	2
 1069              	.L76:
 1070 0098 00000000 		.word	ADC_SAR_Seq_1_offset
 1071 009c 10270000 		.word	10000
 1072 00a0 00000000 		.word	ADC_SAR_Seq_1_countsPer10Volt
 1073              		.cfi_endproc
 1074              	.LFE15:
 1075              		.size	ADC_SAR_Seq_1_CountsTo_mVolts, .-ADC_SAR_Seq_1_CountsTo_mVolts
 1076              		.global	__aeabi_lmul
 1077              		.global	__aeabi_ldivmod
 1078              		.section	.text.ADC_SAR_Seq_1_CountsTo_uVolts,"ax",%progbits
 1079              		.align	2
 1080              		.global	ADC_SAR_Seq_1_CountsTo_uVolts
 1081              		.code	16
 1082              		.thumb_func
 1083              		.type	ADC_SAR_Seq_1_CountsTo_uVolts, %function
 1084              	ADC_SAR_Seq_1_CountsTo_uVolts:
 1085              	.LFB16:
 781:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 782:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 783:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /*******************************************************************************
ARM GAS  C:\Users\PC69\AppData\Local\Temp\ccZV2CAg.s 			page 34


 784:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Function Name: ADC_SAR_Seq_1_CountsTo_uVolts
 785:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ********************************************************************************
 786:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 787:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Summary:
 788:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  This function converts ADC counts to micro Volts
 789:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  This function is not available when left data format justification selected.
 790:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 791:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Parameters:
 792:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  chan: The ADC channel number.
 793:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  adcCounts: Result from the ADC conversion
 794:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 795:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Return:
 796:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  Results in uVolts
 797:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 798:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Global variables:
 799:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  ADC_SAR_Seq_1_countsPer10Volt:  used to convert ADC counts to uVolts.
 800:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  ADC_SAR_Seq_1_Offset:  Used as the offset while converting ADC counts
 801:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *   to mVolts.
 802:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 803:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Theory:
 804:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  Care must be taken to not exceed the maximum value for a 31 bit signed
 805:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  number in the conversion to uVolts and at the same time not loose
 806:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  resolution.
 807:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  To convert adcCounts to microVolts it is required to be multiplied
 808:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  on 10 million and later divide on gain in counts per 10V.
 809:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 810:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *******************************************************************************/
 811:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     int32 ADC_SAR_Seq_1_CountsTo_uVolts(uint32 chan, int16 adcCounts)
 812:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 1086              		.loc 1 812 0
 1087              		.cfi_startproc
 1088 0000 B0B5     		push	{r4, r5, r7, lr}
 1089              		.cfi_def_cfa_offset 16
 1090              		.cfi_offset 4, -16
 1091              		.cfi_offset 5, -12
 1092              		.cfi_offset 7, -8
 1093              		.cfi_offset 14, -4
 1094 0002 86B0     		sub	sp, sp, #24
 1095              		.cfi_def_cfa_offset 40
 1096 0004 00AF     		add	r7, sp, #0
 1097              		.cfi_def_cfa_register 7
 1098 0006 F860     		str	r0, [r7, #12]
 1099 0008 0A1C     		mov	r2, r1
 1100 000a 0A23     		mov	r3, #10
 1101 000c FB18     		add	r3, r7, r3
 1102 000e 1A80     		strh	r2, [r3]
 813:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         int64 uVolts;
 814:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 815:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 816:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         CYASSERT(chan < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM);
 1103              		.loc 1 816 0
 1104 0010 FB68     		ldr	r3, [r7, #12]
 1105 0012 072B     		cmp	r3, #7
 1106 0014 02D9     		bls	.L79
 1107              		.loc 1 816 0 is_stmt 0 discriminator 1
 1108 0016 0020     		mov	r0, #0
 1109 0018 FFF7FEFF 		bl	CyHalt
ARM GAS  C:\Users\PC69\AppData\Local\Temp\ccZV2CAg.s 			page 35


 1110              	.L79:
 817:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 818:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 819:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_DEFAULT_AVG_MODE == ADC_SAR_Seq_1__ACCUMULATE)
 820:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             if((ADC_SAR_Seq_1_channelsConfig[chan] & ADC_SAR_Seq_1_AVERAGING_EN) != 0u)
 821:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 822:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 adcCounts /= ADC_SAR_Seq_1_DEFAULT_AVG_SAMPLES_DIV;
 823:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 824:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_DEFAULT_AVG_MODE == ADC_SAR_Seq_1__ACCUMULATE */
 825:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 826:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Subtract ADC offset */
 827:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         adcCounts -= ADC_SAR_Seq_1_offset[chan];
 1111              		.loc 1 827 0 is_stmt 1
 1112 001c 194B     		ldr	r3, .L81
 1113 001e FA68     		ldr	r2, [r7, #12]
 1114 0020 5200     		lsl	r2, r2, #1
 1115 0022 D35A     		ldrh	r3, [r2, r3]
 1116 0024 99B2     		uxth	r1, r3
 1117 0026 0A23     		mov	r3, #10
 1118 0028 FB18     		add	r3, r7, r3
 1119 002a 1A88     		ldrh	r2, [r3]
 1120 002c 8BB2     		uxth	r3, r1
 1121 002e D31A     		sub	r3, r2, r3
 1122 0030 9AB2     		uxth	r2, r3
 1123 0032 0A23     		mov	r3, #10
 1124 0034 FB18     		add	r3, r7, r3
 1125 0036 1A80     		strh	r2, [r3]
 828:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 829:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         uVolts = ((int64)adcCounts * ADC_SAR_Seq_1_10UV_COUNTS) / ADC_SAR_Seq_1_countsPer10Volt[cha
 1126              		.loc 1 829 0
 1127 0038 0A23     		mov	r3, #10
 1128 003a FB18     		add	r3, r7, r3
 1129 003c 1B88     		ldrh	r3, [r3]
 1130 003e 1BB2     		sxth	r3, r3
 1131 0040 3B60     		str	r3, [r7]
 1132 0042 DB17     		asr	r3, r3, #31
 1133 0044 7B60     		str	r3, [r7, #4]
 1134 0046 3868     		ldr	r0, [r7]
 1135 0048 7968     		ldr	r1, [r7, #4]
 1136 004a 0F4A     		ldr	r2, .L81+4
 1137 004c 0023     		mov	r3, #0
 1138 004e FFF7FEFF 		bl	__aeabi_lmul
 1139 0052 021C     		mov	r2, r0
 1140 0054 0B1C     		mov	r3, r1
 1141 0056 101C     		mov	r0, r2
 1142 0058 191C     		mov	r1, r3
 1143 005a 0C4B     		ldr	r3, .L81+8
 1144 005c FA68     		ldr	r2, [r7, #12]
 1145 005e 9200     		lsl	r2, r2, #2
 1146 0060 D358     		ldr	r3, [r2, r3]
 1147 0062 1C1C     		mov	r4, r3
 1148 0064 DB17     		asr	r3, r3, #31
 1149 0066 1D1C     		mov	r5, r3
 1150 0068 221C     		mov	r2, r4
 1151 006a 2B1C     		mov	r3, r5
 1152 006c FFF7FEFF 		bl	__aeabi_ldivmod
 1153 0070 031C     		mov	r3, r0
ARM GAS  C:\Users\PC69\AppData\Local\Temp\ccZV2CAg.s 			page 36


 1154 0072 0C1C     		mov	r4, r1
 1155 0074 3B61     		str	r3, [r7, #16]
 1156 0076 7C61     		str	r4, [r7, #20]
 830:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 831:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         return( (int32)uVolts );
 1157              		.loc 1 831 0
 1158 0078 3B69     		ldr	r3, [r7, #16]
 832:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 1159              		.loc 1 832 0
 1160 007a 181C     		mov	r0, r3
 1161 007c BD46     		mov	sp, r7
 1162 007e 06B0     		add	sp, sp, #24
 1163              		@ sp needed
 1164 0080 B0BD     		pop	{r4, r5, r7, pc}
 1165              	.L82:
 1166 0082 C046     		.align	2
 1167              	.L81:
 1168 0084 00000000 		.word	ADC_SAR_Seq_1_offset
 1169 0088 80969800 		.word	10000000
 1170 008c 00000000 		.word	ADC_SAR_Seq_1_countsPer10Volt
 1171              		.cfi_endproc
 1172              	.LFE16:
 1173              		.size	ADC_SAR_Seq_1_CountsTo_uVolts, .-ADC_SAR_Seq_1_CountsTo_uVolts
 1174              		.global	__aeabi_i2f
 1175              		.global	__aeabi_fmul
 1176              		.global	__aeabi_fdiv
 1177              		.section	.text.ADC_SAR_Seq_1_CountsTo_Volts,"ax",%progbits
 1178              		.align	2
 1179              		.global	ADC_SAR_Seq_1_CountsTo_Volts
 1180              		.code	16
 1181              		.thumb_func
 1182              		.type	ADC_SAR_Seq_1_CountsTo_Volts, %function
 1183              	ADC_SAR_Seq_1_CountsTo_Volts:
 1184              	.LFB17:
 833:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 834:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 835:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /*******************************************************************************
 836:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Function Name: ADC_SAR_Seq_1_CountsTo_Volts
 837:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ********************************************************************************
 838:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 839:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Summary:
 840:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  Converts the ADC output to Volts as a floating point number.
 841:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  This function is not available when left data format justification selected.
 842:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 843:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Parameters:
 844:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  chan: The ADC channel number.
 845:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  Result from the ADC conversion
 846:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 847:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Return:
 848:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  Results in Volts
 849:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 850:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Global variables:
 851:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  ADC_SAR_Seq_1_countsPer10Volt:  used to convert ADC counts to Volts.
 852:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  ADC_SAR_Seq_1_Offset:  Used as the offset while converting ADC counts
 853:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *   to mVolts.
 854:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 855:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *******************************************************************************/
ARM GAS  C:\Users\PC69\AppData\Local\Temp\ccZV2CAg.s 			page 37


 856:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     float32 ADC_SAR_Seq_1_CountsTo_Volts(uint32 chan, int16 adcCounts)
 857:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 1185              		.loc 1 857 0
 1186              		.cfi_startproc
 1187 0000 90B5     		push	{r4, r7, lr}
 1188              		.cfi_def_cfa_offset 12
 1189              		.cfi_offset 4, -12
 1190              		.cfi_offset 7, -8
 1191              		.cfi_offset 14, -4
 1192 0002 85B0     		sub	sp, sp, #20
 1193              		.cfi_def_cfa_offset 32
 1194 0004 00AF     		add	r7, sp, #0
 1195              		.cfi_def_cfa_register 7
 1196 0006 7860     		str	r0, [r7, #4]
 1197 0008 0A1C     		mov	r2, r1
 1198 000a BB1C     		add	r3, r7, #2
 1199 000c 1A80     		strh	r2, [r3]
 858:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         float32 volts;
 859:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 860:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 861:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         CYASSERT(chan < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM);
 1200              		.loc 1 861 0
 1201 000e 7B68     		ldr	r3, [r7, #4]
 1202 0010 072B     		cmp	r3, #7
 1203 0012 02D9     		bls	.L84
 1204              		.loc 1 861 0 is_stmt 0 discriminator 1
 1205 0014 0020     		mov	r0, #0
 1206 0016 FFF7FEFF 		bl	CyHalt
 1207              	.L84:
 862:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 863:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 864:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_DEFAULT_AVG_MODE == ADC_SAR_Seq_1__ACCUMULATE)
 865:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             if((ADC_SAR_Seq_1_channelsConfig[chan] & ADC_SAR_Seq_1_AVERAGING_EN) != 0u)
 866:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 867:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 adcCounts /= ADC_SAR_Seq_1_DEFAULT_AVG_SAMPLES_DIV;
 868:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 869:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_DEFAULT_AVG_MODE == ADC_SAR_Seq_1__ACCUMULATE */
 870:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 871:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Subtract ADC offset */
 872:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         adcCounts -= ADC_SAR_Seq_1_offset[chan];
 1208              		.loc 1 872 0 is_stmt 1
 1209 001a 164B     		ldr	r3, .L86
 1210 001c 7A68     		ldr	r2, [r7, #4]
 1211 001e 5200     		lsl	r2, r2, #1
 1212 0020 D35A     		ldrh	r3, [r2, r3]
 1213 0022 99B2     		uxth	r1, r3
 1214 0024 BB1C     		add	r3, r7, #2
 1215 0026 1A88     		ldrh	r2, [r3]
 1216 0028 8BB2     		uxth	r3, r1
 1217 002a D31A     		sub	r3, r2, r3
 1218 002c 9AB2     		uxth	r2, r3
 1219 002e BB1C     		add	r3, r7, #2
 1220 0030 1A80     		strh	r2, [r3]
 873:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 874:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         volts = ((float32)adcCounts * ADC_SAR_Seq_1_10V_COUNTS) / (float32)ADC_SAR_Seq_1_countsPer1
 1221              		.loc 1 874 0
 1222 0032 BB1C     		add	r3, r7, #2
ARM GAS  C:\Users\PC69\AppData\Local\Temp\ccZV2CAg.s 			page 38


 1223 0034 0022     		mov	r2, #0
 1224 0036 9B5E     		ldrsh	r3, [r3, r2]
 1225 0038 181C     		mov	r0, r3
 1226 003a FFF7FEFF 		bl	__aeabi_i2f
 1227 003e 031C     		add	r3, r0, #0
 1228 0040 181C     		add	r0, r3, #0
 1229 0042 0D49     		ldr	r1, .L86+4
 1230 0044 FFF7FEFF 		bl	__aeabi_fmul
 1231 0048 031C     		add	r3, r0, #0
 1232 004a 1C1C     		add	r4, r3, #0
 1233 004c 0B4B     		ldr	r3, .L86+8
 1234 004e 7A68     		ldr	r2, [r7, #4]
 1235 0050 9200     		lsl	r2, r2, #2
 1236 0052 D358     		ldr	r3, [r2, r3]
 1237 0054 181C     		mov	r0, r3
 1238 0056 FFF7FEFF 		bl	__aeabi_i2f
 1239 005a 031C     		add	r3, r0, #0
 1240 005c 201C     		add	r0, r4, #0
 1241 005e 191C     		add	r1, r3, #0
 1242 0060 FFF7FEFF 		bl	__aeabi_fdiv
 1243 0064 031C     		add	r3, r0, #0
 1244 0066 FB60     		str	r3, [r7, #12]
 875:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 876:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         return( volts );
 1245              		.loc 1 876 0
 1246 0068 FB68     		ldr	r3, [r7, #12]
 877:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 1247              		.loc 1 877 0
 1248 006a 181C     		add	r0, r3, #0
 1249 006c BD46     		mov	sp, r7
 1250 006e 05B0     		add	sp, sp, #20
 1251              		@ sp needed
 1252 0070 90BD     		pop	{r4, r7, pc}
 1253              	.L87:
 1254 0072 C046     		.align	2
 1255              	.L86:
 1256 0074 00000000 		.word	ADC_SAR_Seq_1_offset
 1257 0078 00002041 		.word	1092616192
 1258 007c 00000000 		.word	ADC_SAR_Seq_1_countsPer10Volt
 1259              		.cfi_endproc
 1260              	.LFE17:
 1261              		.size	ADC_SAR_Seq_1_CountsTo_Volts, .-ADC_SAR_Seq_1_CountsTo_Volts
 1262              		.section	.rodata
 1263              		.align	2
 1264              		.type	ADC_SAR_Seq_1_InputsPlacement.4714, %object
 1265              		.size	ADC_SAR_Seq_1_InputsPlacement.4714, 8
 1266              	ADC_SAR_Seq_1_InputsPlacement.4714:
 1267 0020 00       		.byte	0
 1268 0021 01       		.byte	1
 1269 0022 02       		.byte	2
 1270 0023 03       		.byte	3
 1271 0024 04       		.byte	4
 1272 0025 05       		.byte	5
 1273 0026 06       		.byte	6
 1274 0027 07       		.byte	7
 1275              		.text
 1276              	.Letext0:
ARM GAS  C:\Users\PC69\AppData\Local\Temp\ccZV2CAg.s 			page 39


 1277              		.file 2 ".\\Generated_Source\\PSoC4\\cytypes.h"
 1278              		.section	.debug_info,"",%progbits
 1279              	.Ldebug_info0:
 1280 0000 96040000 		.4byte	0x496
 1281 0004 0400     		.2byte	0x4
 1282 0006 00000000 		.4byte	.Ldebug_abbrev0
 1283 000a 04       		.byte	0x4
 1284 000b 01       		.uleb128 0x1
 1285 000c E5030000 		.4byte	.LASF60
 1286 0010 01       		.byte	0x1
 1287 0011 14020000 		.4byte	.LASF61
 1288 0015 03030000 		.4byte	.LASF62
 1289 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1290 001d 00000000 		.4byte	0
 1291 0021 00000000 		.4byte	.Ldebug_line0
 1292 0025 02       		.uleb128 0x2
 1293 0026 01       		.byte	0x1
 1294 0027 06       		.byte	0x6
 1295 0028 F8000000 		.4byte	.LASF0
 1296 002c 02       		.uleb128 0x2
 1297 002d 01       		.byte	0x1
 1298 002e 08       		.byte	0x8
 1299 002f CE020000 		.4byte	.LASF1
 1300 0033 02       		.uleb128 0x2
 1301 0034 02       		.byte	0x2
 1302 0035 05       		.byte	0x5
 1303 0036 DC020000 		.4byte	.LASF2
 1304 003a 02       		.uleb128 0x2
 1305 003b 02       		.byte	0x2
 1306 003c 07       		.byte	0x7
 1307 003d D7010000 		.4byte	.LASF3
 1308 0041 02       		.uleb128 0x2
 1309 0042 04       		.byte	0x4
 1310 0043 05       		.byte	0x5
 1311 0044 43010000 		.4byte	.LASF4
 1312 0048 02       		.uleb128 0x2
 1313 0049 04       		.byte	0x4
 1314 004a 07       		.byte	0x7
 1315 004b B5010000 		.4byte	.LASF5
 1316 004f 02       		.uleb128 0x2
 1317 0050 08       		.byte	0x8
 1318 0051 05       		.byte	0x5
 1319 0052 EA000000 		.4byte	.LASF6
 1320 0056 02       		.uleb128 0x2
 1321 0057 08       		.byte	0x8
 1322 0058 07       		.byte	0x7
 1323 0059 86000000 		.4byte	.LASF7
 1324 005d 03       		.uleb128 0x3
 1325 005e 04       		.byte	0x4
 1326 005f 05       		.byte	0x5
 1327 0060 696E7400 		.ascii	"int\000"
 1328 0064 02       		.uleb128 0x2
 1329 0065 04       		.byte	0x4
 1330 0066 07       		.byte	0x7
 1331 0067 A1010000 		.4byte	.LASF8
 1332 006b 04       		.uleb128 0x4
 1333 006c 4C010000 		.4byte	.LASF9
ARM GAS  C:\Users\PC69\AppData\Local\Temp\ccZV2CAg.s 			page 40


 1334 0070 02       		.byte	0x2
 1335 0071 A1       		.byte	0xa1
 1336 0072 2C000000 		.4byte	0x2c
 1337 0076 04       		.uleb128 0x4
 1338 0077 15000000 		.4byte	.LASF10
 1339 007b 02       		.byte	0x2
 1340 007c A2       		.byte	0xa2
 1341 007d 3A000000 		.4byte	0x3a
 1342 0081 04       		.uleb128 0x4
 1343 0082 59010000 		.4byte	.LASF11
 1344 0086 02       		.byte	0x2
 1345 0087 A3       		.byte	0xa3
 1346 0088 48000000 		.4byte	0x48
 1347 008c 04       		.uleb128 0x4
 1348 008d DF030000 		.4byte	.LASF12
 1349 0091 02       		.byte	0x2
 1350 0092 A5       		.byte	0xa5
 1351 0093 33000000 		.4byte	0x33
 1352 0097 04       		.uleb128 0x4
 1353 0098 1F010000 		.4byte	.LASF13
 1354 009c 02       		.byte	0x2
 1355 009d A6       		.byte	0xa6
 1356 009e 41000000 		.4byte	0x41
 1357 00a2 04       		.uleb128 0x4
 1358 00a3 3D020000 		.4byte	.LASF14
 1359 00a7 02       		.byte	0x2
 1360 00a8 A7       		.byte	0xa7
 1361 00a9 AD000000 		.4byte	0xad
 1362 00ad 02       		.uleb128 0x2
 1363 00ae 04       		.byte	0x4
 1364 00af 04       		.byte	0x4
 1365 00b0 95020000 		.4byte	.LASF15
 1366 00b4 02       		.uleb128 0x2
 1367 00b5 08       		.byte	0x8
 1368 00b6 04       		.byte	0x4
 1369 00b7 52010000 		.4byte	.LASF16
 1370 00bb 04       		.uleb128 0x4
 1371 00bc 8F020000 		.4byte	.LASF17
 1372 00c0 02       		.byte	0x2
 1373 00c1 AC       		.byte	0xac
 1374 00c2 4F000000 		.4byte	0x4f
 1375 00c6 02       		.uleb128 0x2
 1376 00c7 01       		.byte	0x1
 1377 00c8 08       		.byte	0x8
 1378 00c9 72030000 		.4byte	.LASF18
 1379 00cd 05       		.uleb128 0x5
 1380 00ce 0E020000 		.4byte	.LASF19
 1381 00d2 02       		.byte	0x2
 1382 00d3 4D01     		.2byte	0x14d
 1383 00d5 D9000000 		.4byte	0xd9
 1384 00d9 06       		.uleb128 0x6
 1385 00da 81000000 		.4byte	0x81
 1386 00de 02       		.uleb128 0x2
 1387 00df 04       		.byte	0x4
 1388 00e0 07       		.byte	0x7
 1389 00e1 45020000 		.4byte	.LASF20
 1390 00e5 07       		.uleb128 0x7
ARM GAS  C:\Users\PC69\AppData\Local\Temp\ccZV2CAg.s 			page 41


 1391 00e6 72000000 		.4byte	.LASF25
 1392 00ea 01       		.byte	0x1
 1393 00eb 40       		.byte	0x40
 1394 00ec 00000000 		.4byte	.LFB0
 1395 00f0 24000000 		.4byte	.LFE0-.LFB0
 1396 00f4 01       		.uleb128 0x1
 1397 00f5 9C       		.byte	0x9c
 1398 00f6 08       		.uleb128 0x8
 1399 00f7 1C000000 		.4byte	.LASF36
 1400 00fb 01       		.byte	0x1
 1401 00fc 5F       		.byte	0x5f
 1402 00fd 00000000 		.4byte	.LFB1
 1403 0101 10020000 		.4byte	.LFE1-.LFB1
 1404 0105 01       		.uleb128 0x1
 1405 0106 9C       		.byte	0x9c
 1406 0107 47010000 		.4byte	0x147
 1407 010b 09       		.uleb128 0x9
 1408 010c 67030000 		.4byte	.LASF21
 1409 0110 01       		.byte	0x1
 1410 0111 61       		.byte	0x61
 1411 0112 81000000 		.4byte	0x81
 1412 0116 02       		.uleb128 0x2
 1413 0117 91       		.byte	0x91
 1414 0118 74       		.sleb128 -12
 1415 0119 09       		.uleb128 0x9
 1416 011a CD010000 		.4byte	.LASF22
 1417 011e 01       		.byte	0x1
 1418 011f 62       		.byte	0x62
 1419 0120 81000000 		.4byte	0x81
 1420 0124 02       		.uleb128 0x2
 1421 0125 91       		.byte	0x91
 1422 0126 6C       		.sleb128 -20
 1423 0127 09       		.uleb128 0x9
 1424 0128 37000000 		.4byte	.LASF23
 1425 012c 01       		.byte	0x1
 1426 012d 63       		.byte	0x63
 1427 012e 97000000 		.4byte	0x97
 1428 0132 02       		.uleb128 0x2
 1429 0133 91       		.byte	0x91
 1430 0134 70       		.sleb128 -16
 1431 0135 09       		.uleb128 0x9
 1432 0136 B2000000 		.4byte	.LASF24
 1433 013a 01       		.byte	0x1
 1434 013b 66       		.byte	0x66
 1435 013c 57010000 		.4byte	0x157
 1436 0140 05       		.uleb128 0x5
 1437 0141 03       		.byte	0x3
 1438 0142 20000000 		.4byte	ADC_SAR_Seq_1_InputsPlacement.4714
 1439 0146 00       		.byte	0
 1440 0147 0A       		.uleb128 0xa
 1441 0148 6B000000 		.4byte	0x6b
 1442 014c 57010000 		.4byte	0x157
 1443 0150 0B       		.uleb128 0xb
 1444 0151 DE000000 		.4byte	0xde
 1445 0155 07       		.byte	0x7
 1446 0156 00       		.byte	0
 1447 0157 0C       		.uleb128 0xc
ARM GAS  C:\Users\PC69\AppData\Local\Temp\ccZV2CAg.s 			page 42


 1448 0158 47010000 		.4byte	0x147
 1449 015c 0D       		.uleb128 0xd
 1450 015d 9D000000 		.4byte	.LASF26
 1451 0161 01       		.byte	0x1
 1452 0162 4B01     		.2byte	0x14b
 1453 0164 00000000 		.4byte	.LFB2
 1454 0168 28000000 		.4byte	.LFE2-.LFB2
 1455 016c 01       		.uleb128 0x1
 1456 016d 9C       		.byte	0x9c
 1457 016e 0E       		.uleb128 0xe
 1458 016f B1020000 		.4byte	.LASF27
 1459 0173 01       		.byte	0x1
 1460 0174 6E01     		.2byte	0x16e
 1461 0176 00000000 		.4byte	.LFB3
 1462 017a 18000000 		.4byte	.LFE3-.LFB3
 1463 017e 01       		.uleb128 0x1
 1464 017f 9C       		.byte	0x9c
 1465 0180 0E       		.uleb128 0xe
 1466 0181 3E000000 		.4byte	.LASF28
 1467 0185 01       		.byte	0x1
 1468 0186 8801     		.2byte	0x188
 1469 0188 00000000 		.4byte	.LFB4
 1470 018c 1C000000 		.4byte	.LFE4-.LFB4
 1471 0190 01       		.uleb128 0x1
 1472 0191 9C       		.byte	0x9c
 1473 0192 0E       		.uleb128 0xe
 1474 0193 75020000 		.4byte	.LASF29
 1475 0197 01       		.byte	0x1
 1476 0198 A101     		.2byte	0x1a1
 1477 019a 00000000 		.4byte	.LFB5
 1478 019e 1C000000 		.4byte	.LFE5-.LFB5
 1479 01a2 01       		.uleb128 0x1
 1480 01a3 9C       		.byte	0x9c
 1481 01a4 0F       		.uleb128 0xf
 1482 01a5 57020000 		.4byte	.LASF31
 1483 01a9 01       		.byte	0x1
 1484 01aa C301     		.2byte	0x1c3
 1485 01ac 81000000 		.4byte	0x81
 1486 01b0 00000000 		.4byte	.LFB6
 1487 01b4 48000000 		.4byte	.LFE6-.LFB6
 1488 01b8 01       		.uleb128 0x1
 1489 01b9 9C       		.byte	0x9c
 1490 01ba DD010000 		.4byte	0x1dd
 1491 01be 10       		.uleb128 0x10
 1492 01bf 83010000 		.4byte	.LASF33
 1493 01c3 01       		.byte	0x1
 1494 01c4 C301     		.2byte	0x1c3
 1495 01c6 81000000 		.4byte	0x81
 1496 01ca 02       		.uleb128 0x2
 1497 01cb 91       		.byte	0x91
 1498 01cc 6C       		.sleb128 -20
 1499 01cd 11       		.uleb128 0x11
 1500 01ce C0030000 		.4byte	.LASF30
 1501 01d2 01       		.byte	0x1
 1502 01d3 C501     		.2byte	0x1c5
 1503 01d5 81000000 		.4byte	0x81
 1504 01d9 02       		.uleb128 0x2
ARM GAS  C:\Users\PC69\AppData\Local\Temp\ccZV2CAg.s 			page 43


 1505 01da 91       		.byte	0x91
 1506 01db 74       		.sleb128 -12
 1507 01dc 00       		.byte	0
 1508 01dd 12       		.uleb128 0x12
 1509 01de D0000000 		.4byte	.LASF32
 1510 01e2 01       		.byte	0x1
 1511 01e3 F901     		.2byte	0x1f9
 1512 01e5 8C000000 		.4byte	0x8c
 1513 01e9 00000000 		.4byte	.LFB7
 1514 01ed 44000000 		.4byte	.LFE7-.LFB7
 1515 01f1 01       		.uleb128 0x1
 1516 01f2 9C       		.byte	0x9c
 1517 01f3 16020000 		.4byte	0x216
 1518 01f7 10       		.uleb128 0x10
 1519 01f8 6D030000 		.4byte	.LASF34
 1520 01fc 01       		.byte	0x1
 1521 01fd F901     		.2byte	0x1f9
 1522 01ff 81000000 		.4byte	0x81
 1523 0203 02       		.uleb128 0x2
 1524 0204 91       		.byte	0x91
 1525 0205 6C       		.sleb128 -20
 1526 0206 11       		.uleb128 0x11
 1527 0207 8E040000 		.4byte	.LASF35
 1528 020b 01       		.byte	0x1
 1529 020c FB01     		.2byte	0x1fb
 1530 020e 81000000 		.4byte	0x81
 1531 0212 02       		.uleb128 0x2
 1532 0213 91       		.byte	0x91
 1533 0214 74       		.sleb128 -12
 1534 0215 00       		.byte	0
 1535 0216 13       		.uleb128 0x13
 1536 0217 4D030000 		.4byte	.LASF37
 1537 021b 01       		.byte	0x1
 1538 021c 2602     		.2byte	0x226
 1539 021e 00000000 		.4byte	.LFB8
 1540 0222 1C000000 		.4byte	.LFE8-.LFB8
 1541 0226 01       		.uleb128 0x1
 1542 0227 9C       		.byte	0x9c
 1543 0228 3C020000 		.4byte	0x23c
 1544 022c 10       		.uleb128 0x10
 1545 022d 60010000 		.4byte	.LASF38
 1546 0231 01       		.byte	0x1
 1547 0232 2602     		.2byte	0x226
 1548 0234 81000000 		.4byte	0x81
 1549 0238 02       		.uleb128 0x2
 1550 0239 91       		.byte	0x91
 1551 023a 74       		.sleb128 -12
 1552 023b 00       		.byte	0
 1553 023c 13       		.uleb128 0x13
 1554 023d 77030000 		.4byte	.LASF39
 1555 0241 01       		.byte	0x1
 1556 0242 5202     		.2byte	0x252
 1557 0244 00000000 		.4byte	.LFB9
 1558 0248 30000000 		.4byte	.LFE9-.LFB9
 1559 024c 01       		.uleb128 0x1
 1560 024d 9C       		.byte	0x9c
 1561 024e 62020000 		.4byte	0x262
ARM GAS  C:\Users\PC69\AppData\Local\Temp\ccZV2CAg.s 			page 44


 1562 0252 10       		.uleb128 0x10
 1563 0253 4E020000 		.4byte	.LASF40
 1564 0257 01       		.byte	0x1
 1565 0258 5202     		.2byte	0x252
 1566 025a 81000000 		.4byte	0x81
 1567 025e 02       		.uleb128 0x2
 1568 025f 91       		.byte	0x91
 1569 0260 74       		.sleb128 -12
 1570 0261 00       		.byte	0
 1571 0262 13       		.uleb128 0x13
 1572 0263 04010000 		.4byte	.LASF41
 1573 0267 01       		.byte	0x1
 1574 0268 6702     		.2byte	0x267
 1575 026a 00000000 		.4byte	.LFB10
 1576 026e 2C000000 		.4byte	.LFE10-.LFB10
 1577 0272 01       		.uleb128 0x1
 1578 0273 9C       		.byte	0x9c
 1579 0274 88020000 		.4byte	0x288
 1580 0278 10       		.uleb128 0x10
 1581 0279 C4020000 		.4byte	.LASF42
 1582 027d 01       		.byte	0x1
 1583 027e 6702     		.2byte	0x267
 1584 0280 81000000 		.4byte	0x81
 1585 0284 02       		.uleb128 0x2
 1586 0285 91       		.byte	0x91
 1587 0286 74       		.sleb128 -12
 1588 0287 00       		.byte	0
 1589 0288 13       		.uleb128 0x13
 1590 0289 73040000 		.4byte	.LASF43
 1591 028d 01       		.byte	0x1
 1592 028e 7F02     		.2byte	0x27f
 1593 0290 00000000 		.4byte	.LFB11
 1594 0294 1C000000 		.4byte	.LFE11-.LFB11
 1595 0298 01       		.uleb128 0x1
 1596 0299 9C       		.byte	0x9c
 1597 029a AE020000 		.4byte	0x2ae
 1598 029e 10       		.uleb128 0x10
 1599 029f 60010000 		.4byte	.LASF38
 1600 02a3 01       		.byte	0x1
 1601 02a4 7F02     		.2byte	0x27f
 1602 02a6 81000000 		.4byte	0x81
 1603 02aa 02       		.uleb128 0x2
 1604 02ab 91       		.byte	0x91
 1605 02ac 74       		.sleb128 -12
 1606 02ad 00       		.byte	0
 1607 02ae 13       		.uleb128 0x13
 1608 02af 59000000 		.4byte	.LASF44
 1609 02b3 01       		.byte	0x1
 1610 02b4 9602     		.2byte	0x296
 1611 02b6 00000000 		.4byte	.LFB12
 1612 02ba 1C000000 		.4byte	.LFE12-.LFB12
 1613 02be 01       		.uleb128 0x1
 1614 02bf 9C       		.byte	0x9c
 1615 02c0 D4020000 		.4byte	0x2d4
 1616 02c4 10       		.uleb128 0x10
 1617 02c5 60010000 		.4byte	.LASF38
 1618 02c9 01       		.byte	0x1
ARM GAS  C:\Users\PC69\AppData\Local\Temp\ccZV2CAg.s 			page 45


 1619 02ca 9602     		.2byte	0x296
 1620 02cc 81000000 		.4byte	0x81
 1621 02d0 02       		.uleb128 0x2
 1622 02d1 91       		.byte	0x91
 1623 02d2 74       		.sleb128 -12
 1624 02d3 00       		.byte	0
 1625 02d4 14       		.uleb128 0x14
 1626 02d5 C7030000 		.4byte	.LASF45
 1627 02d9 01       		.byte	0x1
 1628 02da B202     		.2byte	0x2b2
 1629 02dc 00000000 		.4byte	.LFB13
 1630 02e0 30000000 		.4byte	.LFE13-.LFB13
 1631 02e4 01       		.uleb128 0x1
 1632 02e5 9C       		.byte	0x9c
 1633 02e6 09030000 		.4byte	0x309
 1634 02ea 10       		.uleb128 0x10
 1635 02eb 6D030000 		.4byte	.LASF34
 1636 02ef 01       		.byte	0x1
 1637 02f0 B202     		.2byte	0x2b2
 1638 02f2 81000000 		.4byte	0x81
 1639 02f6 02       		.uleb128 0x2
 1640 02f7 91       		.byte	0x91
 1641 02f8 74       		.sleb128 -12
 1642 02f9 10       		.uleb128 0x10
 1643 02fa 91030000 		.4byte	.LASF46
 1644 02fe 01       		.byte	0x1
 1645 02ff B202     		.2byte	0x2b2
 1646 0301 8C000000 		.4byte	0x8c
 1647 0305 02       		.uleb128 0x2
 1648 0306 91       		.byte	0x91
 1649 0307 72       		.sleb128 -14
 1650 0308 00       		.byte	0
 1651 0309 14       		.uleb128 0x14
 1652 030a 9B020000 		.4byte	.LASF47
 1653 030e 01       		.byte	0x1
 1654 030f D402     		.2byte	0x2d4
 1655 0311 00000000 		.4byte	.LFB14
 1656 0315 2C000000 		.4byte	.LFE14-.LFB14
 1657 0319 01       		.uleb128 0x1
 1658 031a 9C       		.byte	0x9c
 1659 031b 3E030000 		.4byte	0x33e
 1660 031f 10       		.uleb128 0x10
 1661 0320 6D030000 		.4byte	.LASF34
 1662 0324 01       		.byte	0x1
 1663 0325 D402     		.2byte	0x2d4
 1664 0327 81000000 		.4byte	0x81
 1665 032b 02       		.uleb128 0x2
 1666 032c 91       		.byte	0x91
 1667 032d 74       		.sleb128 -12
 1668 032e 10       		.uleb128 0x10
 1669 032f 2F000000 		.4byte	.LASF48
 1670 0333 01       		.byte	0x1
 1671 0334 D402     		.2byte	0x2d4
 1672 0336 97000000 		.4byte	0x97
 1673 033a 02       		.uleb128 0x2
 1674 033b 91       		.byte	0x91
 1675 033c 70       		.sleb128 -16
ARM GAS  C:\Users\PC69\AppData\Local\Temp\ccZV2CAg.s 			page 46


 1676 033d 00       		.byte	0
 1677 033e 12       		.uleb128 0x12
 1678 033f 65010000 		.4byte	.LASF49
 1679 0343 01       		.byte	0x1
 1680 0344 F502     		.2byte	0x2f5
 1681 0346 8C000000 		.4byte	0x8c
 1682 034a 00000000 		.4byte	.LFB15
 1683 034e A4000000 		.4byte	.LFE15-.LFB15
 1684 0352 01       		.uleb128 0x1
 1685 0353 9C       		.byte	0x9c
 1686 0354 86030000 		.4byte	0x386
 1687 0358 10       		.uleb128 0x10
 1688 0359 6D030000 		.4byte	.LASF34
 1689 035d 01       		.byte	0x1
 1690 035e F502     		.2byte	0x2f5
 1691 0360 81000000 		.4byte	0x81
 1692 0364 02       		.uleb128 0x2
 1693 0365 91       		.byte	0x91
 1694 0366 6C       		.sleb128 -20
 1695 0367 10       		.uleb128 0x10
 1696 0368 98030000 		.4byte	.LASF50
 1697 036c 01       		.byte	0x1
 1698 036d F502     		.2byte	0x2f5
 1699 036f 8C000000 		.4byte	0x8c
 1700 0373 02       		.uleb128 0x2
 1701 0374 91       		.byte	0x91
 1702 0375 6A       		.sleb128 -22
 1703 0376 11       		.uleb128 0x11
 1704 0377 07020000 		.4byte	.LASF51
 1705 037b 01       		.byte	0x1
 1706 037c F702     		.2byte	0x2f7
 1707 037e 8C000000 		.4byte	0x8c
 1708 0382 02       		.uleb128 0x2
 1709 0383 91       		.byte	0x91
 1710 0384 76       		.sleb128 -10
 1711 0385 00       		.byte	0
 1712 0386 12       		.uleb128 0x12
 1713 0387 25010000 		.4byte	.LASF52
 1714 038b 01       		.byte	0x1
 1715 038c 2B03     		.2byte	0x32b
 1716 038e 97000000 		.4byte	0x97
 1717 0392 00000000 		.4byte	.LFB16
 1718 0396 90000000 		.4byte	.LFE16-.LFB16
 1719 039a 01       		.uleb128 0x1
 1720 039b 9C       		.byte	0x9c
 1721 039c CE030000 		.4byte	0x3ce
 1722 03a0 10       		.uleb128 0x10
 1723 03a1 6D030000 		.4byte	.LASF34
 1724 03a5 01       		.byte	0x1
 1725 03a6 2B03     		.2byte	0x32b
 1726 03a8 81000000 		.4byte	0x81
 1727 03ac 02       		.uleb128 0x2
 1728 03ad 91       		.byte	0x91
 1729 03ae 64       		.sleb128 -28
 1730 03af 10       		.uleb128 0x10
 1731 03b0 98030000 		.4byte	.LASF50
 1732 03b4 01       		.byte	0x1
ARM GAS  C:\Users\PC69\AppData\Local\Temp\ccZV2CAg.s 			page 47


 1733 03b5 2B03     		.2byte	0x32b
 1734 03b7 8C000000 		.4byte	0x8c
 1735 03bb 02       		.uleb128 0x2
 1736 03bc 91       		.byte	0x91
 1737 03bd 62       		.sleb128 -30
 1738 03be 11       		.uleb128 0x11
 1739 03bf AE010000 		.4byte	.LASF53
 1740 03c3 01       		.byte	0x1
 1741 03c4 2D03     		.2byte	0x32d
 1742 03c6 BB000000 		.4byte	0xbb
 1743 03ca 02       		.uleb128 0x2
 1744 03cb 91       		.byte	0x91
 1745 03cc 68       		.sleb128 -24
 1746 03cd 00       		.byte	0
 1747 03ce 12       		.uleb128 0x12
 1748 03cf E6020000 		.4byte	.LASF54
 1749 03d3 01       		.byte	0x1
 1750 03d4 5803     		.2byte	0x358
 1751 03d6 A2000000 		.4byte	0xa2
 1752 03da 00000000 		.4byte	.LFB17
 1753 03de 80000000 		.4byte	.LFE17-.LFB17
 1754 03e2 01       		.uleb128 0x1
 1755 03e3 9C       		.byte	0x9c
 1756 03e4 16040000 		.4byte	0x416
 1757 03e8 10       		.uleb128 0x10
 1758 03e9 6D030000 		.4byte	.LASF34
 1759 03ed 01       		.byte	0x1
 1760 03ee 5803     		.2byte	0x358
 1761 03f0 81000000 		.4byte	0x81
 1762 03f4 02       		.uleb128 0x2
 1763 03f5 91       		.byte	0x91
 1764 03f6 64       		.sleb128 -28
 1765 03f7 10       		.uleb128 0x10
 1766 03f8 98030000 		.4byte	.LASF50
 1767 03fc 01       		.byte	0x1
 1768 03fd 5803     		.2byte	0x358
 1769 03ff 8C000000 		.4byte	0x8c
 1770 0403 02       		.uleb128 0x2
 1771 0404 91       		.byte	0x91
 1772 0405 62       		.sleb128 -30
 1773 0406 11       		.uleb128 0x11
 1774 0407 C7010000 		.4byte	.LASF55
 1775 040b 01       		.byte	0x1
 1776 040c 5A03     		.2byte	0x35a
 1777 040e A2000000 		.4byte	0xa2
 1778 0412 02       		.uleb128 0x2
 1779 0413 91       		.byte	0x91
 1780 0414 6C       		.sleb128 -20
 1781 0415 00       		.byte	0
 1782 0416 0A       		.uleb128 0xa
 1783 0417 81000000 		.4byte	0x81
 1784 041b 26040000 		.4byte	0x426
 1785 041f 0B       		.uleb128 0xb
 1786 0420 DE000000 		.4byte	0xde
 1787 0424 07       		.byte	0x7
 1788 0425 00       		.byte	0
 1789 0426 09       		.uleb128 0x9
ARM GAS  C:\Users\PC69\AppData\Local\Temp\ccZV2CAg.s 			page 48


 1790 0427 EA010000 		.4byte	.LASF56
 1791 042b 01       		.byte	0x1
 1792 042c 21       		.byte	0x21
 1793 042d 37040000 		.4byte	0x437
 1794 0431 05       		.uleb128 0x5
 1795 0432 03       		.byte	0x3
 1796 0433 00000000 		.4byte	ADC_SAR_Seq_1_channelsConfig
 1797 0437 0C       		.uleb128 0xc
 1798 0438 16040000 		.4byte	0x416
 1799 043c 15       		.uleb128 0x15
 1800 043d 8B010000 		.4byte	.LASF57
 1801 0441 01       		.byte	0x1
 1802 0442 18       		.byte	0x18
 1803 0443 6B000000 		.4byte	0x6b
 1804 0447 05       		.uleb128 0x5
 1805 0448 03       		.byte	0x3
 1806 0449 00000000 		.4byte	ADC_SAR_Seq_1_initVar
 1807 044d 0A       		.uleb128 0xa
 1808 044e 8C000000 		.4byte	0x8c
 1809 0452 5D040000 		.4byte	0x45d
 1810 0456 0B       		.uleb128 0xb
 1811 0457 DE000000 		.4byte	0xde
 1812 045b 07       		.byte	0x7
 1813 045c 00       		.byte	0
 1814 045d 15       		.uleb128 0x15
 1815 045e 00000000 		.4byte	.LASF58
 1816 0462 01       		.byte	0x1
 1817 0463 19       		.byte	0x19
 1818 0464 6E040000 		.4byte	0x46e
 1819 0468 05       		.uleb128 0x5
 1820 0469 03       		.byte	0x3
 1821 046a 00000000 		.4byte	ADC_SAR_Seq_1_offset
 1822 046e 06       		.uleb128 0x6
 1823 046f 4D040000 		.4byte	0x44d
 1824 0473 0A       		.uleb128 0xa
 1825 0474 97000000 		.4byte	0x97
 1826 0478 83040000 		.4byte	0x483
 1827 047c 0B       		.uleb128 0xb
 1828 047d DE000000 		.4byte	0xde
 1829 0481 07       		.byte	0x7
 1830 0482 00       		.byte	0
 1831 0483 15       		.uleb128 0x15
 1832 0484 A2030000 		.4byte	.LASF59
 1833 0488 01       		.byte	0x1
 1834 0489 1A       		.byte	0x1a
 1835 048a 94040000 		.4byte	0x494
 1836 048e 05       		.uleb128 0x5
 1837 048f 03       		.byte	0x3
 1838 0490 00000000 		.4byte	ADC_SAR_Seq_1_countsPer10Volt
 1839 0494 06       		.uleb128 0x6
 1840 0495 73040000 		.4byte	0x473
 1841 0499 00       		.byte	0
 1842              		.section	.debug_abbrev,"",%progbits
 1843              	.Ldebug_abbrev0:
 1844 0000 01       		.uleb128 0x1
 1845 0001 11       		.uleb128 0x11
 1846 0002 01       		.byte	0x1
ARM GAS  C:\Users\PC69\AppData\Local\Temp\ccZV2CAg.s 			page 49


 1847 0003 25       		.uleb128 0x25
 1848 0004 0E       		.uleb128 0xe
 1849 0005 13       		.uleb128 0x13
 1850 0006 0B       		.uleb128 0xb
 1851 0007 03       		.uleb128 0x3
 1852 0008 0E       		.uleb128 0xe
 1853 0009 1B       		.uleb128 0x1b
 1854 000a 0E       		.uleb128 0xe
 1855 000b 55       		.uleb128 0x55
 1856 000c 17       		.uleb128 0x17
 1857 000d 11       		.uleb128 0x11
 1858 000e 01       		.uleb128 0x1
 1859 000f 10       		.uleb128 0x10
 1860 0010 17       		.uleb128 0x17
 1861 0011 00       		.byte	0
 1862 0012 00       		.byte	0
 1863 0013 02       		.uleb128 0x2
 1864 0014 24       		.uleb128 0x24
 1865 0015 00       		.byte	0
 1866 0016 0B       		.uleb128 0xb
 1867 0017 0B       		.uleb128 0xb
 1868 0018 3E       		.uleb128 0x3e
 1869 0019 0B       		.uleb128 0xb
 1870 001a 03       		.uleb128 0x3
 1871 001b 0E       		.uleb128 0xe
 1872 001c 00       		.byte	0
 1873 001d 00       		.byte	0
 1874 001e 03       		.uleb128 0x3
 1875 001f 24       		.uleb128 0x24
 1876 0020 00       		.byte	0
 1877 0021 0B       		.uleb128 0xb
 1878 0022 0B       		.uleb128 0xb
 1879 0023 3E       		.uleb128 0x3e
 1880 0024 0B       		.uleb128 0xb
 1881 0025 03       		.uleb128 0x3
 1882 0026 08       		.uleb128 0x8
 1883 0027 00       		.byte	0
 1884 0028 00       		.byte	0
 1885 0029 04       		.uleb128 0x4
 1886 002a 16       		.uleb128 0x16
 1887 002b 00       		.byte	0
 1888 002c 03       		.uleb128 0x3
 1889 002d 0E       		.uleb128 0xe
 1890 002e 3A       		.uleb128 0x3a
 1891 002f 0B       		.uleb128 0xb
 1892 0030 3B       		.uleb128 0x3b
 1893 0031 0B       		.uleb128 0xb
 1894 0032 49       		.uleb128 0x49
 1895 0033 13       		.uleb128 0x13
 1896 0034 00       		.byte	0
 1897 0035 00       		.byte	0
 1898 0036 05       		.uleb128 0x5
 1899 0037 16       		.uleb128 0x16
 1900 0038 00       		.byte	0
 1901 0039 03       		.uleb128 0x3
 1902 003a 0E       		.uleb128 0xe
 1903 003b 3A       		.uleb128 0x3a
ARM GAS  C:\Users\PC69\AppData\Local\Temp\ccZV2CAg.s 			page 50


 1904 003c 0B       		.uleb128 0xb
 1905 003d 3B       		.uleb128 0x3b
 1906 003e 05       		.uleb128 0x5
 1907 003f 49       		.uleb128 0x49
 1908 0040 13       		.uleb128 0x13
 1909 0041 00       		.byte	0
 1910 0042 00       		.byte	0
 1911 0043 06       		.uleb128 0x6
 1912 0044 35       		.uleb128 0x35
 1913 0045 00       		.byte	0
 1914 0046 49       		.uleb128 0x49
 1915 0047 13       		.uleb128 0x13
 1916 0048 00       		.byte	0
 1917 0049 00       		.byte	0
 1918 004a 07       		.uleb128 0x7
 1919 004b 2E       		.uleb128 0x2e
 1920 004c 00       		.byte	0
 1921 004d 3F       		.uleb128 0x3f
 1922 004e 19       		.uleb128 0x19
 1923 004f 03       		.uleb128 0x3
 1924 0050 0E       		.uleb128 0xe
 1925 0051 3A       		.uleb128 0x3a
 1926 0052 0B       		.uleb128 0xb
 1927 0053 3B       		.uleb128 0x3b
 1928 0054 0B       		.uleb128 0xb
 1929 0055 27       		.uleb128 0x27
 1930 0056 19       		.uleb128 0x19
 1931 0057 11       		.uleb128 0x11
 1932 0058 01       		.uleb128 0x1
 1933 0059 12       		.uleb128 0x12
 1934 005a 06       		.uleb128 0x6
 1935 005b 40       		.uleb128 0x40
 1936 005c 18       		.uleb128 0x18
 1937 005d 9642     		.uleb128 0x2116
 1938 005f 19       		.uleb128 0x19
 1939 0060 00       		.byte	0
 1940 0061 00       		.byte	0
 1941 0062 08       		.uleb128 0x8
 1942 0063 2E       		.uleb128 0x2e
 1943 0064 01       		.byte	0x1
 1944 0065 3F       		.uleb128 0x3f
 1945 0066 19       		.uleb128 0x19
 1946 0067 03       		.uleb128 0x3
 1947 0068 0E       		.uleb128 0xe
 1948 0069 3A       		.uleb128 0x3a
 1949 006a 0B       		.uleb128 0xb
 1950 006b 3B       		.uleb128 0x3b
 1951 006c 0B       		.uleb128 0xb
 1952 006d 27       		.uleb128 0x27
 1953 006e 19       		.uleb128 0x19
 1954 006f 11       		.uleb128 0x11
 1955 0070 01       		.uleb128 0x1
 1956 0071 12       		.uleb128 0x12
 1957 0072 06       		.uleb128 0x6
 1958 0073 40       		.uleb128 0x40
 1959 0074 18       		.uleb128 0x18
 1960 0075 9642     		.uleb128 0x2116
ARM GAS  C:\Users\PC69\AppData\Local\Temp\ccZV2CAg.s 			page 51


 1961 0077 19       		.uleb128 0x19
 1962 0078 01       		.uleb128 0x1
 1963 0079 13       		.uleb128 0x13
 1964 007a 00       		.byte	0
 1965 007b 00       		.byte	0
 1966 007c 09       		.uleb128 0x9
 1967 007d 34       		.uleb128 0x34
 1968 007e 00       		.byte	0
 1969 007f 03       		.uleb128 0x3
 1970 0080 0E       		.uleb128 0xe
 1971 0081 3A       		.uleb128 0x3a
 1972 0082 0B       		.uleb128 0xb
 1973 0083 3B       		.uleb128 0x3b
 1974 0084 0B       		.uleb128 0xb
 1975 0085 49       		.uleb128 0x49
 1976 0086 13       		.uleb128 0x13
 1977 0087 02       		.uleb128 0x2
 1978 0088 18       		.uleb128 0x18
 1979 0089 00       		.byte	0
 1980 008a 00       		.byte	0
 1981 008b 0A       		.uleb128 0xa
 1982 008c 01       		.uleb128 0x1
 1983 008d 01       		.byte	0x1
 1984 008e 49       		.uleb128 0x49
 1985 008f 13       		.uleb128 0x13
 1986 0090 01       		.uleb128 0x1
 1987 0091 13       		.uleb128 0x13
 1988 0092 00       		.byte	0
 1989 0093 00       		.byte	0
 1990 0094 0B       		.uleb128 0xb
 1991 0095 21       		.uleb128 0x21
 1992 0096 00       		.byte	0
 1993 0097 49       		.uleb128 0x49
 1994 0098 13       		.uleb128 0x13
 1995 0099 2F       		.uleb128 0x2f
 1996 009a 0B       		.uleb128 0xb
 1997 009b 00       		.byte	0
 1998 009c 00       		.byte	0
 1999 009d 0C       		.uleb128 0xc
 2000 009e 26       		.uleb128 0x26
 2001 009f 00       		.byte	0
 2002 00a0 49       		.uleb128 0x49
 2003 00a1 13       		.uleb128 0x13
 2004 00a2 00       		.byte	0
 2005 00a3 00       		.byte	0
 2006 00a4 0D       		.uleb128 0xd
 2007 00a5 2E       		.uleb128 0x2e
 2008 00a6 00       		.byte	0
 2009 00a7 3F       		.uleb128 0x3f
 2010 00a8 19       		.uleb128 0x19
 2011 00a9 03       		.uleb128 0x3
 2012 00aa 0E       		.uleb128 0xe
 2013 00ab 3A       		.uleb128 0x3a
 2014 00ac 0B       		.uleb128 0xb
 2015 00ad 3B       		.uleb128 0x3b
 2016 00ae 05       		.uleb128 0x5
 2017 00af 27       		.uleb128 0x27
ARM GAS  C:\Users\PC69\AppData\Local\Temp\ccZV2CAg.s 			page 52


 2018 00b0 19       		.uleb128 0x19
 2019 00b1 11       		.uleb128 0x11
 2020 00b2 01       		.uleb128 0x1
 2021 00b3 12       		.uleb128 0x12
 2022 00b4 06       		.uleb128 0x6
 2023 00b5 40       		.uleb128 0x40
 2024 00b6 18       		.uleb128 0x18
 2025 00b7 9642     		.uleb128 0x2116
 2026 00b9 19       		.uleb128 0x19
 2027 00ba 00       		.byte	0
 2028 00bb 00       		.byte	0
 2029 00bc 0E       		.uleb128 0xe
 2030 00bd 2E       		.uleb128 0x2e
 2031 00be 00       		.byte	0
 2032 00bf 3F       		.uleb128 0x3f
 2033 00c0 19       		.uleb128 0x19
 2034 00c1 03       		.uleb128 0x3
 2035 00c2 0E       		.uleb128 0xe
 2036 00c3 3A       		.uleb128 0x3a
 2037 00c4 0B       		.uleb128 0xb
 2038 00c5 3B       		.uleb128 0x3b
 2039 00c6 05       		.uleb128 0x5
 2040 00c7 27       		.uleb128 0x27
 2041 00c8 19       		.uleb128 0x19
 2042 00c9 11       		.uleb128 0x11
 2043 00ca 01       		.uleb128 0x1
 2044 00cb 12       		.uleb128 0x12
 2045 00cc 06       		.uleb128 0x6
 2046 00cd 40       		.uleb128 0x40
 2047 00ce 18       		.uleb128 0x18
 2048 00cf 9742     		.uleb128 0x2117
 2049 00d1 19       		.uleb128 0x19
 2050 00d2 00       		.byte	0
 2051 00d3 00       		.byte	0
 2052 00d4 0F       		.uleb128 0xf
 2053 00d5 2E       		.uleb128 0x2e
 2054 00d6 01       		.byte	0x1
 2055 00d7 3F       		.uleb128 0x3f
 2056 00d8 19       		.uleb128 0x19
 2057 00d9 03       		.uleb128 0x3
 2058 00da 0E       		.uleb128 0xe
 2059 00db 3A       		.uleb128 0x3a
 2060 00dc 0B       		.uleb128 0xb
 2061 00dd 3B       		.uleb128 0x3b
 2062 00de 05       		.uleb128 0x5
 2063 00df 27       		.uleb128 0x27
 2064 00e0 19       		.uleb128 0x19
 2065 00e1 49       		.uleb128 0x49
 2066 00e2 13       		.uleb128 0x13
 2067 00e3 11       		.uleb128 0x11
 2068 00e4 01       		.uleb128 0x1
 2069 00e5 12       		.uleb128 0x12
 2070 00e6 06       		.uleb128 0x6
 2071 00e7 40       		.uleb128 0x40
 2072 00e8 18       		.uleb128 0x18
 2073 00e9 9742     		.uleb128 0x2117
 2074 00eb 19       		.uleb128 0x19
ARM GAS  C:\Users\PC69\AppData\Local\Temp\ccZV2CAg.s 			page 53


 2075 00ec 01       		.uleb128 0x1
 2076 00ed 13       		.uleb128 0x13
 2077 00ee 00       		.byte	0
 2078 00ef 00       		.byte	0
 2079 00f0 10       		.uleb128 0x10
 2080 00f1 05       		.uleb128 0x5
 2081 00f2 00       		.byte	0
 2082 00f3 03       		.uleb128 0x3
 2083 00f4 0E       		.uleb128 0xe
 2084 00f5 3A       		.uleb128 0x3a
 2085 00f6 0B       		.uleb128 0xb
 2086 00f7 3B       		.uleb128 0x3b
 2087 00f8 05       		.uleb128 0x5
 2088 00f9 49       		.uleb128 0x49
 2089 00fa 13       		.uleb128 0x13
 2090 00fb 02       		.uleb128 0x2
 2091 00fc 18       		.uleb128 0x18
 2092 00fd 00       		.byte	0
 2093 00fe 00       		.byte	0
 2094 00ff 11       		.uleb128 0x11
 2095 0100 34       		.uleb128 0x34
 2096 0101 00       		.byte	0
 2097 0102 03       		.uleb128 0x3
 2098 0103 0E       		.uleb128 0xe
 2099 0104 3A       		.uleb128 0x3a
 2100 0105 0B       		.uleb128 0xb
 2101 0106 3B       		.uleb128 0x3b
 2102 0107 05       		.uleb128 0x5
 2103 0108 49       		.uleb128 0x49
 2104 0109 13       		.uleb128 0x13
 2105 010a 02       		.uleb128 0x2
 2106 010b 18       		.uleb128 0x18
 2107 010c 00       		.byte	0
 2108 010d 00       		.byte	0
 2109 010e 12       		.uleb128 0x12
 2110 010f 2E       		.uleb128 0x2e
 2111 0110 01       		.byte	0x1
 2112 0111 3F       		.uleb128 0x3f
 2113 0112 19       		.uleb128 0x19
 2114 0113 03       		.uleb128 0x3
 2115 0114 0E       		.uleb128 0xe
 2116 0115 3A       		.uleb128 0x3a
 2117 0116 0B       		.uleb128 0xb
 2118 0117 3B       		.uleb128 0x3b
 2119 0118 05       		.uleb128 0x5
 2120 0119 27       		.uleb128 0x27
 2121 011a 19       		.uleb128 0x19
 2122 011b 49       		.uleb128 0x49
 2123 011c 13       		.uleb128 0x13
 2124 011d 11       		.uleb128 0x11
 2125 011e 01       		.uleb128 0x1
 2126 011f 12       		.uleb128 0x12
 2127 0120 06       		.uleb128 0x6
 2128 0121 40       		.uleb128 0x40
 2129 0122 18       		.uleb128 0x18
 2130 0123 9642     		.uleb128 0x2116
 2131 0125 19       		.uleb128 0x19
ARM GAS  C:\Users\PC69\AppData\Local\Temp\ccZV2CAg.s 			page 54


 2132 0126 01       		.uleb128 0x1
 2133 0127 13       		.uleb128 0x13
 2134 0128 00       		.byte	0
 2135 0129 00       		.byte	0
 2136 012a 13       		.uleb128 0x13
 2137 012b 2E       		.uleb128 0x2e
 2138 012c 01       		.byte	0x1
 2139 012d 3F       		.uleb128 0x3f
 2140 012e 19       		.uleb128 0x19
 2141 012f 03       		.uleb128 0x3
 2142 0130 0E       		.uleb128 0xe
 2143 0131 3A       		.uleb128 0x3a
 2144 0132 0B       		.uleb128 0xb
 2145 0133 3B       		.uleb128 0x3b
 2146 0134 05       		.uleb128 0x5
 2147 0135 27       		.uleb128 0x27
 2148 0136 19       		.uleb128 0x19
 2149 0137 11       		.uleb128 0x11
 2150 0138 01       		.uleb128 0x1
 2151 0139 12       		.uleb128 0x12
 2152 013a 06       		.uleb128 0x6
 2153 013b 40       		.uleb128 0x40
 2154 013c 18       		.uleb128 0x18
 2155 013d 9742     		.uleb128 0x2117
 2156 013f 19       		.uleb128 0x19
 2157 0140 01       		.uleb128 0x1
 2158 0141 13       		.uleb128 0x13
 2159 0142 00       		.byte	0
 2160 0143 00       		.byte	0
 2161 0144 14       		.uleb128 0x14
 2162 0145 2E       		.uleb128 0x2e
 2163 0146 01       		.byte	0x1
 2164 0147 3F       		.uleb128 0x3f
 2165 0148 19       		.uleb128 0x19
 2166 0149 03       		.uleb128 0x3
 2167 014a 0E       		.uleb128 0xe
 2168 014b 3A       		.uleb128 0x3a
 2169 014c 0B       		.uleb128 0xb
 2170 014d 3B       		.uleb128 0x3b
 2171 014e 05       		.uleb128 0x5
 2172 014f 27       		.uleb128 0x27
 2173 0150 19       		.uleb128 0x19
 2174 0151 11       		.uleb128 0x11
 2175 0152 01       		.uleb128 0x1
 2176 0153 12       		.uleb128 0x12
 2177 0154 06       		.uleb128 0x6
 2178 0155 40       		.uleb128 0x40
 2179 0156 18       		.uleb128 0x18
 2180 0157 9642     		.uleb128 0x2116
 2181 0159 19       		.uleb128 0x19
 2182 015a 01       		.uleb128 0x1
 2183 015b 13       		.uleb128 0x13
 2184 015c 00       		.byte	0
 2185 015d 00       		.byte	0
 2186 015e 15       		.uleb128 0x15
 2187 015f 34       		.uleb128 0x34
 2188 0160 00       		.byte	0
ARM GAS  C:\Users\PC69\AppData\Local\Temp\ccZV2CAg.s 			page 55


 2189 0161 03       		.uleb128 0x3
 2190 0162 0E       		.uleb128 0xe
 2191 0163 3A       		.uleb128 0x3a
 2192 0164 0B       		.uleb128 0xb
 2193 0165 3B       		.uleb128 0x3b
 2194 0166 0B       		.uleb128 0xb
 2195 0167 49       		.uleb128 0x49
 2196 0168 13       		.uleb128 0x13
 2197 0169 3F       		.uleb128 0x3f
 2198 016a 19       		.uleb128 0x19
 2199 016b 02       		.uleb128 0x2
 2200 016c 18       		.uleb128 0x18
 2201 016d 00       		.byte	0
 2202 016e 00       		.byte	0
 2203 016f 00       		.byte	0
 2204              		.section	.debug_aranges,"",%progbits
 2205 0000 A4000000 		.4byte	0xa4
 2206 0004 0200     		.2byte	0x2
 2207 0006 00000000 		.4byte	.Ldebug_info0
 2208 000a 04       		.byte	0x4
 2209 000b 00       		.byte	0
 2210 000c 0000     		.2byte	0
 2211 000e 0000     		.2byte	0
 2212 0010 00000000 		.4byte	.LFB0
 2213 0014 24000000 		.4byte	.LFE0-.LFB0
 2214 0018 00000000 		.4byte	.LFB1
 2215 001c 10020000 		.4byte	.LFE1-.LFB1
 2216 0020 00000000 		.4byte	.LFB2
 2217 0024 28000000 		.4byte	.LFE2-.LFB2
 2218 0028 00000000 		.4byte	.LFB3
 2219 002c 18000000 		.4byte	.LFE3-.LFB3
 2220 0030 00000000 		.4byte	.LFB4
 2221 0034 1C000000 		.4byte	.LFE4-.LFB4
 2222 0038 00000000 		.4byte	.LFB5
 2223 003c 1C000000 		.4byte	.LFE5-.LFB5
 2224 0040 00000000 		.4byte	.LFB6
 2225 0044 48000000 		.4byte	.LFE6-.LFB6
 2226 0048 00000000 		.4byte	.LFB7
 2227 004c 44000000 		.4byte	.LFE7-.LFB7
 2228 0050 00000000 		.4byte	.LFB8
 2229 0054 1C000000 		.4byte	.LFE8-.LFB8
 2230 0058 00000000 		.4byte	.LFB9
 2231 005c 30000000 		.4byte	.LFE9-.LFB9
 2232 0060 00000000 		.4byte	.LFB10
 2233 0064 2C000000 		.4byte	.LFE10-.LFB10
 2234 0068 00000000 		.4byte	.LFB11
 2235 006c 1C000000 		.4byte	.LFE11-.LFB11
 2236 0070 00000000 		.4byte	.LFB12
 2237 0074 1C000000 		.4byte	.LFE12-.LFB12
 2238 0078 00000000 		.4byte	.LFB13
 2239 007c 30000000 		.4byte	.LFE13-.LFB13
 2240 0080 00000000 		.4byte	.LFB14
 2241 0084 2C000000 		.4byte	.LFE14-.LFB14
 2242 0088 00000000 		.4byte	.LFB15
 2243 008c A4000000 		.4byte	.LFE15-.LFB15
 2244 0090 00000000 		.4byte	.LFB16
 2245 0094 90000000 		.4byte	.LFE16-.LFB16
ARM GAS  C:\Users\PC69\AppData\Local\Temp\ccZV2CAg.s 			page 56


 2246 0098 00000000 		.4byte	.LFB17
 2247 009c 80000000 		.4byte	.LFE17-.LFB17
 2248 00a0 00000000 		.4byte	0
 2249 00a4 00000000 		.4byte	0
 2250              		.section	.debug_ranges,"",%progbits
 2251              	.Ldebug_ranges0:
 2252 0000 00000000 		.4byte	.LFB0
 2253 0004 24000000 		.4byte	.LFE0
 2254 0008 00000000 		.4byte	.LFB1
 2255 000c 10020000 		.4byte	.LFE1
 2256 0010 00000000 		.4byte	.LFB2
 2257 0014 28000000 		.4byte	.LFE2
 2258 0018 00000000 		.4byte	.LFB3
 2259 001c 18000000 		.4byte	.LFE3
 2260 0020 00000000 		.4byte	.LFB4
 2261 0024 1C000000 		.4byte	.LFE4
 2262 0028 00000000 		.4byte	.LFB5
 2263 002c 1C000000 		.4byte	.LFE5
 2264 0030 00000000 		.4byte	.LFB6
 2265 0034 48000000 		.4byte	.LFE6
 2266 0038 00000000 		.4byte	.LFB7
 2267 003c 44000000 		.4byte	.LFE7
 2268 0040 00000000 		.4byte	.LFB8
 2269 0044 1C000000 		.4byte	.LFE8
 2270 0048 00000000 		.4byte	.LFB9
 2271 004c 30000000 		.4byte	.LFE9
 2272 0050 00000000 		.4byte	.LFB10
 2273 0054 2C000000 		.4byte	.LFE10
 2274 0058 00000000 		.4byte	.LFB11
 2275 005c 1C000000 		.4byte	.LFE11
 2276 0060 00000000 		.4byte	.LFB12
 2277 0064 1C000000 		.4byte	.LFE12
 2278 0068 00000000 		.4byte	.LFB13
 2279 006c 30000000 		.4byte	.LFE13
 2280 0070 00000000 		.4byte	.LFB14
 2281 0074 2C000000 		.4byte	.LFE14
 2282 0078 00000000 		.4byte	.LFB15
 2283 007c A4000000 		.4byte	.LFE15
 2284 0080 00000000 		.4byte	.LFB16
 2285 0084 90000000 		.4byte	.LFE16
 2286 0088 00000000 		.4byte	.LFB17
 2287 008c 80000000 		.4byte	.LFE17
 2288 0090 00000000 		.4byte	0
 2289 0094 00000000 		.4byte	0
 2290              		.section	.debug_line,"",%progbits
 2291              	.Ldebug_line0:
 2292 0000 A5020000 		.section	.debug_str,"MS",%progbits,1
 2292      02004C00 
 2292      00000201 
 2292      FB0E0D00 
 2292      01010101 
 2293              	.LASF58:
 2294 0000 4144435F 		.ascii	"ADC_SAR_Seq_1_offset\000"
 2294      5341525F 
 2294      5365715F 
 2294      315F6F66 
 2294      66736574 
ARM GAS  C:\Users\PC69\AppData\Local\Temp\ccZV2CAg.s 			page 57


 2295              	.LASF10:
 2296 0015 75696E74 		.ascii	"uint16\000"
 2296      313600
 2297              	.LASF36:
 2298 001c 4144435F 		.ascii	"ADC_SAR_Seq_1_Init\000"
 2298      5341525F 
 2298      5365715F 
 2298      315F496E 
 2298      697400
 2299              	.LASF48:
 2300 002f 61646347 		.ascii	"adcGain\000"
 2300      61696E00 
 2301              	.LASF23:
 2302 0037 636F756E 		.ascii	"counts\000"
 2302      747300
 2303              	.LASF28:
 2304 003e 4144435F 		.ascii	"ADC_SAR_Seq_1_StartConvert\000"
 2304      5341525F 
 2304      5365715F 
 2304      315F5374 
 2304      61727443 
 2305              	.LASF44:
 2306 0059 4144435F 		.ascii	"ADC_SAR_Seq_1_SetSatMask\000"
 2306      5341525F 
 2306      5365715F 
 2306      315F5365 
 2306      74536174 
 2307              	.LASF25:
 2308 0072 4144435F 		.ascii	"ADC_SAR_Seq_1_Start\000"
 2308      5341525F 
 2308      5365715F 
 2308      315F5374 
 2308      61727400 
 2309              	.LASF7:
 2310 0086 6C6F6E67 		.ascii	"long long unsigned int\000"
 2310      206C6F6E 
 2310      6720756E 
 2310      7369676E 
 2310      65642069 
 2311              	.LASF26:
 2312 009d 4144435F 		.ascii	"ADC_SAR_Seq_1_Enable\000"
 2312      5341525F 
 2312      5365715F 
 2312      315F456E 
 2312      61626C65 
 2313              	.LASF24:
 2314 00b2 4144435F 		.ascii	"ADC_SAR_Seq_1_InputsPlacement\000"
 2314      5341525F 
 2314      5365715F 
 2314      315F496E 
 2314      70757473 
 2315              	.LASF32:
 2316 00d0 4144435F 		.ascii	"ADC_SAR_Seq_1_GetResult16\000"
 2316      5341525F 
 2316      5365715F 
 2316      315F4765 
 2316      74526573 
ARM GAS  C:\Users\PC69\AppData\Local\Temp\ccZV2CAg.s 			page 58


 2317              	.LASF6:
 2318 00ea 6C6F6E67 		.ascii	"long long int\000"
 2318      206C6F6E 
 2318      6720696E 
 2318      7400
 2319              	.LASF0:
 2320 00f8 7369676E 		.ascii	"signed char\000"
 2320      65642063 
 2320      68617200 
 2321              	.LASF41:
 2322 0104 4144435F 		.ascii	"ADC_SAR_Seq_1_SetHighLimit\000"
 2322      5341525F 
 2322      5365715F 
 2322      315F5365 
 2322      74486967 
 2323              	.LASF13:
 2324 011f 696E7433 		.ascii	"int32\000"
 2324      3200
 2325              	.LASF52:
 2326 0125 4144435F 		.ascii	"ADC_SAR_Seq_1_CountsTo_uVolts\000"
 2326      5341525F 
 2326      5365715F 
 2326      315F436F 
 2326      756E7473 
 2327              	.LASF4:
 2328 0143 6C6F6E67 		.ascii	"long int\000"
 2328      20696E74 
 2328      00
 2329              	.LASF9:
 2330 014c 75696E74 		.ascii	"uint8\000"
 2330      3800
 2331              	.LASF16:
 2332 0152 646F7562 		.ascii	"double\000"
 2332      6C6500
 2333              	.LASF11:
 2334 0159 75696E74 		.ascii	"uint32\000"
 2334      333200
 2335              	.LASF38:
 2336 0160 6D61736B 		.ascii	"mask\000"
 2336      00
 2337              	.LASF49:
 2338 0165 4144435F 		.ascii	"ADC_SAR_Seq_1_CountsTo_mVolts\000"
 2338      5341525F 
 2338      5365715F 
 2338      315F436F 
 2338      756E7473 
 2339              	.LASF33:
 2340 0183 7265744D 		.ascii	"retMode\000"
 2340      6F646500 
 2341              	.LASF57:
 2342 018b 4144435F 		.ascii	"ADC_SAR_Seq_1_initVar\000"
 2342      5341525F 
 2342      5365715F 
 2342      315F696E 
 2342      69745661 
 2343              	.LASF8:
 2344 01a1 756E7369 		.ascii	"unsigned int\000"
ARM GAS  C:\Users\PC69\AppData\Local\Temp\ccZV2CAg.s 			page 59


 2344      676E6564 
 2344      20696E74 
 2344      00
 2345              	.LASF53:
 2346 01ae 75566F6C 		.ascii	"uVolts\000"
 2346      747300
 2347              	.LASF5:
 2348 01b5 6C6F6E67 		.ascii	"long unsigned int\000"
 2348      20756E73 
 2348      69676E65 
 2348      6420696E 
 2348      7400
 2349              	.LASF55:
 2350 01c7 766F6C74 		.ascii	"volts\000"
 2350      7300
 2351              	.LASF22:
 2352 01cd 746D7052 		.ascii	"tmpRegVal\000"
 2352      65675661 
 2352      6C00
 2353              	.LASF3:
 2354 01d7 73686F72 		.ascii	"short unsigned int\000"
 2354      7420756E 
 2354      7369676E 
 2354      65642069 
 2354      6E7400
 2355              	.LASF56:
 2356 01ea 4144435F 		.ascii	"ADC_SAR_Seq_1_channelsConfig\000"
 2356      5341525F 
 2356      5365715F 
 2356      315F6368 
 2356      616E6E65 
 2357              	.LASF51:
 2358 0207 6D566F6C 		.ascii	"mVolts\000"
 2358      747300
 2359              	.LASF19:
 2360 020e 72656733 		.ascii	"reg32\000"
 2360      3200
 2361              	.LASF61:
 2362 0214 2E5C4765 		.ascii	".\\Generated_Source\\PSoC4\\ADC_SAR_Seq_1.c\000"
 2362      6E657261 
 2362      7465645F 
 2362      536F7572 
 2362      63655C50 
 2363              	.LASF14:
 2364 023d 666C6F61 		.ascii	"float32\000"
 2364      74333200 
 2365              	.LASF20:
 2366 0245 73697A65 		.ascii	"sizetype\000"
 2366      74797065 
 2366      00
 2367              	.LASF40:
 2368 024e 6C6F774C 		.ascii	"lowLimit\000"
 2368      696D6974 
 2368      00
 2369              	.LASF31:
 2370 0257 4144435F 		.ascii	"ADC_SAR_Seq_1_IsEndConversion\000"
 2370      5341525F 
ARM GAS  C:\Users\PC69\AppData\Local\Temp\ccZV2CAg.s 			page 60


 2370      5365715F 
 2370      315F4973 
 2370      456E6443 
 2371              	.LASF29:
 2372 0275 4144435F 		.ascii	"ADC_SAR_Seq_1_StopConvert\000"
 2372      5341525F 
 2372      5365715F 
 2372      315F5374 
 2372      6F70436F 
 2373              	.LASF17:
 2374 028f 696E7436 		.ascii	"int64\000"
 2374      3400
 2375              	.LASF15:
 2376 0295 666C6F61 		.ascii	"float\000"
 2376      7400
 2377              	.LASF47:
 2378 029b 4144435F 		.ascii	"ADC_SAR_Seq_1_SetGain\000"
 2378      5341525F 
 2378      5365715F 
 2378      315F5365 
 2378      74476169 
 2379              	.LASF27:
 2380 02b1 4144435F 		.ascii	"ADC_SAR_Seq_1_Stop\000"
 2380      5341525F 
 2380      5365715F 
 2380      315F5374 
 2380      6F7000
 2381              	.LASF42:
 2382 02c4 68696768 		.ascii	"highLimit\000"
 2382      4C696D69 
 2382      7400
 2383              	.LASF1:
 2384 02ce 756E7369 		.ascii	"unsigned char\000"
 2384      676E6564 
 2384      20636861 
 2384      7200
 2385              	.LASF2:
 2386 02dc 73686F72 		.ascii	"short int\000"
 2386      7420696E 
 2386      7400
 2387              	.LASF54:
 2388 02e6 4144435F 		.ascii	"ADC_SAR_Seq_1_CountsTo_Volts\000"
 2388      5341525F 
 2388      5365715F 
 2388      315F436F 
 2388      756E7473 
 2389              	.LASF62:
 2390 0303 433A5C43 		.ascii	"C:\\Cypress\\IR_sensor_controller\\SCB_Bootloader\\"
 2390      79707265 
 2390      73735C49 
 2390      525F7365 
 2390      6E736F72 
 2391 0332 49525F73 		.ascii	"IR_sensor_controller.cydsn\000"
 2391      656E736F 
 2391      725F636F 
 2391      6E74726F 
 2391      6C6C6572 
ARM GAS  C:\Users\PC69\AppData\Local\Temp\ccZV2CAg.s 			page 61


 2392              	.LASF37:
 2393 034d 4144435F 		.ascii	"ADC_SAR_Seq_1_SetChanMask\000"
 2393      5341525F 
 2393      5365715F 
 2393      315F5365 
 2393      74436861 
 2394              	.LASF21:
 2395 0367 63684E75 		.ascii	"chNum\000"
 2395      6D00
 2396              	.LASF34:
 2397 036d 6368616E 		.ascii	"chan\000"
 2397      00
 2398              	.LASF18:
 2399 0372 63686172 		.ascii	"char\000"
 2399      00
 2400              	.LASF39:
 2401 0377 4144435F 		.ascii	"ADC_SAR_Seq_1_SetLowLimit\000"
 2401      5341525F 
 2401      5365715F 
 2401      315F5365 
 2401      744C6F77 
 2402              	.LASF46:
 2403 0391 6F666673 		.ascii	"offset\000"
 2403      657400
 2404              	.LASF50:
 2405 0398 61646343 		.ascii	"adcCounts\000"
 2405      6F756E74 
 2405      7300
 2406              	.LASF59:
 2407 03a2 4144435F 		.ascii	"ADC_SAR_Seq_1_countsPer10Volt\000"
 2407      5341525F 
 2407      5365715F 
 2407      315F636F 
 2407      756E7473 
 2408              	.LASF30:
 2409 03c0 73746174 		.ascii	"status\000"
 2409      757300
 2410              	.LASF45:
 2411 03c7 4144435F 		.ascii	"ADC_SAR_Seq_1_SetOffset\000"
 2411      5341525F 
 2411      5365715F 
 2411      315F5365 
 2411      744F6666 
 2412              	.LASF12:
 2413 03df 696E7431 		.ascii	"int16\000"
 2413      3600
 2414              	.LASF60:
 2415 03e5 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 2415      4320342E 
 2415      392E3320 
 2415      32303135 
 2415      30333033 
 2416 0418 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0 -mthumb -g -O"
 2416      20726576 
 2416      6973696F 
 2416      6E203232 
 2416      31323230 
ARM GAS  C:\Users\PC69\AppData\Local\Temp\ccZV2CAg.s 			page 62


 2417 044b 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 2417      66756E63 
 2417      74696F6E 
 2417      2D736563 
 2417      74696F6E 
 2418              	.LASF43:
 2419 0473 4144435F 		.ascii	"ADC_SAR_Seq_1_SetLimitMask\000"
 2419      5341525F 
 2419      5365715F 
 2419      315F5365 
 2419      744C696D 
 2420              	.LASF35:
 2421 048e 72657375 		.ascii	"result\000"
 2421      6C7400
 2422              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
