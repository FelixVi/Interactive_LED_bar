ARM GAS  C:\Users\PC69\AppData\Local\Temp\cckxpNkZ.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"ADC.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	ADC_initVar
  18              		.bss
  19              		.type	ADC_initVar, %object
  20              		.size	ADC_initVar, 1
  21              	ADC_initVar:
  22 0000 00       		.space	1
  23              		.comm	ADC_offset,16,4
  24              		.comm	ADC_countsPer10Volt,32,4
  25              		.section	.rodata
  26              		.align	2
  27              		.type	ADC_channelsConfig, %object
  28              		.size	ADC_channelsConfig, 32
  29              	ADC_channelsConfig:
  30 0000 00040000 		.word	1024
  31 0004 00040000 		.word	1024
  32 0008 00040000 		.word	1024
  33 000c 00040000 		.word	1024
  34 0010 00040000 		.word	1024
  35 0014 00040000 		.word	1024
  36 0018 00040000 		.word	1024
  37 001c 00040000 		.word	1024
  38              		.section	.text.ADC_Start,"ax",%progbits
  39              		.align	2
  40              		.global	ADC_Start
  41              		.code	16
  42              		.thumb_func
  43              		.type	ADC_Start, %function
  44              	ADC_Start:
  45              	.LFB0:
  46              		.file 1 ".\\Generated_Source\\PSoC4\\ADC.c"
   1:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC4/ADC.c **** * File Name: ADC.c
   3:.\Generated_Source\PSoC4/ADC.c **** * Version 2.20
   4:.\Generated_Source\PSoC4/ADC.c **** *
   5:.\Generated_Source\PSoC4/ADC.c **** * Description:
   6:.\Generated_Source\PSoC4/ADC.c **** *  This file provides the source code to the API for the Sequencing Successive
   7:.\Generated_Source\PSoC4/ADC.c **** *  Approximation ADC Component Component.
   8:.\Generated_Source\PSoC4/ADC.c **** *
   9:.\Generated_Source\PSoC4/ADC.c **** * Note:
  10:.\Generated_Source\PSoC4/ADC.c **** *
  11:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
ARM GAS  C:\Users\PC69\AppData\Local\Temp\cckxpNkZ.s 			page 2


  12:.\Generated_Source\PSoC4/ADC.c **** * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  13:.\Generated_Source\PSoC4/ADC.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:.\Generated_Source\PSoC4/ADC.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:.\Generated_Source\PSoC4/ADC.c **** * the software package with which this file was provided.
  16:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  17:.\Generated_Source\PSoC4/ADC.c **** 
  18:.\Generated_Source\PSoC4/ADC.c **** #include "ADC.h"
  19:.\Generated_Source\PSoC4/ADC.c **** 
  20:.\Generated_Source\PSoC4/ADC.c **** 
  21:.\Generated_Source\PSoC4/ADC.c **** /***************************************
  22:.\Generated_Source\PSoC4/ADC.c **** * Global data allocation
  23:.\Generated_Source\PSoC4/ADC.c **** ***************************************/
  24:.\Generated_Source\PSoC4/ADC.c **** uint8 ADC_initVar = 0u;
  25:.\Generated_Source\PSoC4/ADC.c **** volatile int16 ADC_offset[ADC_TOTAL_CHANNELS_NUM];
  26:.\Generated_Source\PSoC4/ADC.c **** volatile int32 ADC_countsPer10Volt[ADC_TOTAL_CHANNELS_NUM];   /* Gain compensation */
  27:.\Generated_Source\PSoC4/ADC.c **** 
  28:.\Generated_Source\PSoC4/ADC.c **** 
  29:.\Generated_Source\PSoC4/ADC.c **** /***************************************
  30:.\Generated_Source\PSoC4/ADC.c **** * Local data allocation
  31:.\Generated_Source\PSoC4/ADC.c **** ***************************************/
  32:.\Generated_Source\PSoC4/ADC.c **** /* Channels configuration generated by customiser */
  33:.\Generated_Source\PSoC4/ADC.c **** static const uint32 CYCODE ADC_channelsConfig[] = { 0x00000400u, 0x00000400u, 0x00000400u, 0x000004
  34:.\Generated_Source\PSoC4/ADC.c ****  0x00000400u, 0x00000400u, 0x00000400u };
  35:.\Generated_Source\PSoC4/ADC.c **** 
  36:.\Generated_Source\PSoC4/ADC.c **** 
  37:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  38:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Start
  39:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  40:.\Generated_Source\PSoC4/ADC.c **** *
  41:.\Generated_Source\PSoC4/ADC.c **** * Summary:
  42:.\Generated_Source\PSoC4/ADC.c **** *  Performs all required initialization for this component
  43:.\Generated_Source\PSoC4/ADC.c **** *  and enables the power. The power will be set to the appropriate
  44:.\Generated_Source\PSoC4/ADC.c **** *  power based on the clock frequency.
  45:.\Generated_Source\PSoC4/ADC.c **** *
  46:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
  47:.\Generated_Source\PSoC4/ADC.c **** *  None.
  48:.\Generated_Source\PSoC4/ADC.c **** *
  49:.\Generated_Source\PSoC4/ADC.c **** * Return:
  50:.\Generated_Source\PSoC4/ADC.c **** *  None.
  51:.\Generated_Source\PSoC4/ADC.c **** *
  52:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
  53:.\Generated_Source\PSoC4/ADC.c **** *  The ADC_initVar variable is used to indicate when/if initial
  54:.\Generated_Source\PSoC4/ADC.c **** *  configuration of this component has happened. The variable is initialized to
  55:.\Generated_Source\PSoC4/ADC.c **** *  zero and set to 1 the first time ADC_Start() is called. This allows for
  56:.\Generated_Source\PSoC4/ADC.c **** *  component Re-Start without re-initialization in all subsequent calls to the
  57:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Start() routine.
  58:.\Generated_Source\PSoC4/ADC.c **** *  If re-initialization of the component is required the variable should be set
  59:.\Generated_Source\PSoC4/ADC.c **** *  to zero before call of ADC_Start() routine, or the user may call
  60:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Init() and ADC_Enable() as done in the
  61:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Start() routine.
  62:.\Generated_Source\PSoC4/ADC.c **** *
  63:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  64:.\Generated_Source\PSoC4/ADC.c **** void ADC_Start(void)
  65:.\Generated_Source\PSoC4/ADC.c **** {
  47              		.loc 1 65 0
  48              		.cfi_startproc
  49 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\PC69\AppData\Local\Temp\cckxpNkZ.s 			page 3


  50              		.cfi_def_cfa_offset 8
  51              		.cfi_offset 7, -8
  52              		.cfi_offset 14, -4
  53 0002 00AF     		add	r7, sp, #0
  54              		.cfi_def_cfa_register 7
  66:.\Generated_Source\PSoC4/ADC.c ****     /* If not Initialized then initialize all required hardware and software */
  67:.\Generated_Source\PSoC4/ADC.c ****     if(ADC_initVar == 0u)
  55              		.loc 1 67 0
  56 0004 064B     		ldr	r3, .L3
  57 0006 1B78     		ldrb	r3, [r3]
  58 0008 002B     		cmp	r3, #0
  59 000a 04D1     		bne	.L2
  68:.\Generated_Source\PSoC4/ADC.c ****     {
  69:.\Generated_Source\PSoC4/ADC.c ****         ADC_Init();
  60              		.loc 1 69 0
  61 000c FFF7FEFF 		bl	ADC_Init
  70:.\Generated_Source\PSoC4/ADC.c ****         ADC_initVar = 1u;
  62              		.loc 1 70 0
  63 0010 034B     		ldr	r3, .L3
  64 0012 0122     		mov	r2, #1
  65 0014 1A70     		strb	r2, [r3]
  66              	.L2:
  71:.\Generated_Source\PSoC4/ADC.c ****     }
  72:.\Generated_Source\PSoC4/ADC.c ****     ADC_Enable();
  67              		.loc 1 72 0
  68 0016 FFF7FEFF 		bl	ADC_Enable
  73:.\Generated_Source\PSoC4/ADC.c **** }
  69              		.loc 1 73 0
  70 001a BD46     		mov	sp, r7
  71              		@ sp needed
  72 001c 80BD     		pop	{r7, pc}
  73              	.L4:
  74 001e C046     		.align	2
  75              	.L3:
  76 0020 00000000 		.word	ADC_initVar
  77              		.cfi_endproc
  78              	.LFE0:
  79              		.size	ADC_Start, .-ADC_Start
  80              		.section	.text.ADC_Init,"ax",%progbits
  81              		.align	2
  82              		.global	ADC_Init
  83              		.code	16
  84              		.thumb_func
  85              		.type	ADC_Init, %function
  86              	ADC_Init:
  87              	.LFB1:
  74:.\Generated_Source\PSoC4/ADC.c **** 
  75:.\Generated_Source\PSoC4/ADC.c **** 
  76:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  77:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Init
  78:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  79:.\Generated_Source\PSoC4/ADC.c **** *
  80:.\Generated_Source\PSoC4/ADC.c **** * Summary:
  81:.\Generated_Source\PSoC4/ADC.c **** *  Initialize component's parameters to the parameters set by user in the
  82:.\Generated_Source\PSoC4/ADC.c **** *  customizer of the component placed onto schematic. Usually called in
  83:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Start().
  84:.\Generated_Source\PSoC4/ADC.c **** *
ARM GAS  C:\Users\PC69\AppData\Local\Temp\cckxpNkZ.s 			page 4


  85:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
  86:.\Generated_Source\PSoC4/ADC.c **** *  None.
  87:.\Generated_Source\PSoC4/ADC.c **** *
  88:.\Generated_Source\PSoC4/ADC.c **** * Return:
  89:.\Generated_Source\PSoC4/ADC.c **** *  None.
  90:.\Generated_Source\PSoC4/ADC.c **** *
  91:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
  92:.\Generated_Source\PSoC4/ADC.c **** *  The ADC_offset variable is initialized.
  93:.\Generated_Source\PSoC4/ADC.c **** *
  94:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  95:.\Generated_Source\PSoC4/ADC.c **** void ADC_Init(void)
  96:.\Generated_Source\PSoC4/ADC.c **** {
  88              		.loc 1 96 0
  89              		.cfi_startproc
  90 0000 80B5     		push	{r7, lr}
  91              		.cfi_def_cfa_offset 8
  92              		.cfi_offset 7, -8
  93              		.cfi_offset 14, -4
  94 0002 84B0     		sub	sp, sp, #16
  95              		.cfi_def_cfa_offset 24
  96 0004 00AF     		add	r7, sp, #0
  97              		.cfi_def_cfa_register 7
  97:.\Generated_Source\PSoC4/ADC.c ****     uint32 chNum;
  98:.\Generated_Source\PSoC4/ADC.c ****     uint32 tmpRegVal;
  99:.\Generated_Source\PSoC4/ADC.c ****     int32 counts;
 100:.\Generated_Source\PSoC4/ADC.c **** 
 101:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 102:.\Generated_Source\PSoC4/ADC.c ****         static const uint8 CYCODE ADC_InputsPlacement[] =
 103:.\Generated_Source\PSoC4/ADC.c ****         {
 104:.\Generated_Source\PSoC4/ADC.c ****             (uint8)(ADC_cy_psoc4_sarmux_8__CH_0_PORT << 4u) |
 105:.\Generated_Source\PSoC4/ADC.c ****             (uint8)ADC_cy_psoc4_sarmux_8__CH_0_PIN
 106:.\Generated_Source\PSoC4/ADC.c ****             ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_1_PORT << 4u) |
 107:.\Generated_Source\PSoC4/ADC.c ****              (uint8)ADC_cy_psoc4_sarmux_8__CH_1_PIN
 108:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 2u)
 109:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_2_PORT << 4u) |
 110:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_2_PIN
 111:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 2u */
 112:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 3u)
 113:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_3_PORT << 4u) |
 114:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_3_PIN
 115:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 3u */
 116:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 4u)
 117:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_4_PORT << 4u) |
 118:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_4_PIN
 119:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 4u */
 120:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 5u)
 121:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_5_PORT << 4u) |
 122:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_5_PIN
 123:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 5u */
 124:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 6u)
 125:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_6_PORT << 4u) |
 126:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_6_PIN
 127:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 6u */
 128:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 7u)
 129:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_7_PORT << 4u) |
 130:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_7_PIN
 131:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 7u */
ARM GAS  C:\Users\PC69\AppData\Local\Temp\cckxpNkZ.s 			page 5


 132:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 8u)
 133:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_8_PORT << 4u) |
 134:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_8_PIN
 135:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 8u */
 136:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 9u)
 137:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_9_PORT << 4u) |
 138:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_9_PIN
 139:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 9u */
 140:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 10u)
 141:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_10_PORT << 4u) |
 142:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_10_PIN
 143:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 10u */
 144:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 11u)
 145:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_11_PORT << 4u) |
 146:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_11_PIN
 147:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 11u */
 148:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 12u)
 149:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_12_PORT << 4u) |
 150:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_12_PIN
 151:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 12u */
 152:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 13u)
 153:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_13_PORT << 4u) |
 154:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_13_PIN
 155:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 13u */
 156:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 14u)
 157:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_14_PORT << 4u) |
 158:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_14_PIN
 159:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 14u */
 160:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 15u)
 161:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_15_PORT << 4u) |
 162:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_15_PIN
 163:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 15u */
 164:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 16u)
 165:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_16_PORT << 4u) |
 166:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_16_PIN
 167:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 16u */
 168:.\Generated_Source\PSoC4/ADC.c ****         };
 169:.\Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
 170:.\Generated_Source\PSoC4/ADC.c **** 
 171:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_IRQ_REMOVE == 0u)
 172:.\Generated_Source\PSoC4/ADC.c ****         /* Start and set interrupt vector */
 173:.\Generated_Source\PSoC4/ADC.c ****         CyIntSetPriority(ADC_INTC_NUMBER, ADC_INTC_PRIOR_NUMBER);
  98              		.loc 1 173 0
  99 0006 0E20     		mov	r0, #14
 100 0008 0321     		mov	r1, #3
 101 000a FFF7FEFF 		bl	CyIntSetPriority
 174:.\Generated_Source\PSoC4/ADC.c ****         (void)CyIntSetVector(ADC_INTC_NUMBER, &ADC_ISR);
 102              		.loc 1 174 0
 103 000e 5C4B     		ldr	r3, .L17
 104 0010 0E20     		mov	r0, #14
 105 0012 191C     		mov	r1, r3
 106 0014 FFF7FEFF 		bl	CyIntSetVector
 175:.\Generated_Source\PSoC4/ADC.c ****     #endif   /* End ADC_IRQ_REMOVE */
 176:.\Generated_Source\PSoC4/ADC.c **** 
 177:.\Generated_Source\PSoC4/ADC.c ****     /* Init SAR and MUX registers */
 178:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = ADC_DEFAULT_EN_CHANNELS;
 107              		.loc 1 178 0
ARM GAS  C:\Users\PC69\AppData\Local\Temp\cckxpNkZ.s 			page 6


 108 0018 5A4B     		ldr	r3, .L17+4
 109 001a FF22     		mov	r2, #255
 110 001c 1A60     		str	r2, [r3]
 179:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 180:.\Generated_Source\PSoC4/ADC.c ****         /* Enable the SAR internal pump when global pump is enabled */
 181:.\Generated_Source\PSoC4/ADC.c ****         (((ADC_PUMP_CTRL_REG & ADC_PUMP_CTRL_ENABLED) != 0u) ? 
 111              		.loc 1 181 0
 112 001e 5A4B     		ldr	r3, .L17+8
 113 0020 1B68     		ldr	r3, [r3]
 179:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 114              		.loc 1 179 0
 115 0022 002B     		cmp	r3, #0
 116 0024 01DA     		bge	.L6
 179:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 117              		.loc 1 179 0 is_stmt 0 discriminator 1
 118 0026 5949     		ldr	r1, .L17+12
 119 0028 00E0     		b	.L7
 120              	.L6:
 179:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 121              		.loc 1 179 0 discriminator 2
 122 002a 5949     		ldr	r1, .L17+16
 123              	.L7:
 179:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 124              		.loc 1 179 0 discriminator 4
 125 002c 594B     		ldr	r3, .L17+20
 126 002e 594A     		ldr	r2, .L17+20
 127 0030 1268     		ldr	r2, [r2]
 128 0032 0A43     		orr	r2, r1
 129 0034 1A60     		str	r2, [r3]
 182:.\Generated_Source\PSoC4/ADC.c ****         ADC_BOOSTPUMP_EN : 0u);
 183:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_CTRL_REG = ADC_DEFAULT_SAMPLE_CTRL_REG_CFG;
 130              		.loc 1 183 0 is_stmt 1 discriminator 4
 131 0036 584B     		ldr	r3, .L17+24
 132 0038 584A     		ldr	r2, .L17+28
 133 003a 1A60     		str	r2, [r3]
 184:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG = ADC_DEFAULT_RANGE_THRES_REG_CFG;
 134              		.loc 1 184 0 discriminator 4
 135 003c 584B     		ldr	r3, .L17+32
 136 003e 594A     		ldr	r2, .L17+36
 137 0040 1A60     		str	r2, [r3]
 185:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_COND_REG  = ADC_COMPARE_MODE;
 138              		.loc 1 185 0 discriminator 4
 139 0042 594B     		ldr	r3, .L17+40
 140 0044 8022     		mov	r2, #128
 141 0046 1206     		lsl	r2, r2, #24
 142 0048 1A60     		str	r2, [r3]
 186:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME01_REG = ADC_DEFAULT_SAMPLE_TIME01_REG_CFG;
 143              		.loc 1 186 0 discriminator 4
 144 004a 584B     		ldr	r3, .L17+44
 145 004c 584A     		ldr	r2, .L17+48
 146 004e 1A60     		str	r2, [r3]
 187:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME23_REG = ADC_DEFAULT_SAMPLE_TIME23_REG_CFG;
 147              		.loc 1 187 0 discriminator 4
 148 0050 584B     		ldr	r3, .L17+52
 149 0052 594A     		ldr	r2, .L17+56
 150 0054 1A60     		str	r2, [r3]
 188:.\Generated_Source\PSoC4/ADC.c ****     
ARM GAS  C:\Users\PC69\AppData\Local\Temp\cckxpNkZ.s 			page 7


 189:.\Generated_Source\PSoC4/ADC.c ****     /* Connect Vm to VSSA when even one channel is single-ended or multiple channels configured */
 190:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_MUX_SWITCH0 != 0u)
 191:.\Generated_Source\PSoC4/ADC.c ****         ADC_MUX_SWITCH0_REG |= ADC_DEFAULT_MUX_SWITCH0;
 192:.\Generated_Source\PSoC4/ADC.c ****         /* Set MUX_HW_CTRL_VSSA in MUX_SWITCH_HW_CTRL when multiple channels enabled */
 193:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 194:.\Generated_Source\PSoC4/ADC.c ****             ADC_MUX_SWITCH_HW_CTRL_REG |= ADC_DEFAULT_MUX_SWITCH0;
 195:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_TOTAL_CHANNELS_NUM > 1u */
 196:.\Generated_Source\PSoC4/ADC.c ****     #endif /*ADC_CHANNELS_MODE !=0 */
 197:.\Generated_Source\PSoC4/ADC.c **** 
 198:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = 0u;
 151              		.loc 1 198 0 discriminator 4
 152 0056 594B     		ldr	r3, .L17+60
 153 0058 0022     		mov	r2, #0
 154 005a 1A60     		str	r2, [r3]
 199:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = 0u;
 155              		.loc 1 199 0 discriminator 4
 156 005c 584B     		ldr	r3, .L17+64
 157 005e 0022     		mov	r2, #0
 158 0060 1A60     		str	r2, [r3]
 200:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_INTR_MASK_REG = ADC_SAR_INTR_MASK;
 159              		.loc 1 200 0 discriminator 4
 160 0062 584B     		ldr	r3, .L17+68
 161 0064 0122     		mov	r2, #1
 162 0066 1A60     		str	r2, [r3]
 201:.\Generated_Source\PSoC4/ADC.c **** 
 202:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0)
 203:.\Generated_Source\PSoC4/ADC.c ****         ADC_ANA_TRIM_REG = ADC_TRIM_COEF;
 163              		.loc 1 203 0 discriminator 4
 164 0068 574B     		ldr	r3, .L17+72
 165 006a 0222     		mov	r2, #2
 166 006c 1A60     		str	r2, [r3]
 204:.\Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0) */
 205:.\Generated_Source\PSoC4/ADC.c **** 
 206:.\Generated_Source\PSoC4/ADC.c ****     /* Read and modify default configuration based on characterization */
 207:.\Generated_Source\PSoC4/ADC.c ****     tmpRegVal = ADC_SAR_DFT_CTRL_REG;
 167              		.loc 1 207 0 discriminator 4
 168 006e 574B     		ldr	r3, .L17+76
 169 0070 1B68     		ldr	r3, [r3]
 170 0072 7B60     		str	r3, [r7, #4]
 208:.\Generated_Source\PSoC4/ADC.c ****     tmpRegVal &= (uint32)~ADC_DCEN;
 171              		.loc 1 208 0 discriminator 4
 172 0074 7B68     		ldr	r3, [r7, #4]
 173 0076 564A     		ldr	r2, .L17+80
 174 0078 1340     		and	r3, r2
 175 007a 7B60     		str	r3, [r7, #4]
 209:.\Generated_Source\PSoC4/ADC.c ****     
 210:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0)
 211:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_NOMINAL_CLOCK_FREQ > (ADC_MAX_FREQUENCY / 2))
 212:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_SEL_CSEL_DFT_CHAR;
 213:.\Generated_Source\PSoC4/ADC.c ****         #else  /* clock speed < 9 Mhz */
 214:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DLY_INC;
 176              		.loc 1 214 0 discriminator 4
 177 007c 7B68     		ldr	r3, [r7, #4]
 178 007e 0122     		mov	r2, #1
 179 0080 1343     		orr	r3, r2
 180 0082 7B60     		str	r3, [r7, #4]
 215:.\Generated_Source\PSoC4/ADC.c ****         #endif /* clock speed > 9 Mhz */
ARM GAS  C:\Users\PC69\AppData\Local\Temp\cckxpNkZ.s 			page 8


 216:.\Generated_Source\PSoC4/ADC.c ****     #else
 217:.\Generated_Source\PSoC4/ADC.c ****         #if ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
 218:.\Generated_Source\PSoC4/ADC.c ****              (ADC_DEFAULT_VREF_SEL == ADC__INTERNALVREF))
 219:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DLY_INC;
 220:.\Generated_Source\PSoC4/ADC.c ****         #else
 221:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DCEN;
 222:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal &= (uint32)~ADC_DLY_INC;
 223:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
 224:.\Generated_Source\PSoC4/ADC.c ****                    (ADC_DEFAULT_VREF_SEL == ADC__INTERNALVREF)) */
 225:.\Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0) */
 226:.\Generated_Source\PSoC4/ADC.c ****     
 227:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_DFT_CTRL_REG = tmpRegVal;
 181              		.loc 1 227 0 discriminator 4
 182 0084 514B     		ldr	r3, .L17+76
 183 0086 7A68     		ldr	r2, [r7, #4]
 184 0088 1A60     		str	r2, [r3]
 228:.\Generated_Source\PSoC4/ADC.c **** 
 229:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_MAX_RESOLUTION != ADC_RESOLUTION_12)
 230:.\Generated_Source\PSoC4/ADC.c ****         ADC_WOUNDING_REG = ADC_ALT_WOUNDING;
 231:.\Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_MAX_RESOLUTION != ADC_RESOLUTION_12 */
 232:.\Generated_Source\PSoC4/ADC.c **** 
 233:.\Generated_Source\PSoC4/ADC.c ****     for(chNum = 0u; chNum < ADC_TOTAL_CHANNELS_NUM; chNum++)
 185              		.loc 1 233 0 discriminator 4
 186 008a 0023     		mov	r3, #0
 187 008c FB60     		str	r3, [r7, #12]
 188 008e 70E0     		b	.L8
 189              	.L16:
 234:.\Generated_Source\PSoC4/ADC.c ****     {
 235:.\Generated_Source\PSoC4/ADC.c ****         tmpRegVal = (ADC_channelsConfig[chNum] & ADC_CHANNEL_CONFIG_MASK);
 190              		.loc 1 235 0
 191 0090 504B     		ldr	r3, .L17+84
 192 0092 FA68     		ldr	r2, [r7, #12]
 193 0094 9200     		lsl	r2, r2, #2
 194 0096 D258     		ldr	r2, [r2, r3]
 195 0098 DC23     		mov	r3, #220
 196 009a 9B01     		lsl	r3, r3, #6
 197 009c 1340     		and	r3, r2
 198 009e 7B60     		str	r3, [r7, #4]
 236:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 237:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_InputsPlacement[chNum];
 199              		.loc 1 237 0
 200 00a0 4D4A     		ldr	r2, .L17+88
 201 00a2 FB68     		ldr	r3, [r7, #12]
 202 00a4 D318     		add	r3, r2, r3
 203 00a6 1B78     		ldrb	r3, [r3]
 204 00a8 1A1C     		mov	r2, r3
 205 00aa 7B68     		ldr	r3, [r7, #4]
 206 00ac 1343     		orr	r3, r2
 207 00ae 7B60     		str	r3, [r7, #4]
 238:.\Generated_Source\PSoC4/ADC.c ****         #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
 239:.\Generated_Source\PSoC4/ADC.c ****         
 240:.\Generated_Source\PSoC4/ADC.c ****         
 241:.\Generated_Source\PSoC4/ADC.c ****         /* When the part is limited to 10-bit then the SUB_RESOLUTION bit
 242:.\Generated_Source\PSoC4/ADC.c ****         *  will be ignored and the RESOLUTION bit selects between 10-bit
 243:.\Generated_Source\PSoC4/ADC.c ****         *  (0) and 8-bit (1) resolution.
 244:.\Generated_Source\PSoC4/ADC.c ****         */
 245:.\Generated_Source\PSoC4/ADC.c ****         #if((ADC_MAX_RESOLUTION != ADC_RESOLUTION_12) && \
ARM GAS  C:\Users\PC69\AppData\Local\Temp\cckxpNkZ.s 			page 9


 246:.\Generated_Source\PSoC4/ADC.c ****             (ADC_ALT_WOUNDING == ADC_WOUNDING_10BIT))
 247:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal &= (uint32)(~ADC_ALT_RESOLUTION_ON);
 248:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_MAX_RESOLUTION != ADC_RESOLUTION_12 */
 249:.\Generated_Source\PSoC4/ADC.c **** 
 250:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 251:.\Generated_Source\PSoC4/ADC.c ****         if(chNum < ADC_SEQUENCED_CHANNELS_NUM)
 252:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 253:.\Generated_Source\PSoC4/ADC.c ****         {
 254:.\Generated_Source\PSoC4/ADC.c ****             CY_SET_REG32((reg32 *)(ADC_SAR_CHAN_CONFIG_IND + (uint32)(chNum << 2)), tmpRegVal);
 208              		.loc 1 254 0
 209 00b0 FB68     		ldr	r3, [r7, #12]
 210 00b2 9B00     		lsl	r3, r3, #2
 211 00b4 494A     		ldr	r2, .L17+92
 212 00b6 9446     		mov	ip, r2
 213 00b8 6344     		add	r3, r3, ip
 214 00ba 7A68     		ldr	r2, [r7, #4]
 215 00bc 1A60     		str	r2, [r3]
 255:.\Generated_Source\PSoC4/ADC.c **** 
 256:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chNum] & ADC_IS_SATURATE_EN_MASK) != 0u)
 216              		.loc 1 256 0
 217 00be 454B     		ldr	r3, .L17+84
 218 00c0 FA68     		ldr	r2, [r7, #12]
 219 00c2 9200     		lsl	r2, r2, #2
 220 00c4 D358     		ldr	r3, [r2, r3]
 221 00c6 0122     		mov	r2, #1
 222 00c8 1340     		and	r3, r2
 223 00ca 09D0     		beq	.L9
 257:.\Generated_Source\PSoC4/ADC.c ****             {
 258:.\Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_SATURATE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 224              		.loc 1 258 0
 225 00cc 3B4B     		ldr	r3, .L17+60
 226 00ce 3B4A     		ldr	r2, .L17+60
 227 00d0 1268     		ldr	r2, [r2]
 228 00d2 F968     		ldr	r1, [r7, #12]
 229 00d4 0120     		mov	r0, #1
 230 00d6 8840     		lsl	r0, r0, r1
 231 00d8 011C     		mov	r1, r0
 232 00da 89B2     		uxth	r1, r1
 233 00dc 0A43     		orr	r2, r1
 234 00de 1A60     		str	r2, [r3]
 235              	.L9:
 259:.\Generated_Source\PSoC4/ADC.c ****             }
 260:.\Generated_Source\PSoC4/ADC.c **** 
 261:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chNum] & ADC_IS_RANGE_CTRL_EN_MASK) != 0u)
 236              		.loc 1 261 0
 237 00e0 3C4B     		ldr	r3, .L17+84
 238 00e2 FA68     		ldr	r2, [r7, #12]
 239 00e4 9200     		lsl	r2, r2, #2
 240 00e6 D358     		ldr	r3, [r2, r3]
 241 00e8 0222     		mov	r2, #2
 242 00ea 1340     		and	r3, r2
 243 00ec 09D0     		beq	.L10
 262:.\Generated_Source\PSoC4/ADC.c ****             {
 263:.\Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_RANGE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 244              		.loc 1 263 0
 245 00ee 344B     		ldr	r3, .L17+64
 246 00f0 334A     		ldr	r2, .L17+64
ARM GAS  C:\Users\PC69\AppData\Local\Temp\cckxpNkZ.s 			page 10


 247 00f2 1268     		ldr	r2, [r2]
 248 00f4 F968     		ldr	r1, [r7, #12]
 249 00f6 0120     		mov	r0, #1
 250 00f8 8840     		lsl	r0, r0, r1
 251 00fa 011C     		mov	r1, r0
 252 00fc 89B2     		uxth	r1, r1
 253 00fe 0A43     		orr	r2, r1
 254 0100 1A60     		str	r2, [r3]
 255              	.L10:
 264:.\Generated_Source\PSoC4/ADC.c ****             }
 265:.\Generated_Source\PSoC4/ADC.c ****         }
 266:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 267:.\Generated_Source\PSoC4/ADC.c ****             else
 268:.\Generated_Source\PSoC4/ADC.c ****             {
 269:.\Generated_Source\PSoC4/ADC.c ****                 CY_SET_REG32(ADC_SAR_INJ_CHAN_CONFIG_PTR, tmpRegVal | ADC_INJ_TAILGATING);
 270:.\Generated_Source\PSoC4/ADC.c **** 
 271:.\Generated_Source\PSoC4/ADC.c ****                 if((ADC_channelsConfig[chNum] & ADC_IS_SATURATE_EN_MASK) != 0u)
 272:.\Generated_Source\PSoC4/ADC.c ****                 {
 273:.\Generated_Source\PSoC4/ADC.c ****                     ADC_SAR_INTR_MASK_REG |= ADC_INJ_SATURATE_MASK;
 274:.\Generated_Source\PSoC4/ADC.c ****                 }
 275:.\Generated_Source\PSoC4/ADC.c **** 
 276:.\Generated_Source\PSoC4/ADC.c ****                 if((ADC_channelsConfig[chNum] & ADC_IS_RANGE_CTRL_EN_MASK) != 0u)
 277:.\Generated_Source\PSoC4/ADC.c ****                 {
 278:.\Generated_Source\PSoC4/ADC.c ****                     ADC_SAR_INTR_MASK_REG |= ADC_INJ_RANGE_MASK;
 279:.\Generated_Source\PSoC4/ADC.c ****                 }
 280:.\Generated_Source\PSoC4/ADC.c ****             }
 281:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 282:.\Generated_Source\PSoC4/ADC.c **** 
 283:.\Generated_Source\PSoC4/ADC.c ****         if((ADC_channelsConfig[chNum] & ADC_ALT_RESOLUTION_ON) != 0u)
 256              		.loc 1 283 0
 257 0102 344B     		ldr	r3, .L17+84
 258 0104 FA68     		ldr	r2, [r7, #12]
 259 0106 9200     		lsl	r2, r2, #2
 260 0108 D258     		ldr	r2, [r2, r3]
 261 010a 8023     		mov	r3, #128
 262 010c 9B00     		lsl	r3, r3, #2
 263 010e 1340     		and	r3, r2
 264 0110 03D0     		beq	.L11
 284:.\Generated_Source\PSoC4/ADC.c ****         {
 285:.\Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_DEFAULT_MAX_WRK_ALT;
 265              		.loc 1 285 0
 266 0112 8023     		mov	r3, #128
 267 0114 5B00     		lsl	r3, r3, #1
 268 0116 BB60     		str	r3, [r7, #8]
 269 0118 02E0     		b	.L12
 270              	.L11:
 286:.\Generated_Source\PSoC4/ADC.c ****         }
 287:.\Generated_Source\PSoC4/ADC.c ****         else
 288:.\Generated_Source\PSoC4/ADC.c ****         {
 289:.\Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_SAR_WRK_MAX_12BIT;
 271              		.loc 1 289 0
 272 011a 8023     		mov	r3, #128
 273 011c 5B01     		lsl	r3, r3, #5
 274 011e BB60     		str	r3, [r7, #8]
 275              	.L12:
 290:.\Generated_Source\PSoC4/ADC.c ****         }
 291:.\Generated_Source\PSoC4/ADC.c **** 
ARM GAS  C:\Users\PC69\AppData\Local\Temp\cckxpNkZ.s 			page 11


 292:.\Generated_Source\PSoC4/ADC.c ****         if((ADC_channelsConfig[chNum] & ADC_DIFFERENTIAL_EN) == 0u)
 276              		.loc 1 292 0
 277 0120 2C4B     		ldr	r3, .L17+84
 278 0122 FA68     		ldr	r2, [r7, #12]
 279 0124 9200     		lsl	r2, r2, #2
 280 0126 D258     		ldr	r2, [r2, r3]
 281 0128 8023     		mov	r3, #128
 282 012a 5B00     		lsl	r3, r3, #1
 283 012c 1340     		and	r3, r2
 284 012e 05D1     		bne	.L13
 293:.\Generated_Source\PSoC4/ADC.c ****         {
 294:.\Generated_Source\PSoC4/ADC.c ****             #if((ADC_DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED) && \
 295:.\Generated_Source\PSoC4/ADC.c ****                 (ADC_DEFAULT_NEG_INPUT_SEL == ADC__VREF))
 296:.\Generated_Source\PSoC4/ADC.c ****                 /* Set offset to the minus half scale to convert results to unsigned format */
 297:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = (int16)(counts / -2);
 298:.\Generated_Source\PSoC4/ADC.c ****             #else
 299:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = 0;
 285              		.loc 1 299 0
 286 0130 2B4B     		ldr	r3, .L17+96
 287 0132 FA68     		ldr	r2, [r7, #12]
 288 0134 5200     		lsl	r2, r2, #1
 289 0136 0021     		mov	r1, #0
 290 0138 D152     		strh	r1, [r2, r3]
 291 013a 04E0     		b	.L14
 292              	.L13:
 300:.\Generated_Source\PSoC4/ADC.c ****             #endif /* end DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED */
 301:.\Generated_Source\PSoC4/ADC.c ****         }
 302:.\Generated_Source\PSoC4/ADC.c ****         else    /* Differential channel */
 303:.\Generated_Source\PSoC4/ADC.c ****         {
 304:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC__FUNSIGNED)
 305:.\Generated_Source\PSoC4/ADC.c ****                 /* Set offset to the half scale to convert results to signed format */
 306:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = (int16)(counts / 2);
 307:.\Generated_Source\PSoC4/ADC.c ****             #else
 308:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = 0;
 293              		.loc 1 308 0
 294 013c 284B     		ldr	r3, .L17+96
 295 013e FA68     		ldr	r2, [r7, #12]
 296 0140 5200     		lsl	r2, r2, #1
 297 0142 0021     		mov	r1, #0
 298 0144 D152     		strh	r1, [r2, r3]
 299              	.L14:
 309:.\Generated_Source\PSoC4/ADC.c ****             #endif /* end ADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC__FUNSIGNED */
 310:.\Generated_Source\PSoC4/ADC.c ****         }
 311:.\Generated_Source\PSoC4/ADC.c ****         /* Calculate gain in counts per 10 volts with rounding */
 312:.\Generated_Source\PSoC4/ADC.c ****         ADC_countsPer10Volt[chNum] = (int16)(((counts * ADC_10MV_COUNTS) +
 300              		.loc 1 312 0 discriminator 2
 301 0146 BB68     		ldr	r3, [r7, #8]
 302 0148 264A     		ldr	r2, .L17+100
 303 014a 5343     		mul	r3, r2
 304 014c 8022     		mov	r2, #128
 305 014e D200     		lsl	r2, r2, #3
 306 0150 9446     		mov	ip, r2
 307 0152 6344     		add	r3, r3, ip
 313:.\Generated_Source\PSoC4/ADC.c ****                             ADC_DEFAULT_VREF_MV_VALUE) / (ADC_DEFAULT_VREF_MV_VALUE * 2));
 308              		.loc 1 313 0 discriminator 2
 309 0154 002B     		cmp	r3, #0
 310 0156 02DA     		bge	.L15
ARM GAS  C:\Users\PC69\AppData\Local\Temp\cckxpNkZ.s 			page 12


 311 0158 234A     		ldr	r2, .L17+104
 312 015a 9446     		mov	ip, r2
 313 015c 6344     		add	r3, r3, ip
 314              	.L15:
 315 015e DB12     		asr	r3, r3, #11
 312:.\Generated_Source\PSoC4/ADC.c ****                             ADC_DEFAULT_VREF_MV_VALUE) / (ADC_DEFAULT_VREF_MV_VALUE * 2));
 316              		.loc 1 312 0 discriminator 2
 317 0160 9BB2     		uxth	r3, r3
 318 0162 19B2     		sxth	r1, r3
 319 0164 214B     		ldr	r3, .L17+108
 320 0166 FA68     		ldr	r2, [r7, #12]
 321 0168 9200     		lsl	r2, r2, #2
 322 016a D150     		str	r1, [r2, r3]
 233:.\Generated_Source\PSoC4/ADC.c ****     {
 323              		.loc 1 233 0 discriminator 2
 324 016c FB68     		ldr	r3, [r7, #12]
 325 016e 0133     		add	r3, r3, #1
 326 0170 FB60     		str	r3, [r7, #12]
 327              	.L8:
 233:.\Generated_Source\PSoC4/ADC.c ****     {
 328              		.loc 1 233 0 is_stmt 0 discriminator 1
 329 0172 FB68     		ldr	r3, [r7, #12]
 330 0174 072B     		cmp	r3, #7
 331 0176 8BD9     		bls	.L16
 314:.\Generated_Source\PSoC4/ADC.c ****     }
 315:.\Generated_Source\PSoC4/ADC.c **** }
 332              		.loc 1 315 0 is_stmt 1
 333 0178 BD46     		mov	sp, r7
 334 017a 04B0     		add	sp, sp, #16
 335              		@ sp needed
 336 017c 80BD     		pop	{r7, pc}
 337              	.L18:
 338 017e C046     		.align	2
 339              	.L17:
 340 0180 00000000 		.word	ADC_ISR
 341 0184 20001A40 		.word	1075445792
 342 0188 80031A40 		.word	1075446656
 343 018c C02E1013 		.word	319827648
 344 0190 C02E0013 		.word	318779072
 345 0194 00001A40 		.word	1075445760
 346 0198 04001A40 		.word	1075445764
 347 019c F8000080 		.word	-2147483400
 348 01a0 18001A40 		.word	1075445784
 349 01a4 0000FF07 		.word	134152192
 350 01a8 1C001A40 		.word	1075445788
 351 01ac 10001A40 		.word	1075445776
 352 01b0 04000200 		.word	131076
 353 01b4 14001A40 		.word	1075445780
 354 01b8 02000200 		.word	131074
 355 01bc 28021A40 		.word	1075446312
 356 01c0 38021A40 		.word	1075446328
 357 01c4 18021A40 		.word	1075446296
 358 01c8 000F1A40 		.word	1075449600
 359 01cc 30001A40 		.word	1075445808
 360 01d0 FFFFFFDF 		.word	-536870913
 361 01d4 00000000 		.word	ADC_channelsConfig
 362 01d8 20000000 		.word	ADC_InputsPlacement.4714
ARM GAS  C:\Users\PC69\AppData\Local\Temp\cckxpNkZ.s 			page 13


 363 01dc 80001A40 		.word	1075445888
 364 01e0 00000000 		.word	ADC_offset
 365 01e4 10270000 		.word	10000
 366 01e8 FF070000 		.word	2047
 367 01ec 00000000 		.word	ADC_countsPer10Volt
 368              		.cfi_endproc
 369              	.LFE1:
 370              		.size	ADC_Init, .-ADC_Init
 371              		.section	.text.ADC_Enable,"ax",%progbits
 372              		.align	2
 373              		.global	ADC_Enable
 374              		.code	16
 375              		.thumb_func
 376              		.type	ADC_Enable, %function
 377              	ADC_Enable:
 378              	.LFB2:
 316:.\Generated_Source\PSoC4/ADC.c **** 
 317:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 318:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SAR_1_Enable
 319:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 320:.\Generated_Source\PSoC4/ADC.c **** *
 321:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 322:.\Generated_Source\PSoC4/ADC.c **** *  Enables the clock and analog power for SAR ADC.
 323:.\Generated_Source\PSoC4/ADC.c **** *
 324:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 325:.\Generated_Source\PSoC4/ADC.c **** *  None.
 326:.\Generated_Source\PSoC4/ADC.c **** *
 327:.\Generated_Source\PSoC4/ADC.c **** * Return:
 328:.\Generated_Source\PSoC4/ADC.c **** *  None.
 329:.\Generated_Source\PSoC4/ADC.c **** *
 330:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 331:.\Generated_Source\PSoC4/ADC.c **** void ADC_Enable(void)
 332:.\Generated_Source\PSoC4/ADC.c **** {
 379              		.loc 1 332 0
 380              		.cfi_startproc
 381 0000 80B5     		push	{r7, lr}
 382              		.cfi_def_cfa_offset 8
 383              		.cfi_offset 7, -8
 384              		.cfi_offset 14, -4
 385 0002 00AF     		add	r7, sp, #0
 386              		.cfi_def_cfa_register 7
 333:.\Generated_Source\PSoC4/ADC.c ****     if (0u == (ADC_SAR_CTRL_REG & ADC_ENABLE))
 387              		.loc 1 333 0
 388 0004 074B     		ldr	r3, .L21
 389 0006 1B68     		ldr	r3, [r3]
 390 0008 002B     		cmp	r3, #0
 391 000a 09DB     		blt	.L19
 334:.\Generated_Source\PSoC4/ADC.c ****     {
 335:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_CY_SAR_IP_VER != ADC_CY_SAR_IP_VER0)
 336:.\Generated_Source\PSoC4/ADC.c **** 
 337:.\Generated_Source\PSoC4/ADC.c ****             while (0u != (ADC_SAR_STATUS_REG & ADC_STATUS_BUSY))
 338:.\Generated_Source\PSoC4/ADC.c ****             {
 339:.\Generated_Source\PSoC4/ADC.c ****                 /* wait for SAR to go idle to avoid deadlock */
 340:.\Generated_Source\PSoC4/ADC.c ****             }
 341:.\Generated_Source\PSoC4/ADC.c ****         #endif /* (ADC_CY_SAR_IP_VER != ADC_CY_SAR_IP_VER0) */
 342:.\Generated_Source\PSoC4/ADC.c ****         
 343:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_CTRL_REG |= ADC_ENABLE;
ARM GAS  C:\Users\PC69\AppData\Local\Temp\cckxpNkZ.s 			page 14


 392              		.loc 1 343 0
 393 000c 054B     		ldr	r3, .L21
 394 000e 054A     		ldr	r2, .L21
 395 0010 1268     		ldr	r2, [r2]
 396 0012 8021     		mov	r1, #128
 397 0014 0906     		lsl	r1, r1, #24
 398 0016 0A43     		orr	r2, r1
 399 0018 1A60     		str	r2, [r3]
 344:.\Generated_Source\PSoC4/ADC.c ****         
 345:.\Generated_Source\PSoC4/ADC.c ****         /* The block is ready to use 10 us after the enable signal is set high. */
 346:.\Generated_Source\PSoC4/ADC.c ****         CyDelayUs(ADC_10US_DELAY);         
 400              		.loc 1 346 0
 401 001a 0A20     		mov	r0, #10
 402 001c FFF7FEFF 		bl	CyDelayUs
 403              	.L19:
 347:.\Generated_Source\PSoC4/ADC.c ****     }
 348:.\Generated_Source\PSoC4/ADC.c **** }
 404              		.loc 1 348 0
 405 0020 BD46     		mov	sp, r7
 406              		@ sp needed
 407 0022 80BD     		pop	{r7, pc}
 408              	.L22:
 409              		.align	2
 410              	.L21:
 411 0024 00001A40 		.word	1075445760
 412              		.cfi_endproc
 413              	.LFE2:
 414              		.size	ADC_Enable, .-ADC_Enable
 415              		.section	.text.ADC_Stop,"ax",%progbits
 416              		.align	2
 417              		.global	ADC_Stop
 418              		.code	16
 419              		.thumb_func
 420              		.type	ADC_Stop, %function
 421              	ADC_Stop:
 422              	.LFB3:
 349:.\Generated_Source\PSoC4/ADC.c **** 
 350:.\Generated_Source\PSoC4/ADC.c **** 
 351:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 352:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Stop
 353:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 354:.\Generated_Source\PSoC4/ADC.c **** *
 355:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 356:.\Generated_Source\PSoC4/ADC.c **** *  This function stops ADC conversions and puts the ADC into its lowest power
 357:.\Generated_Source\PSoC4/ADC.c **** *  mode.
 358:.\Generated_Source\PSoC4/ADC.c **** *
 359:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 360:.\Generated_Source\PSoC4/ADC.c **** *  None.
 361:.\Generated_Source\PSoC4/ADC.c **** *
 362:.\Generated_Source\PSoC4/ADC.c **** * Return:
 363:.\Generated_Source\PSoC4/ADC.c **** *  None.
 364:.\Generated_Source\PSoC4/ADC.c **** *
 365:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 366:.\Generated_Source\PSoC4/ADC.c **** void ADC_Stop(void)
 367:.\Generated_Source\PSoC4/ADC.c **** {
 423              		.loc 1 367 0
 424              		.cfi_startproc
ARM GAS  C:\Users\PC69\AppData\Local\Temp\cckxpNkZ.s 			page 15


 425 0000 80B5     		push	{r7, lr}
 426              		.cfi_def_cfa_offset 8
 427              		.cfi_offset 7, -8
 428              		.cfi_offset 14, -4
 429 0002 00AF     		add	r7, sp, #0
 430              		.cfi_def_cfa_register 7
 368:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG &= (uint32)~ADC_ENABLE;
 431              		.loc 1 368 0
 432 0004 034B     		ldr	r3, .L24
 433 0006 034A     		ldr	r2, .L24
 434 0008 1268     		ldr	r2, [r2]
 435 000a 5200     		lsl	r2, r2, #1
 436 000c 5208     		lsr	r2, r2, #1
 437 000e 1A60     		str	r2, [r3]
 369:.\Generated_Source\PSoC4/ADC.c **** }
 438              		.loc 1 369 0
 439 0010 BD46     		mov	sp, r7
 440              		@ sp needed
 441 0012 80BD     		pop	{r7, pc}
 442              	.L25:
 443              		.align	2
 444              	.L24:
 445 0014 00001A40 		.word	1075445760
 446              		.cfi_endproc
 447              	.LFE3:
 448              		.size	ADC_Stop, .-ADC_Stop
 449              		.section	.text.ADC_StartConvert,"ax",%progbits
 450              		.align	2
 451              		.global	ADC_StartConvert
 452              		.code	16
 453              		.thumb_func
 454              		.type	ADC_StartConvert, %function
 455              	ADC_StartConvert:
 456              	.LFB4:
 370:.\Generated_Source\PSoC4/ADC.c **** 
 371:.\Generated_Source\PSoC4/ADC.c **** 
 372:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 373:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StartConvert
 374:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 375:.\Generated_Source\PSoC4/ADC.c **** *
 376:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 377:.\Generated_Source\PSoC4/ADC.c **** *  Description:
 378:.\Generated_Source\PSoC4/ADC.c **** *  For free running mode, this API starts the conversion process and it
 379:.\Generated_Source\PSoC4/ADC.c **** *  runs continuously.
 380:.\Generated_Source\PSoC4/ADC.c **** *
 381:.\Generated_Source\PSoC4/ADC.c **** *  In a triggered mode, this routine triggers every conversion by
 382:.\Generated_Source\PSoC4/ADC.c **** *  writing into the FW_TRIGGER bit in SAR_START_CTRL reg. In triggered mode,
 383:.\Generated_Source\PSoC4/ADC.c **** *  every conversion has to start by this API.
 384:.\Generated_Source\PSoC4/ADC.c **** *
 385:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 386:.\Generated_Source\PSoC4/ADC.c **** *  None.
 387:.\Generated_Source\PSoC4/ADC.c **** *
 388:.\Generated_Source\PSoC4/ADC.c **** * Return:
 389:.\Generated_Source\PSoC4/ADC.c **** *  None.
 390:.\Generated_Source\PSoC4/ADC.c **** *
 391:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 392:.\Generated_Source\PSoC4/ADC.c **** void ADC_StartConvert(void)
ARM GAS  C:\Users\PC69\AppData\Local\Temp\cckxpNkZ.s 			page 16


 393:.\Generated_Source\PSoC4/ADC.c **** {
 457              		.loc 1 393 0
 458              		.cfi_startproc
 459 0000 80B5     		push	{r7, lr}
 460              		.cfi_def_cfa_offset 8
 461              		.cfi_offset 7, -8
 462              		.cfi_offset 14, -4
 463 0002 00AF     		add	r7, sp, #0
 464              		.cfi_def_cfa_register 7
 394:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_SAMPLE_MODE_SEL == ADC__FREERUNNING)
 395:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG |= ADC_CONTINUOUS_EN;
 465              		.loc 1 395 0
 466 0004 044B     		ldr	r3, .L27
 467 0006 044A     		ldr	r2, .L27
 468 0008 1268     		ldr	r2, [r2]
 469 000a 8021     		mov	r1, #128
 470 000c 4902     		lsl	r1, r1, #9
 471 000e 0A43     		orr	r2, r1
 472 0010 1A60     		str	r2, [r3]
 396:.\Generated_Source\PSoC4/ADC.c ****     #else /* Firmware trigger */
 397:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_START_CTRL_REG = ADC_FW_TRIGGER;
 398:.\Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 399:.\Generated_Source\PSoC4/ADC.c **** 
 400:.\Generated_Source\PSoC4/ADC.c **** }
 473              		.loc 1 400 0
 474 0012 BD46     		mov	sp, r7
 475              		@ sp needed
 476 0014 80BD     		pop	{r7, pc}
 477              	.L28:
 478 0016 C046     		.align	2
 479              	.L27:
 480 0018 04001A40 		.word	1075445764
 481              		.cfi_endproc
 482              	.LFE4:
 483              		.size	ADC_StartConvert, .-ADC_StartConvert
 484              		.section	.text.ADC_StopConvert,"ax",%progbits
 485              		.align	2
 486              		.global	ADC_StopConvert
 487              		.code	16
 488              		.thumb_func
 489              		.type	ADC_StopConvert, %function
 490              	ADC_StopConvert:
 491              	.LFB5:
 401:.\Generated_Source\PSoC4/ADC.c **** 
 402:.\Generated_Source\PSoC4/ADC.c **** 
 403:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 404:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StopConvert
 405:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 406:.\Generated_Source\PSoC4/ADC.c **** *
 407:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 408:.\Generated_Source\PSoC4/ADC.c **** *  Forces the ADC to stop all conversions.
 409:.\Generated_Source\PSoC4/ADC.c **** *
 410:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 411:.\Generated_Source\PSoC4/ADC.c **** *  None.
 412:.\Generated_Source\PSoC4/ADC.c **** *
 413:.\Generated_Source\PSoC4/ADC.c **** * Return:
 414:.\Generated_Source\PSoC4/ADC.c **** *  None.
ARM GAS  C:\Users\PC69\AppData\Local\Temp\cckxpNkZ.s 			page 17


 415:.\Generated_Source\PSoC4/ADC.c **** *
 416:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 417:.\Generated_Source\PSoC4/ADC.c **** void ADC_StopConvert(void)
 418:.\Generated_Source\PSoC4/ADC.c **** {
 492              		.loc 1 418 0
 493              		.cfi_startproc
 494 0000 80B5     		push	{r7, lr}
 495              		.cfi_def_cfa_offset 8
 496              		.cfi_offset 7, -8
 497              		.cfi_offset 14, -4
 498 0002 00AF     		add	r7, sp, #0
 499              		.cfi_def_cfa_register 7
 419:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_SAMPLE_MODE_SEL == ADC__FREERUNNING)
 420:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG &= (uint32)(~ADC_CONTINUOUS_EN);
 500              		.loc 1 420 0
 501 0004 034B     		ldr	r3, .L30
 502 0006 034A     		ldr	r2, .L30
 503 0008 1268     		ldr	r2, [r2]
 504 000a 0349     		ldr	r1, .L30+4
 505 000c 0A40     		and	r2, r1
 506 000e 1A60     		str	r2, [r3]
 421:.\Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 422:.\Generated_Source\PSoC4/ADC.c **** }
 507              		.loc 1 422 0
 508 0010 BD46     		mov	sp, r7
 509              		@ sp needed
 510 0012 80BD     		pop	{r7, pc}
 511              	.L31:
 512              		.align	2
 513              	.L30:
 514 0014 04001A40 		.word	1075445764
 515 0018 FFFFFEFF 		.word	-65537
 516              		.cfi_endproc
 517              	.LFE5:
 518              		.size	ADC_StopConvert, .-ADC_StopConvert
 519              		.section	.text.ADC_IsEndConversion,"ax",%progbits
 520              		.align	2
 521              		.global	ADC_IsEndConversion
 522              		.code	16
 523              		.thumb_func
 524              		.type	ADC_IsEndConversion, %function
 525              	ADC_IsEndConversion:
 526              	.LFB6:
 423:.\Generated_Source\PSoC4/ADC.c **** 
 424:.\Generated_Source\PSoC4/ADC.c **** 
 425:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 426:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_IsEndConversion
 427:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 428:.\Generated_Source\PSoC4/ADC.c **** *
 429:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 430:.\Generated_Source\PSoC4/ADC.c **** *  Description: Checks for ADC end of conversion for the case one
 431:.\Generated_Source\PSoC4/ADC.c **** *  channel and end of scan for the case of multiple channels. It acts
 432:.\Generated_Source\PSoC4/ADC.c **** *  as a software version of the EOC. This function provides the
 433:.\Generated_Source\PSoC4/ADC.c **** *  programmer with two options. In one mode this function
 434:.\Generated_Source\PSoC4/ADC.c **** *  immediately returns with the conversion status. In the other mode,
 435:.\Generated_Source\PSoC4/ADC.c **** *  the function does not return (blocking) until the conversion has
 436:.\Generated_Source\PSoC4/ADC.c **** *  completed.
ARM GAS  C:\Users\PC69\AppData\Local\Temp\cckxpNkZ.s 			page 18


 437:.\Generated_Source\PSoC4/ADC.c **** *
 438:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 439:.\Generated_Source\PSoC4/ADC.c **** *  ADC_RETURN_STATUS        -> Immediately returns conversion result status
 440:.\Generated_Source\PSoC4/ADC.c **** *  ADC_WAIT_FOR_RESULT      -> Does not return until ADC complete
 441:.\Generated_Source\PSoC4/ADC.c **** *  ADC_RETURN_STATUS_INJ    -> Immediately returns conversion result status
 442:.\Generated_Source\PSoC4/ADC.c **** *                              for injection channel
 443:.\Generated_Source\PSoC4/ADC.c **** *  ADC_WAIT_FOR_RESULT_INJ  -> Does not return until ADC completes injection
 444:.\Generated_Source\PSoC4/ADC.c **** *                              channel conversion
 445:.\Generated_Source\PSoC4/ADC.c **** *
 446:.\Generated_Source\PSoC4/ADC.c **** * Return:
 447:.\Generated_Source\PSoC4/ADC.c **** *  If a non-zero value is returned, the last conversion or scan has completed.
 448:.\Generated_Source\PSoC4/ADC.c **** *  If the returned value is zero, the ADC is still in the process of a scan.
 449:.\Generated_Source\PSoC4/ADC.c **** *
 450:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 451:.\Generated_Source\PSoC4/ADC.c **** uint32 ADC_IsEndConversion(uint32 retMode)
 452:.\Generated_Source\PSoC4/ADC.c **** {
 527              		.loc 1 452 0
 528              		.cfi_startproc
 529 0000 80B5     		push	{r7, lr}
 530              		.cfi_def_cfa_offset 8
 531              		.cfi_offset 7, -8
 532              		.cfi_offset 14, -4
 533 0002 84B0     		sub	sp, sp, #16
 534              		.cfi_def_cfa_offset 24
 535 0004 00AF     		add	r7, sp, #0
 536              		.cfi_def_cfa_register 7
 537 0006 7860     		str	r0, [r7, #4]
 453:.\Generated_Source\PSoC4/ADC.c ****     uint32 status = 0u;
 538              		.loc 1 453 0
 539 0008 0023     		mov	r3, #0
 540 000a FB60     		str	r3, [r7, #12]
 454:.\Generated_Source\PSoC4/ADC.c **** 
 455:.\Generated_Source\PSoC4/ADC.c ****     if((retMode & (ADC_RETURN_STATUS | ADC_WAIT_FOR_RESULT)) != 0u)
 541              		.loc 1 455 0
 542 000c 7B68     		ldr	r3, [r7, #4]
 543 000e 0322     		mov	r2, #3
 544 0010 1340     		and	r3, r2
 545 0012 11D0     		beq	.L33
 546              	.L35:
 456:.\Generated_Source\PSoC4/ADC.c ****     {
 457:.\Generated_Source\PSoC4/ADC.c ****         do
 458:.\Generated_Source\PSoC4/ADC.c ****         {
 459:.\Generated_Source\PSoC4/ADC.c ****             status = ADC_SAR_INTR_REG & ADC_EOS_MASK;
 547              		.loc 1 459 0 discriminator 2
 548 0014 0B4B     		ldr	r3, .L37
 549 0016 1B68     		ldr	r3, [r3]
 550 0018 0122     		mov	r2, #1
 551 001a 1340     		and	r3, r2
 552 001c FB60     		str	r3, [r7, #12]
 460:.\Generated_Source\PSoC4/ADC.c ****         }while((status == 0u) && ((retMode & ADC_WAIT_FOR_RESULT) != 0u));
 553              		.loc 1 460 0 discriminator 2
 554 001e FB68     		ldr	r3, [r7, #12]
 555 0020 002B     		cmp	r3, #0
 556 0022 03D1     		bne	.L34
 557              		.loc 1 460 0 is_stmt 0 discriminator 1
 558 0024 7B68     		ldr	r3, [r7, #4]
 559 0026 0222     		mov	r2, #2
ARM GAS  C:\Users\PC69\AppData\Local\Temp\cckxpNkZ.s 			page 19


 560 0028 1340     		and	r3, r2
 561 002a F3D1     		bne	.L35
 562              	.L34:
 461:.\Generated_Source\PSoC4/ADC.c **** 
 462:.\Generated_Source\PSoC4/ADC.c ****         if(status != 0u)
 563              		.loc 1 462 0 is_stmt 1
 564 002c FB68     		ldr	r3, [r7, #12]
 565 002e 002B     		cmp	r3, #0
 566 0030 02D0     		beq	.L33
 463:.\Generated_Source\PSoC4/ADC.c ****         {
 464:.\Generated_Source\PSoC4/ADC.c ****             /* Clear EOS bit */
 465:.\Generated_Source\PSoC4/ADC.c ****             ADC_SAR_INTR_REG = ADC_EOS_MASK;
 567              		.loc 1 465 0
 568 0032 044B     		ldr	r3, .L37
 569 0034 0122     		mov	r2, #1
 570 0036 1A60     		str	r2, [r3]
 571              	.L33:
 466:.\Generated_Source\PSoC4/ADC.c ****         }
 467:.\Generated_Source\PSoC4/ADC.c ****     }
 468:.\Generated_Source\PSoC4/ADC.c **** 
 469:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_INJ_CHANNEL_ENABLED)
 470:.\Generated_Source\PSoC4/ADC.c ****         if((retMode & (ADC_RETURN_STATUS_INJ | ADC_WAIT_FOR_RESULT_INJ)) != 0u)
 471:.\Generated_Source\PSoC4/ADC.c ****         {
 472:.\Generated_Source\PSoC4/ADC.c ****             do
 473:.\Generated_Source\PSoC4/ADC.c ****             {
 474:.\Generated_Source\PSoC4/ADC.c ****                 status |= ADC_SAR_INTR_REG & ADC_INJ_EOC_MASK;
 475:.\Generated_Source\PSoC4/ADC.c ****             }while(((status & ADC_INJ_EOC_MASK) == 0u) &&
 476:.\Generated_Source\PSoC4/ADC.c ****                    ((retMode & ADC_WAIT_FOR_RESULT_INJ) != 0u));
 477:.\Generated_Source\PSoC4/ADC.c **** 
 478:.\Generated_Source\PSoC4/ADC.c ****             if((status & ADC_INJ_EOC_MASK) != 0u)
 479:.\Generated_Source\PSoC4/ADC.c ****             {
 480:.\Generated_Source\PSoC4/ADC.c ****                 /* Clear Injection EOS bit */
 481:.\Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_INTR_REG = ADC_INJ_EOC_MASK;
 482:.\Generated_Source\PSoC4/ADC.c ****             }
 483:.\Generated_Source\PSoC4/ADC.c ****         }
 484:.\Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_INJ_CHANNEL_ENABLED */
 485:.\Generated_Source\PSoC4/ADC.c **** 
 486:.\Generated_Source\PSoC4/ADC.c ****     return (status);
 572              		.loc 1 486 0
 573 0038 FB68     		ldr	r3, [r7, #12]
 487:.\Generated_Source\PSoC4/ADC.c **** }
 574              		.loc 1 487 0
 575 003a 181C     		mov	r0, r3
 576 003c BD46     		mov	sp, r7
 577 003e 04B0     		add	sp, sp, #16
 578              		@ sp needed
 579 0040 80BD     		pop	{r7, pc}
 580              	.L38:
 581 0042 C046     		.align	2
 582              	.L37:
 583 0044 10021A40 		.word	1075446288
 584              		.cfi_endproc
 585              	.LFE6:
 586              		.size	ADC_IsEndConversion, .-ADC_IsEndConversion
 587              		.section	.text.ADC_GetResult16,"ax",%progbits
 588              		.align	2
 589              		.global	ADC_GetResult16
ARM GAS  C:\Users\PC69\AppData\Local\Temp\cckxpNkZ.s 			page 20


 590              		.code	16
 591              		.thumb_func
 592              		.type	ADC_GetResult16, %function
 593              	ADC_GetResult16:
 594              	.LFB7:
 488:.\Generated_Source\PSoC4/ADC.c **** 
 489:.\Generated_Source\PSoC4/ADC.c **** 
 490:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 491:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_GetResult16
 492:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 493:.\Generated_Source\PSoC4/ADC.c **** *
 494:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 495:.\Generated_Source\PSoC4/ADC.c **** *  Gets the data available in the SAR DATA register.
 496:.\Generated_Source\PSoC4/ADC.c **** *
 497:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 498:.\Generated_Source\PSoC4/ADC.c **** *  chan: The ADC channel in which to return the result. The first channel
 499:.\Generated_Source\PSoC4/ADC.c **** *  is 0 and the injection channel if enabled is the number of valid channels.
 500:.\Generated_Source\PSoC4/ADC.c **** *
 501:.\Generated_Source\PSoC4/ADC.c **** * Return:
 502:.\Generated_Source\PSoC4/ADC.c **** *  Returns converted data as a signed 16-bit integer
 503:.\Generated_Source\PSoC4/ADC.c **** *
 504:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 505:.\Generated_Source\PSoC4/ADC.c **** int16 ADC_GetResult16(uint32 chan)
 506:.\Generated_Source\PSoC4/ADC.c **** {
 595              		.loc 1 506 0
 596              		.cfi_startproc
 597 0000 80B5     		push	{r7, lr}
 598              		.cfi_def_cfa_offset 8
 599              		.cfi_offset 7, -8
 600              		.cfi_offset 14, -4
 601 0002 84B0     		sub	sp, sp, #16
 602              		.cfi_def_cfa_offset 24
 603 0004 00AF     		add	r7, sp, #0
 604              		.cfi_def_cfa_register 7
 605 0006 7860     		str	r0, [r7, #4]
 507:.\Generated_Source\PSoC4/ADC.c ****     uint32 result;
 508:.\Generated_Source\PSoC4/ADC.c **** 
 509:.\Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 510:.\Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 606              		.loc 1 510 0
 607 0008 7B68     		ldr	r3, [r7, #4]
 608 000a 072B     		cmp	r3, #7
 609 000c 02D9     		bls	.L40
 610              		.loc 1 510 0 is_stmt 0 discriminator 1
 611 000e 0020     		mov	r0, #0
 612 0010 FFF7FEFF 		bl	CyHalt
 613              	.L40:
 511:.\Generated_Source\PSoC4/ADC.c **** 
 512:.\Generated_Source\PSoC4/ADC.c ****     if(chan < ADC_SEQUENCED_CHANNELS_NUM)
 614              		.loc 1 512 0 is_stmt 1
 615 0014 7B68     		ldr	r3, [r7, #4]
 616 0016 072B     		cmp	r3, #7
 617 0018 09D8     		bhi	.L41
 513:.\Generated_Source\PSoC4/ADC.c ****     {
 514:.\Generated_Source\PSoC4/ADC.c ****         result = CY_GET_REG32((reg32 *)(ADC_SAR_CHAN_RESULT_IND + (uint32)(chan << 2u))) &
 618              		.loc 1 514 0
 619 001a 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\PC69\AppData\Local\Temp\cckxpNkZ.s 			page 21


 620 001c 9B00     		lsl	r3, r3, #2
 621 001e 084A     		ldr	r2, .L44
 622 0020 9446     		mov	ip, r2
 623 0022 6344     		add	r3, r3, ip
 624 0024 1B68     		ldr	r3, [r3]
 625 0026 1B04     		lsl	r3, r3, #16
 626 0028 1B0C     		lsr	r3, r3, #16
 627 002a FB60     		str	r3, [r7, #12]
 628 002c 01E0     		b	.L42
 629              	.L41:
 515:.\Generated_Source\PSoC4/ADC.c ****                 ADC_RESULT_MASK;
 516:.\Generated_Source\PSoC4/ADC.c ****     }
 517:.\Generated_Source\PSoC4/ADC.c ****     else
 518:.\Generated_Source\PSoC4/ADC.c ****     {
 519:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 520:.\Generated_Source\PSoC4/ADC.c ****             result = ADC_SAR_INJ_RESULT_REG & ADC_RESULT_MASK;
 521:.\Generated_Source\PSoC4/ADC.c ****         #else
 522:.\Generated_Source\PSoC4/ADC.c ****             result = 0u;
 630              		.loc 1 522 0
 631 002e 0023     		mov	r3, #0
 632 0030 FB60     		str	r3, [r7, #12]
 633              	.L42:
 523:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 524:.\Generated_Source\PSoC4/ADC.c ****     }
 525:.\Generated_Source\PSoC4/ADC.c **** 
 526:.\Generated_Source\PSoC4/ADC.c ****     return ( (int16)result );
 634              		.loc 1 526 0
 635 0032 FB68     		ldr	r3, [r7, #12]
 636 0034 9BB2     		uxth	r3, r3
 637 0036 1BB2     		sxth	r3, r3
 527:.\Generated_Source\PSoC4/ADC.c **** }
 638              		.loc 1 527 0
 639 0038 181C     		mov	r0, r3
 640 003a BD46     		mov	sp, r7
 641 003c 04B0     		add	sp, sp, #16
 642              		@ sp needed
 643 003e 80BD     		pop	{r7, pc}
 644              	.L45:
 645              		.align	2
 646              	.L44:
 647 0040 80011A40 		.word	1075446144
 648              		.cfi_endproc
 649              	.LFE7:
 650              		.size	ADC_GetResult16, .-ADC_GetResult16
 651              		.section	.text.ADC_SetChanMask,"ax",%progbits
 652              		.align	2
 653              		.global	ADC_SetChanMask
 654              		.code	16
 655              		.thumb_func
 656              		.type	ADC_SetChanMask, %function
 657              	ADC_SetChanMask:
 658              	.LFB8:
 528:.\Generated_Source\PSoC4/ADC.c **** 
 529:.\Generated_Source\PSoC4/ADC.c **** 
 530:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 531:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetChanMask
 532:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
ARM GAS  C:\Users\PC69\AppData\Local\Temp\cckxpNkZ.s 			page 22


 533:.\Generated_Source\PSoC4/ADC.c **** *
 534:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 535:.\Generated_Source\PSoC4/ADC.c **** *  Sets the channel enable mask.
 536:.\Generated_Source\PSoC4/ADC.c **** *
 537:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 538:.\Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that will be
 539:.\Generated_Source\PSoC4/ADC.c **** *  scanned. Setting bits for channels that do not exist will have no
 540:.\Generated_Source\PSoC4/ADC.c **** *  effect. For example, if only 6 channels were enabled, setting a
 541:.\Generated_Source\PSoC4/ADC.c **** *  mask of 0x0103 would only enable the last two channels (0 and 1).
 542:.\Generated_Source\PSoC4/ADC.c **** *  This API will not enable the injection channel.
 543:.\Generated_Source\PSoC4/ADC.c **** *  Examples: If the component is setup to sequence through 8
 544:.\Generated_Source\PSoC4/ADC.c **** *  channels, a mask of 0x000F would enable channels 0, 1, 2, and 3.
 545:.\Generated_Source\PSoC4/ADC.c **** *
 546:.\Generated_Source\PSoC4/ADC.c **** * Return:
 547:.\Generated_Source\PSoC4/ADC.c **** *  None.
 548:.\Generated_Source\PSoC4/ADC.c **** *
 549:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 550:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetChanMask(uint32 mask)
 551:.\Generated_Source\PSoC4/ADC.c **** {
 659              		.loc 1 551 0
 660              		.cfi_startproc
 661 0000 80B5     		push	{r7, lr}
 662              		.cfi_def_cfa_offset 8
 663              		.cfi_offset 7, -8
 664              		.cfi_offset 14, -4
 665 0002 82B0     		sub	sp, sp, #8
 666              		.cfi_def_cfa_offset 16
 667 0004 00AF     		add	r7, sp, #0
 668              		.cfi_def_cfa_register 7
 669 0006 7860     		str	r0, [r7, #4]
 552:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 670              		.loc 1 552 0
 671 0008 034B     		ldr	r3, .L47
 672 000a 7A68     		ldr	r2, [r7, #4]
 673 000c FF21     		mov	r1, #255
 674 000e 0A40     		and	r2, r1
 675 0010 1A60     		str	r2, [r3]
 553:.\Generated_Source\PSoC4/ADC.c **** }
 676              		.loc 1 553 0
 677 0012 BD46     		mov	sp, r7
 678 0014 02B0     		add	sp, sp, #8
 679              		@ sp needed
 680 0016 80BD     		pop	{r7, pc}
 681              	.L48:
 682              		.align	2
 683              	.L47:
 684 0018 20001A40 		.word	1075445792
 685              		.cfi_endproc
 686              	.LFE8:
 687              		.size	ADC_SetChanMask, .-ADC_SetChanMask
 688              		.section	.text.ADC_SetLowLimit,"ax",%progbits
 689              		.align	2
 690              		.global	ADC_SetLowLimit
 691              		.code	16
 692              		.thumb_func
 693              		.type	ADC_SetLowLimit, %function
 694              	ADC_SetLowLimit:
ARM GAS  C:\Users\PC69\AppData\Local\Temp\cckxpNkZ.s 			page 23


 695              	.LFB9:
 554:.\Generated_Source\PSoC4/ADC.c **** 
 555:.\Generated_Source\PSoC4/ADC.c **** #if(ADC_INJ_CHANNEL_ENABLED)
 556:.\Generated_Source\PSoC4/ADC.c **** 
 557:.\Generated_Source\PSoC4/ADC.c **** 
 558:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 559:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_EnableInjection
 560:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 561:.\Generated_Source\PSoC4/ADC.c ****     *
 562:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 563:.\Generated_Source\PSoC4/ADC.c ****     *  Enables the injection channel for the next scan only.
 564:.\Generated_Source\PSoC4/ADC.c ****     *
 565:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 566:.\Generated_Source\PSoC4/ADC.c ****     *  None.
 567:.\Generated_Source\PSoC4/ADC.c ****     *
 568:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 569:.\Generated_Source\PSoC4/ADC.c ****     *  None.
 570:.\Generated_Source\PSoC4/ADC.c ****     *
 571:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 572:.\Generated_Source\PSoC4/ADC.c ****     void ADC_EnableInjection(void)
 573:.\Generated_Source\PSoC4/ADC.c ****     {
 574:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_INJ_CHAN_CONFIG_REG |= ADC_INJ_CHAN_EN;
 575:.\Generated_Source\PSoC4/ADC.c ****     }
 576:.\Generated_Source\PSoC4/ADC.c **** 
 577:.\Generated_Source\PSoC4/ADC.c **** #endif /* ADC_INJ_CHANNEL_ENABLED */
 578:.\Generated_Source\PSoC4/ADC.c **** 
 579:.\Generated_Source\PSoC4/ADC.c **** 
 580:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 581:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLowLimit
 582:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 583:.\Generated_Source\PSoC4/ADC.c **** *
 584:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 585:.\Generated_Source\PSoC4/ADC.c **** *  Sets the low limit parameter for a limit condition.
 586:.\Generated_Source\PSoC4/ADC.c **** *
 587:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 588:.\Generated_Source\PSoC4/ADC.c **** *  lowLimit: The low limit for a limit condition.
 589:.\Generated_Source\PSoC4/ADC.c **** *
 590:.\Generated_Source\PSoC4/ADC.c **** * Return:
 591:.\Generated_Source\PSoC4/ADC.c **** *  None.
 592:.\Generated_Source\PSoC4/ADC.c **** *
 593:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 594:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetLowLimit(uint32 lowLimit)
 595:.\Generated_Source\PSoC4/ADC.c **** {
 696              		.loc 1 595 0
 697              		.cfi_startproc
 698 0000 80B5     		push	{r7, lr}
 699              		.cfi_def_cfa_offset 8
 700              		.cfi_offset 7, -8
 701              		.cfi_offset 14, -4
 702 0002 82B0     		sub	sp, sp, #8
 703              		.cfi_def_cfa_offset 16
 704 0004 00AF     		add	r7, sp, #0
 705              		.cfi_def_cfa_register 7
 706 0006 7860     		str	r0, [r7, #4]
 596:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_LOW_MASK);
 707              		.loc 1 596 0
 708 0008 084B     		ldr	r3, .L50
ARM GAS  C:\Users\PC69\AppData\Local\Temp\cckxpNkZ.s 			page 24


 709 000a 084A     		ldr	r2, .L50
 710 000c 1268     		ldr	r2, [r2]
 711 000e 120C     		lsr	r2, r2, #16
 712 0010 1204     		lsl	r2, r2, #16
 713 0012 1A60     		str	r2, [r3]
 597:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= lowLimit & ADC_RANGE_LOW_MASK;
 714              		.loc 1 597 0
 715 0014 054B     		ldr	r3, .L50
 716 0016 054A     		ldr	r2, .L50
 717 0018 1168     		ldr	r1, [r2]
 718 001a 7A68     		ldr	r2, [r7, #4]
 719 001c 1204     		lsl	r2, r2, #16
 720 001e 120C     		lsr	r2, r2, #16
 721 0020 0A43     		orr	r2, r1
 722 0022 1A60     		str	r2, [r3]
 598:.\Generated_Source\PSoC4/ADC.c **** }
 723              		.loc 1 598 0
 724 0024 BD46     		mov	sp, r7
 725 0026 02B0     		add	sp, sp, #8
 726              		@ sp needed
 727 0028 80BD     		pop	{r7, pc}
 728              	.L51:
 729 002a C046     		.align	2
 730              	.L50:
 731 002c 18001A40 		.word	1075445784
 732              		.cfi_endproc
 733              	.LFE9:
 734              		.size	ADC_SetLowLimit, .-ADC_SetLowLimit
 735              		.section	.text.ADC_SetHighLimit,"ax",%progbits
 736              		.align	2
 737              		.global	ADC_SetHighLimit
 738              		.code	16
 739              		.thumb_func
 740              		.type	ADC_SetHighLimit, %function
 741              	ADC_SetHighLimit:
 742              	.LFB10:
 599:.\Generated_Source\PSoC4/ADC.c **** 
 600:.\Generated_Source\PSoC4/ADC.c **** 
 601:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 602:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetHighLimit
 603:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 604:.\Generated_Source\PSoC4/ADC.c **** *
 605:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 606:.\Generated_Source\PSoC4/ADC.c **** *  Sets the low limit parameter for a limit condition.
 607:.\Generated_Source\PSoC4/ADC.c **** *
 608:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 609:.\Generated_Source\PSoC4/ADC.c **** *  highLimit: The high limit for a limit condition.
 610:.\Generated_Source\PSoC4/ADC.c **** *
 611:.\Generated_Source\PSoC4/ADC.c **** * Return:
 612:.\Generated_Source\PSoC4/ADC.c **** *  None.
 613:.\Generated_Source\PSoC4/ADC.c **** *
 614:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 615:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetHighLimit(uint32 highLimit)
 616:.\Generated_Source\PSoC4/ADC.c **** {
 743              		.loc 1 616 0
 744              		.cfi_startproc
 745 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\PC69\AppData\Local\Temp\cckxpNkZ.s 			page 25


 746              		.cfi_def_cfa_offset 8
 747              		.cfi_offset 7, -8
 748              		.cfi_offset 14, -4
 749 0002 82B0     		sub	sp, sp, #8
 750              		.cfi_def_cfa_offset 16
 751 0004 00AF     		add	r7, sp, #0
 752              		.cfi_def_cfa_register 7
 753 0006 7860     		str	r0, [r7, #4]
 617:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_HIGH_MASK);
 754              		.loc 1 617 0
 755 0008 074B     		ldr	r3, .L53
 756 000a 074A     		ldr	r2, .L53
 757 000c 1268     		ldr	r2, [r2]
 758 000e 1204     		lsl	r2, r2, #16
 759 0010 120C     		lsr	r2, r2, #16
 760 0012 1A60     		str	r2, [r3]
 618:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= (uint32)(highLimit << ADC_RANGE_HIGH_OFFSET);
 761              		.loc 1 618 0
 762 0014 044B     		ldr	r3, .L53
 763 0016 044A     		ldr	r2, .L53
 764 0018 1168     		ldr	r1, [r2]
 765 001a 7A68     		ldr	r2, [r7, #4]
 766 001c 1204     		lsl	r2, r2, #16
 767 001e 0A43     		orr	r2, r1
 768 0020 1A60     		str	r2, [r3]
 619:.\Generated_Source\PSoC4/ADC.c **** }
 769              		.loc 1 619 0
 770 0022 BD46     		mov	sp, r7
 771 0024 02B0     		add	sp, sp, #8
 772              		@ sp needed
 773 0026 80BD     		pop	{r7, pc}
 774              	.L54:
 775              		.align	2
 776              	.L53:
 777 0028 18001A40 		.word	1075445784
 778              		.cfi_endproc
 779              	.LFE10:
 780              		.size	ADC_SetHighLimit, .-ADC_SetHighLimit
 781              		.section	.text.ADC_SetLimitMask,"ax",%progbits
 782              		.align	2
 783              		.global	ADC_SetLimitMask
 784              		.code	16
 785              		.thumb_func
 786              		.type	ADC_SetLimitMask, %function
 787              	ADC_SetLimitMask:
 788              	.LFB11:
 620:.\Generated_Source\PSoC4/ADC.c **** 
 621:.\Generated_Source\PSoC4/ADC.c **** 
 622:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 623:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLimitMask
 624:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 625:.\Generated_Source\PSoC4/ADC.c **** *
 626:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 627:.\Generated_Source\PSoC4/ADC.c **** *  Sets the channel limit condition mask.
 628:.\Generated_Source\PSoC4/ADC.c **** *
 629:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 630:.\Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that may cause a
ARM GAS  C:\Users\PC69\AppData\Local\Temp\cckxpNkZ.s 			page 26


 631:.\Generated_Source\PSoC4/ADC.c **** *  limit condition interrupt. Setting bits for channels that do not exist
 632:.\Generated_Source\PSoC4/ADC.c **** *  will have no effect. For example, if only 6 channels were enabled,
 633:.\Generated_Source\PSoC4/ADC.c **** *  setting a mask of 0x0103 would only enable the last two channels (0 and 1).
 634:.\Generated_Source\PSoC4/ADC.c **** *
 635:.\Generated_Source\PSoC4/ADC.c **** * Return:
 636:.\Generated_Source\PSoC4/ADC.c **** *  None.
 637:.\Generated_Source\PSoC4/ADC.c **** *
 638:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 639:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetLimitMask(uint32 mask)
 640:.\Generated_Source\PSoC4/ADC.c **** {
 789              		.loc 1 640 0
 790              		.cfi_startproc
 791 0000 80B5     		push	{r7, lr}
 792              		.cfi_def_cfa_offset 8
 793              		.cfi_offset 7, -8
 794              		.cfi_offset 14, -4
 795 0002 82B0     		sub	sp, sp, #8
 796              		.cfi_def_cfa_offset 16
 797 0004 00AF     		add	r7, sp, #0
 798              		.cfi_def_cfa_register 7
 799 0006 7860     		str	r0, [r7, #4]
 641:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 800              		.loc 1 641 0
 801 0008 034B     		ldr	r3, .L56
 802 000a 7A68     		ldr	r2, [r7, #4]
 803 000c FF21     		mov	r1, #255
 804 000e 0A40     		and	r2, r1
 805 0010 1A60     		str	r2, [r3]
 642:.\Generated_Source\PSoC4/ADC.c **** }
 806              		.loc 1 642 0
 807 0012 BD46     		mov	sp, r7
 808 0014 02B0     		add	sp, sp, #8
 809              		@ sp needed
 810 0016 80BD     		pop	{r7, pc}
 811              	.L57:
 812              		.align	2
 813              	.L56:
 814 0018 38021A40 		.word	1075446328
 815              		.cfi_endproc
 816              	.LFE11:
 817              		.size	ADC_SetLimitMask, .-ADC_SetLimitMask
 818              		.section	.text.ADC_SetSatMask,"ax",%progbits
 819              		.align	2
 820              		.global	ADC_SetSatMask
 821              		.code	16
 822              		.thumb_func
 823              		.type	ADC_SetSatMask, %function
 824              	ADC_SetSatMask:
 825              	.LFB12:
 643:.\Generated_Source\PSoC4/ADC.c **** 
 644:.\Generated_Source\PSoC4/ADC.c **** 
 645:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 646:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetSatMask
 647:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 648:.\Generated_Source\PSoC4/ADC.c **** *
 649:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 650:.\Generated_Source\PSoC4/ADC.c **** *  Sets the channel saturation event mask.
ARM GAS  C:\Users\PC69\AppData\Local\Temp\cckxpNkZ.s 			page 27


 651:.\Generated_Source\PSoC4/ADC.c **** *
 652:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 653:.\Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that may cause a
 654:.\Generated_Source\PSoC4/ADC.c **** *  saturation event interrupt. Setting bits for channels that do not exist
 655:.\Generated_Source\PSoC4/ADC.c **** *  will have no effect. For example, if only 8 channels were enabled,
 656:.\Generated_Source\PSoC4/ADC.c **** *  setting a mask of 0x01C0 would only enable two channels (6 and 7).
 657:.\Generated_Source\PSoC4/ADC.c **** *
 658:.\Generated_Source\PSoC4/ADC.c **** * Return:
 659:.\Generated_Source\PSoC4/ADC.c **** *  None.
 660:.\Generated_Source\PSoC4/ADC.c **** *
 661:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 662:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetSatMask(uint32 mask)
 663:.\Generated_Source\PSoC4/ADC.c **** {
 826              		.loc 1 663 0
 827              		.cfi_startproc
 828 0000 80B5     		push	{r7, lr}
 829              		.cfi_def_cfa_offset 8
 830              		.cfi_offset 7, -8
 831              		.cfi_offset 14, -4
 832 0002 82B0     		sub	sp, sp, #8
 833              		.cfi_def_cfa_offset 16
 834 0004 00AF     		add	r7, sp, #0
 835              		.cfi_def_cfa_register 7
 836 0006 7860     		str	r0, [r7, #4]
 664:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 837              		.loc 1 664 0
 838 0008 034B     		ldr	r3, .L59
 839 000a 7A68     		ldr	r2, [r7, #4]
 840 000c FF21     		mov	r1, #255
 841 000e 0A40     		and	r2, r1
 842 0010 1A60     		str	r2, [r3]
 665:.\Generated_Source\PSoC4/ADC.c **** }
 843              		.loc 1 665 0
 844 0012 BD46     		mov	sp, r7
 845 0014 02B0     		add	sp, sp, #8
 846              		@ sp needed
 847 0016 80BD     		pop	{r7, pc}
 848              	.L60:
 849              		.align	2
 850              	.L59:
 851 0018 28021A40 		.word	1075446312
 852              		.cfi_endproc
 853              	.LFE12:
 854              		.size	ADC_SetSatMask, .-ADC_SetSatMask
 855              		.section	.text.ADC_SetOffset,"ax",%progbits
 856              		.align	2
 857              		.global	ADC_SetOffset
 858              		.code	16
 859              		.thumb_func
 860              		.type	ADC_SetOffset, %function
 861              	ADC_SetOffset:
 862              	.LFB13:
 666:.\Generated_Source\PSoC4/ADC.c **** 
 667:.\Generated_Source\PSoC4/ADC.c **** 
 668:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 669:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetOffset
 670:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
ARM GAS  C:\Users\PC69\AppData\Local\Temp\cckxpNkZ.s 			page 28


 671:.\Generated_Source\PSoC4/ADC.c **** *
 672:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 673:.\Generated_Source\PSoC4/ADC.c **** *   Description: Sets the ADC offset which is used by the functions
 674:.\Generated_Source\PSoC4/ADC.c **** *   ADC_CountsTo_uVolts, ADC_CountsTo_mVolts and ADC_CountsTo_Volts
 675:.\Generated_Source\PSoC4/ADC.c **** *   to substract the offset from the given reading
 676:.\Generated_Source\PSoC4/ADC.c **** *   before calculating the voltage conversion.
 677:.\Generated_Source\PSoC4/ADC.c **** *
 678:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 679:.\Generated_Source\PSoC4/ADC.c **** *  chan: ADC channel number.
 680:.\Generated_Source\PSoC4/ADC.c **** *  offset: This value is a measured value when the
 681:.\Generated_Source\PSoC4/ADC.c **** *          inputs are shorted or connected to the same input voltage.
 682:.\Generated_Source\PSoC4/ADC.c **** *
 683:.\Generated_Source\PSoC4/ADC.c **** * Return:
 684:.\Generated_Source\PSoC4/ADC.c **** *  None.
 685:.\Generated_Source\PSoC4/ADC.c **** *
 686:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
 687:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Offset:  Modified to set the user provided offset.
 688:.\Generated_Source\PSoC4/ADC.c **** *
 689:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 690:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetOffset(uint32 chan, int16 offset)
 691:.\Generated_Source\PSoC4/ADC.c **** {
 863              		.loc 1 691 0
 864              		.cfi_startproc
 865 0000 80B5     		push	{r7, lr}
 866              		.cfi_def_cfa_offset 8
 867              		.cfi_offset 7, -8
 868              		.cfi_offset 14, -4
 869 0002 82B0     		sub	sp, sp, #8
 870              		.cfi_def_cfa_offset 16
 871 0004 00AF     		add	r7, sp, #0
 872              		.cfi_def_cfa_register 7
 873 0006 7860     		str	r0, [r7, #4]
 874 0008 0A1C     		mov	r2, r1
 875 000a BB1C     		add	r3, r7, #2
 876 000c 1A80     		strh	r2, [r3]
 692:.\Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 693:.\Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 877              		.loc 1 693 0
 878 000e 7B68     		ldr	r3, [r7, #4]
 879 0010 072B     		cmp	r3, #7
 880 0012 02D9     		bls	.L62
 881              		.loc 1 693 0 is_stmt 0 discriminator 1
 882 0014 0020     		mov	r0, #0
 883 0016 FFF7FEFF 		bl	CyHalt
 884              	.L62:
 694:.\Generated_Source\PSoC4/ADC.c **** 
 695:.\Generated_Source\PSoC4/ADC.c ****     ADC_offset[chan] = offset;
 885              		.loc 1 695 0 is_stmt 1
 886 001a 044B     		ldr	r3, .L63
 887 001c 7A68     		ldr	r2, [r7, #4]
 888 001e 5200     		lsl	r2, r2, #1
 889 0020 B91C     		add	r1, r7, #2
 890 0022 0988     		ldrh	r1, [r1]
 891 0024 D152     		strh	r1, [r2, r3]
 696:.\Generated_Source\PSoC4/ADC.c **** }
 892              		.loc 1 696 0
 893 0026 BD46     		mov	sp, r7
ARM GAS  C:\Users\PC69\AppData\Local\Temp\cckxpNkZ.s 			page 29


 894 0028 02B0     		add	sp, sp, #8
 895              		@ sp needed
 896 002a 80BD     		pop	{r7, pc}
 897              	.L64:
 898              		.align	2
 899              	.L63:
 900 002c 00000000 		.word	ADC_offset
 901              		.cfi_endproc
 902              	.LFE13:
 903              		.size	ADC_SetOffset, .-ADC_SetOffset
 904              		.section	.text.ADC_SetGain,"ax",%progbits
 905              		.align	2
 906              		.global	ADC_SetGain
 907              		.code	16
 908              		.thumb_func
 909              		.type	ADC_SetGain, %function
 910              	ADC_SetGain:
 911              	.LFB14:
 697:.\Generated_Source\PSoC4/ADC.c **** 
 698:.\Generated_Source\PSoC4/ADC.c **** 
 699:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 700:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetGain
 701:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 702:.\Generated_Source\PSoC4/ADC.c **** *
 703:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 704:.\Generated_Source\PSoC4/ADC.c **** *  Description: Sets the ADC gain in counts per 10 volt for the voltage
 705:.\Generated_Source\PSoC4/ADC.c **** *  conversion functions below. This value is set by default by the
 706:.\Generated_Source\PSoC4/ADC.c **** *  reference and input range settings. It should only be used to further
 707:.\Generated_Source\PSoC4/ADC.c **** *  calibrate the ADC with a known input or if an external reference is
 708:.\Generated_Source\PSoC4/ADC.c **** *  used. Affects the ADC_CountsTo_uVolts, ADC_CountsTo_mVolts
 709:.\Generated_Source\PSoC4/ADC.c **** *  and ADC_CountsTo_Volts functions by supplying the correct
 710:.\Generated_Source\PSoC4/ADC.c **** *  conversion between ADC counts and voltage.
 711:.\Generated_Source\PSoC4/ADC.c **** *
 712:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 713:.\Generated_Source\PSoC4/ADC.c **** *  chan: ADC channel number.
 714:.\Generated_Source\PSoC4/ADC.c **** *  adcGain: ADC gain in counts per 10 volts.
 715:.\Generated_Source\PSoC4/ADC.c **** *
 716:.\Generated_Source\PSoC4/ADC.c **** * Return:
 717:.\Generated_Source\PSoC4/ADC.c **** *  None.
 718:.\Generated_Source\PSoC4/ADC.c **** *
 719:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
 720:.\Generated_Source\PSoC4/ADC.c **** *  ADC_CountsPer10Volt:  modified to set the ADC gain in counts
 721:.\Generated_Source\PSoC4/ADC.c **** *   per 10 volt.
 722:.\Generated_Source\PSoC4/ADC.c **** *
 723:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 724:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetGain(uint32 chan, int32 adcGain)
 725:.\Generated_Source\PSoC4/ADC.c **** {
 912              		.loc 1 725 0
 913              		.cfi_startproc
 914 0000 80B5     		push	{r7, lr}
 915              		.cfi_def_cfa_offset 8
 916              		.cfi_offset 7, -8
 917              		.cfi_offset 14, -4
 918 0002 82B0     		sub	sp, sp, #8
 919              		.cfi_def_cfa_offset 16
 920 0004 00AF     		add	r7, sp, #0
 921              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\PC69\AppData\Local\Temp\cckxpNkZ.s 			page 30


 922 0006 7860     		str	r0, [r7, #4]
 923 0008 3960     		str	r1, [r7]
 726:.\Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 727:.\Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 924              		.loc 1 727 0
 925 000a 7B68     		ldr	r3, [r7, #4]
 926 000c 072B     		cmp	r3, #7
 927 000e 02D9     		bls	.L66
 928              		.loc 1 727 0 is_stmt 0 discriminator 1
 929 0010 0020     		mov	r0, #0
 930 0012 FFF7FEFF 		bl	CyHalt
 931              	.L66:
 728:.\Generated_Source\PSoC4/ADC.c **** 
 729:.\Generated_Source\PSoC4/ADC.c ****     ADC_countsPer10Volt[chan] = adcGain;
 932              		.loc 1 729 0 is_stmt 1
 933 0016 044B     		ldr	r3, .L67
 934 0018 7A68     		ldr	r2, [r7, #4]
 935 001a 9200     		lsl	r2, r2, #2
 936 001c 3968     		ldr	r1, [r7]
 937 001e D150     		str	r1, [r2, r3]
 730:.\Generated_Source\PSoC4/ADC.c **** }
 938              		.loc 1 730 0
 939 0020 BD46     		mov	sp, r7
 940 0022 02B0     		add	sp, sp, #8
 941              		@ sp needed
 942 0024 80BD     		pop	{r7, pc}
 943              	.L68:
 944 0026 C046     		.align	2
 945              	.L67:
 946 0028 00000000 		.word	ADC_countsPer10Volt
 947              		.cfi_endproc
 948              	.LFE14:
 949              		.size	ADC_SetGain, .-ADC_SetGain
 950              		.global	__aeabi_idiv
 951              		.section	.text.ADC_CountsTo_mVolts,"ax",%progbits
 952              		.align	2
 953              		.global	ADC_CountsTo_mVolts
 954              		.code	16
 955              		.thumb_func
 956              		.type	ADC_CountsTo_mVolts, %function
 957              	ADC_CountsTo_mVolts:
 958              	.LFB15:
 731:.\Generated_Source\PSoC4/ADC.c **** 
 732:.\Generated_Source\PSoC4/ADC.c **** 
 733:.\Generated_Source\PSoC4/ADC.c **** #if(ADC_DEFAULT_JUSTIFICATION_SEL == ADC__RIGHT)
 734:.\Generated_Source\PSoC4/ADC.c **** 
 735:.\Generated_Source\PSoC4/ADC.c **** 
 736:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 737:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_mVolts
 738:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 739:.\Generated_Source\PSoC4/ADC.c ****     *
 740:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 741:.\Generated_Source\PSoC4/ADC.c ****     *  This function converts ADC counts to mVolts
 742:.\Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 743:.\Generated_Source\PSoC4/ADC.c ****     *
 744:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 745:.\Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
ARM GAS  C:\Users\PC69\AppData\Local\Temp\cckxpNkZ.s 			page 31


 746:.\Generated_Source\PSoC4/ADC.c ****     *  adcCounts: Result from the ADC conversion
 747:.\Generated_Source\PSoC4/ADC.c ****     *
 748:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 749:.\Generated_Source\PSoC4/ADC.c ****     *  Results in mVolts
 750:.\Generated_Source\PSoC4/ADC.c ****     *
 751:.\Generated_Source\PSoC4/ADC.c ****     * Global variables:
 752:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to mVolts.
 753:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 754:.\Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 755:.\Generated_Source\PSoC4/ADC.c ****     *
 756:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 757:.\Generated_Source\PSoC4/ADC.c ****     int16 ADC_CountsTo_mVolts(uint32 chan, int16 adcCounts)
 758:.\Generated_Source\PSoC4/ADC.c ****     {
 959              		.loc 1 758 0
 960              		.cfi_startproc
 961 0000 80B5     		push	{r7, lr}
 962              		.cfi_def_cfa_offset 8
 963              		.cfi_offset 7, -8
 964              		.cfi_offset 14, -4
 965 0002 84B0     		sub	sp, sp, #16
 966              		.cfi_def_cfa_offset 24
 967 0004 00AF     		add	r7, sp, #0
 968              		.cfi_def_cfa_register 7
 969 0006 7860     		str	r0, [r7, #4]
 970 0008 0A1C     		mov	r2, r1
 971 000a BB1C     		add	r3, r7, #2
 972 000c 1A80     		strh	r2, [r3]
 759:.\Generated_Source\PSoC4/ADC.c ****         int16 mVolts;
 760:.\Generated_Source\PSoC4/ADC.c **** 
 761:.\Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 762:.\Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 973              		.loc 1 762 0
 974 000e 7B68     		ldr	r3, [r7, #4]
 975 0010 072B     		cmp	r3, #7
 976 0012 02D9     		bls	.L70
 977              		.loc 1 762 0 is_stmt 0 discriminator 1
 978 0014 0020     		mov	r0, #0
 979 0016 FFF7FEFF 		bl	CyHalt
 980              	.L70:
 763:.\Generated_Source\PSoC4/ADC.c **** 
 764:.\Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 765:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 766:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 767:.\Generated_Source\PSoC4/ADC.c ****             {
 768:.\Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 769:.\Generated_Source\PSoC4/ADC.c ****             }
 770:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 771:.\Generated_Source\PSoC4/ADC.c **** 
 772:.\Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 773:.\Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 981              		.loc 1 773 0 is_stmt 1
 982 001a 1F4B     		ldr	r3, .L76
 983 001c 7A68     		ldr	r2, [r7, #4]
 984 001e 5200     		lsl	r2, r2, #1
 985 0020 D35A     		ldrh	r3, [r2, r3]
 986 0022 99B2     		uxth	r1, r3
 987 0024 BB1C     		add	r3, r7, #2
ARM GAS  C:\Users\PC69\AppData\Local\Temp\cckxpNkZ.s 			page 32


 988 0026 1A88     		ldrh	r2, [r3]
 989 0028 8BB2     		uxth	r3, r1
 990 002a D31A     		sub	r3, r2, r3
 991 002c 9AB2     		uxth	r2, r3
 992 002e BB1C     		add	r3, r7, #2
 993 0030 1A80     		strh	r2, [r3]
 774:.\Generated_Source\PSoC4/ADC.c **** 
 775:.\Generated_Source\PSoC4/ADC.c ****         mVolts = (int16)((((int32)adcCounts * ADC_10MV_COUNTS) + ( (adcCounts > 0) ?
 994              		.loc 1 775 0
 995 0032 BB1C     		add	r3, r7, #2
 996 0034 0022     		mov	r2, #0
 997 0036 9B5E     		ldrsh	r3, [r3, r2]
 998 0038 184A     		ldr	r2, .L76+4
 999 003a 5A43     		mul	r2, r3
 776:.\Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 1000              		.loc 1 776 0
 1001 003c BB1C     		add	r3, r7, #2
 1002 003e 0021     		mov	r1, #0
 1003 0040 5B5E     		ldrsh	r3, [r3, r1]
 1004 0042 002B     		cmp	r3, #0
 1005 0044 08DD     		ble	.L71
 1006              		.loc 1 776 0 is_stmt 0 discriminator 1
 1007 0046 164B     		ldr	r3, .L76+8
 1008 0048 7968     		ldr	r1, [r7, #4]
 1009 004a 8900     		lsl	r1, r1, #2
 1010 004c CB58     		ldr	r3, [r1, r3]
 1011 004e 002B     		cmp	r3, #0
 1012 0050 00DA     		bge	.L72
 1013 0052 0133     		add	r3, r3, #1
 1014              	.L72:
 1015 0054 5B10     		asr	r3, r3, #1
 1016 0056 08E0     		b	.L73
 1017              	.L71:
 1018              		.loc 1 776 0 discriminator 2
 1019 0058 114B     		ldr	r3, .L76+8
 1020 005a 7968     		ldr	r1, [r7, #4]
 1021 005c 8900     		lsl	r1, r1, #2
 1022 005e CB58     		ldr	r3, [r1, r3]
 1023 0060 002B     		cmp	r3, #0
 1024 0062 00DA     		bge	.L74
 1025 0064 0133     		add	r3, r3, #1
 1026              	.L74:
 1027 0066 5B10     		asr	r3, r3, #1
 1028 0068 5B42     		neg	r3, r3
 1029              	.L73:
 775:.\Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 1030              		.loc 1 775 0 is_stmt 1
 1031 006a D118     		add	r1, r2, r3
 777:.\Generated_Source\PSoC4/ADC.c ****                  / ADC_countsPer10Volt[chan]);
 1032              		.loc 1 777 0
 1033 006c 0C4B     		ldr	r3, .L76+8
 1034 006e 7A68     		ldr	r2, [r7, #4]
 1035 0070 9200     		lsl	r2, r2, #2
 1036 0072 D358     		ldr	r3, [r2, r3]
 1037 0074 081C     		mov	r0, r1
 1038 0076 191C     		mov	r1, r3
 1039 0078 FFF7FEFF 		bl	__aeabi_idiv
ARM GAS  C:\Users\PC69\AppData\Local\Temp\cckxpNkZ.s 			page 33


 1040 007c 031C     		mov	r3, r0
 1041 007e 1A1C     		mov	r2, r3
 775:.\Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 1042              		.loc 1 775 0
 1043 0080 0E23     		mov	r3, #14
 1044 0082 FB18     		add	r3, r7, r3
 1045 0084 1A80     		strh	r2, [r3]
 778:.\Generated_Source\PSoC4/ADC.c **** 
 779:.\Generated_Source\PSoC4/ADC.c ****         return( mVolts );
 1046              		.loc 1 779 0
 1047 0086 0E23     		mov	r3, #14
 1048 0088 FB18     		add	r3, r7, r3
 1049 008a 1B88     		ldrh	r3, [r3]
 1050 008c 1BB2     		sxth	r3, r3
 780:.\Generated_Source\PSoC4/ADC.c ****     }
 1051              		.loc 1 780 0
 1052 008e 181C     		mov	r0, r3
 1053 0090 BD46     		mov	sp, r7
 1054 0092 04B0     		add	sp, sp, #16
 1055              		@ sp needed
 1056 0094 80BD     		pop	{r7, pc}
 1057              	.L77:
 1058 0096 C046     		.align	2
 1059              	.L76:
 1060 0098 00000000 		.word	ADC_offset
 1061 009c 10270000 		.word	10000
 1062 00a0 00000000 		.word	ADC_countsPer10Volt
 1063              		.cfi_endproc
 1064              	.LFE15:
 1065              		.size	ADC_CountsTo_mVolts, .-ADC_CountsTo_mVolts
 1066              		.global	__aeabi_lmul
 1067              		.global	__aeabi_ldivmod
 1068              		.section	.text.ADC_CountsTo_uVolts,"ax",%progbits
 1069              		.align	2
 1070              		.global	ADC_CountsTo_uVolts
 1071              		.code	16
 1072              		.thumb_func
 1073              		.type	ADC_CountsTo_uVolts, %function
 1074              	ADC_CountsTo_uVolts:
 1075              	.LFB16:
 781:.\Generated_Source\PSoC4/ADC.c **** 
 782:.\Generated_Source\PSoC4/ADC.c **** 
 783:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 784:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_uVolts
 785:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 786:.\Generated_Source\PSoC4/ADC.c ****     *
 787:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 788:.\Generated_Source\PSoC4/ADC.c ****     *  This function converts ADC counts to micro Volts
 789:.\Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 790:.\Generated_Source\PSoC4/ADC.c ****     *
 791:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 792:.\Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 793:.\Generated_Source\PSoC4/ADC.c ****     *  adcCounts: Result from the ADC conversion
 794:.\Generated_Source\PSoC4/ADC.c ****     *
 795:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 796:.\Generated_Source\PSoC4/ADC.c ****     *  Results in uVolts
 797:.\Generated_Source\PSoC4/ADC.c ****     *
ARM GAS  C:\Users\PC69\AppData\Local\Temp\cckxpNkZ.s 			page 34


 798:.\Generated_Source\PSoC4/ADC.c ****     * Global variables:
 799:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to uVolts.
 800:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 801:.\Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 802:.\Generated_Source\PSoC4/ADC.c ****     *
 803:.\Generated_Source\PSoC4/ADC.c ****     * Theory:
 804:.\Generated_Source\PSoC4/ADC.c ****     *  Care must be taken to not exceed the maximum value for a 31 bit signed
 805:.\Generated_Source\PSoC4/ADC.c ****     *  number in the conversion to uVolts and at the same time not loose
 806:.\Generated_Source\PSoC4/ADC.c ****     *  resolution.
 807:.\Generated_Source\PSoC4/ADC.c ****     *  To convert adcCounts to microVolts it is required to be multiplied
 808:.\Generated_Source\PSoC4/ADC.c ****     *  on 10 million and later divide on gain in counts per 10V.
 809:.\Generated_Source\PSoC4/ADC.c ****     *
 810:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 811:.\Generated_Source\PSoC4/ADC.c ****     int32 ADC_CountsTo_uVolts(uint32 chan, int16 adcCounts)
 812:.\Generated_Source\PSoC4/ADC.c ****     {
 1076              		.loc 1 812 0
 1077              		.cfi_startproc
 1078 0000 B0B5     		push	{r4, r5, r7, lr}
 1079              		.cfi_def_cfa_offset 16
 1080              		.cfi_offset 4, -16
 1081              		.cfi_offset 5, -12
 1082              		.cfi_offset 7, -8
 1083              		.cfi_offset 14, -4
 1084 0002 86B0     		sub	sp, sp, #24
 1085              		.cfi_def_cfa_offset 40
 1086 0004 00AF     		add	r7, sp, #0
 1087              		.cfi_def_cfa_register 7
 1088 0006 F860     		str	r0, [r7, #12]
 1089 0008 0A1C     		mov	r2, r1
 1090 000a 0A23     		mov	r3, #10
 1091 000c FB18     		add	r3, r7, r3
 1092 000e 1A80     		strh	r2, [r3]
 813:.\Generated_Source\PSoC4/ADC.c ****         int64 uVolts;
 814:.\Generated_Source\PSoC4/ADC.c **** 
 815:.\Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 816:.\Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1093              		.loc 1 816 0
 1094 0010 FB68     		ldr	r3, [r7, #12]
 1095 0012 072B     		cmp	r3, #7
 1096 0014 02D9     		bls	.L79
 1097              		.loc 1 816 0 is_stmt 0 discriminator 1
 1098 0016 0020     		mov	r0, #0
 1099 0018 FFF7FEFF 		bl	CyHalt
 1100              	.L79:
 817:.\Generated_Source\PSoC4/ADC.c **** 
 818:.\Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 819:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 820:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 821:.\Generated_Source\PSoC4/ADC.c ****             {
 822:.\Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 823:.\Generated_Source\PSoC4/ADC.c ****             }
 824:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 825:.\Generated_Source\PSoC4/ADC.c **** 
 826:.\Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 827:.\Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1101              		.loc 1 827 0 is_stmt 1
 1102 001c 194B     		ldr	r3, .L81
ARM GAS  C:\Users\PC69\AppData\Local\Temp\cckxpNkZ.s 			page 35


 1103 001e FA68     		ldr	r2, [r7, #12]
 1104 0020 5200     		lsl	r2, r2, #1
 1105 0022 D35A     		ldrh	r3, [r2, r3]
 1106 0024 99B2     		uxth	r1, r3
 1107 0026 0A23     		mov	r3, #10
 1108 0028 FB18     		add	r3, r7, r3
 1109 002a 1A88     		ldrh	r2, [r3]
 1110 002c 8BB2     		uxth	r3, r1
 1111 002e D31A     		sub	r3, r2, r3
 1112 0030 9AB2     		uxth	r2, r3
 1113 0032 0A23     		mov	r3, #10
 1114 0034 FB18     		add	r3, r7, r3
 1115 0036 1A80     		strh	r2, [r3]
 828:.\Generated_Source\PSoC4/ADC.c **** 
 829:.\Generated_Source\PSoC4/ADC.c ****         uVolts = ((int64)adcCounts * ADC_10UV_COUNTS) / ADC_countsPer10Volt[chan];
 1116              		.loc 1 829 0
 1117 0038 0A23     		mov	r3, #10
 1118 003a FB18     		add	r3, r7, r3
 1119 003c 1B88     		ldrh	r3, [r3]
 1120 003e 1BB2     		sxth	r3, r3
 1121 0040 3B60     		str	r3, [r7]
 1122 0042 DB17     		asr	r3, r3, #31
 1123 0044 7B60     		str	r3, [r7, #4]
 1124 0046 3868     		ldr	r0, [r7]
 1125 0048 7968     		ldr	r1, [r7, #4]
 1126 004a 0F4A     		ldr	r2, .L81+4
 1127 004c 0023     		mov	r3, #0
 1128 004e FFF7FEFF 		bl	__aeabi_lmul
 1129 0052 021C     		mov	r2, r0
 1130 0054 0B1C     		mov	r3, r1
 1131 0056 101C     		mov	r0, r2
 1132 0058 191C     		mov	r1, r3
 1133 005a 0C4B     		ldr	r3, .L81+8
 1134 005c FA68     		ldr	r2, [r7, #12]
 1135 005e 9200     		lsl	r2, r2, #2
 1136 0060 D358     		ldr	r3, [r2, r3]
 1137 0062 1C1C     		mov	r4, r3
 1138 0064 DB17     		asr	r3, r3, #31
 1139 0066 1D1C     		mov	r5, r3
 1140 0068 221C     		mov	r2, r4
 1141 006a 2B1C     		mov	r3, r5
 1142 006c FFF7FEFF 		bl	__aeabi_ldivmod
 1143 0070 031C     		mov	r3, r0
 1144 0072 0C1C     		mov	r4, r1
 1145 0074 3B61     		str	r3, [r7, #16]
 1146 0076 7C61     		str	r4, [r7, #20]
 830:.\Generated_Source\PSoC4/ADC.c **** 
 831:.\Generated_Source\PSoC4/ADC.c ****         return( (int32)uVolts );
 1147              		.loc 1 831 0
 1148 0078 3B69     		ldr	r3, [r7, #16]
 832:.\Generated_Source\PSoC4/ADC.c ****     }
 1149              		.loc 1 832 0
 1150 007a 181C     		mov	r0, r3
 1151 007c BD46     		mov	sp, r7
 1152 007e 06B0     		add	sp, sp, #24
 1153              		@ sp needed
 1154 0080 B0BD     		pop	{r4, r5, r7, pc}
ARM GAS  C:\Users\PC69\AppData\Local\Temp\cckxpNkZ.s 			page 36


 1155              	.L82:
 1156 0082 C046     		.align	2
 1157              	.L81:
 1158 0084 00000000 		.word	ADC_offset
 1159 0088 80969800 		.word	10000000
 1160 008c 00000000 		.word	ADC_countsPer10Volt
 1161              		.cfi_endproc
 1162              	.LFE16:
 1163              		.size	ADC_CountsTo_uVolts, .-ADC_CountsTo_uVolts
 1164              		.global	__aeabi_i2f
 1165              		.global	__aeabi_fmul
 1166              		.global	__aeabi_fdiv
 1167              		.section	.text.ADC_CountsTo_Volts,"ax",%progbits
 1168              		.align	2
 1169              		.global	ADC_CountsTo_Volts
 1170              		.code	16
 1171              		.thumb_func
 1172              		.type	ADC_CountsTo_Volts, %function
 1173              	ADC_CountsTo_Volts:
 1174              	.LFB17:
 833:.\Generated_Source\PSoC4/ADC.c **** 
 834:.\Generated_Source\PSoC4/ADC.c **** 
 835:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 836:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_Volts
 837:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 838:.\Generated_Source\PSoC4/ADC.c ****     *
 839:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 840:.\Generated_Source\PSoC4/ADC.c ****     *  Converts the ADC output to Volts as a floating point number.
 841:.\Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 842:.\Generated_Source\PSoC4/ADC.c ****     *
 843:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 844:.\Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 845:.\Generated_Source\PSoC4/ADC.c ****     *  Result from the ADC conversion
 846:.\Generated_Source\PSoC4/ADC.c ****     *
 847:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 848:.\Generated_Source\PSoC4/ADC.c ****     *  Results in Volts
 849:.\Generated_Source\PSoC4/ADC.c ****     *
 850:.\Generated_Source\PSoC4/ADC.c ****     * Global variables:
 851:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to Volts.
 852:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 853:.\Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 854:.\Generated_Source\PSoC4/ADC.c ****     *
 855:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 856:.\Generated_Source\PSoC4/ADC.c ****     float32 ADC_CountsTo_Volts(uint32 chan, int16 adcCounts)
 857:.\Generated_Source\PSoC4/ADC.c ****     {
 1175              		.loc 1 857 0
 1176              		.cfi_startproc
 1177 0000 90B5     		push	{r4, r7, lr}
 1178              		.cfi_def_cfa_offset 12
 1179              		.cfi_offset 4, -12
 1180              		.cfi_offset 7, -8
 1181              		.cfi_offset 14, -4
 1182 0002 85B0     		sub	sp, sp, #20
 1183              		.cfi_def_cfa_offset 32
 1184 0004 00AF     		add	r7, sp, #0
 1185              		.cfi_def_cfa_register 7
 1186 0006 7860     		str	r0, [r7, #4]
ARM GAS  C:\Users\PC69\AppData\Local\Temp\cckxpNkZ.s 			page 37


 1187 0008 0A1C     		mov	r2, r1
 1188 000a BB1C     		add	r3, r7, #2
 1189 000c 1A80     		strh	r2, [r3]
 858:.\Generated_Source\PSoC4/ADC.c ****         float32 volts;
 859:.\Generated_Source\PSoC4/ADC.c **** 
 860:.\Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 861:.\Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1190              		.loc 1 861 0
 1191 000e 7B68     		ldr	r3, [r7, #4]
 1192 0010 072B     		cmp	r3, #7
 1193 0012 02D9     		bls	.L84
 1194              		.loc 1 861 0 is_stmt 0 discriminator 1
 1195 0014 0020     		mov	r0, #0
 1196 0016 FFF7FEFF 		bl	CyHalt
 1197              	.L84:
 862:.\Generated_Source\PSoC4/ADC.c **** 
 863:.\Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 864:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 865:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 866:.\Generated_Source\PSoC4/ADC.c ****             {
 867:.\Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 868:.\Generated_Source\PSoC4/ADC.c ****             }
 869:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 870:.\Generated_Source\PSoC4/ADC.c **** 
 871:.\Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 872:.\Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1198              		.loc 1 872 0 is_stmt 1
 1199 001a 164B     		ldr	r3, .L86
 1200 001c 7A68     		ldr	r2, [r7, #4]
 1201 001e 5200     		lsl	r2, r2, #1
 1202 0020 D35A     		ldrh	r3, [r2, r3]
 1203 0022 99B2     		uxth	r1, r3
 1204 0024 BB1C     		add	r3, r7, #2
 1205 0026 1A88     		ldrh	r2, [r3]
 1206 0028 8BB2     		uxth	r3, r1
 1207 002a D31A     		sub	r3, r2, r3
 1208 002c 9AB2     		uxth	r2, r3
 1209 002e BB1C     		add	r3, r7, #2
 1210 0030 1A80     		strh	r2, [r3]
 873:.\Generated_Source\PSoC4/ADC.c **** 
 874:.\Generated_Source\PSoC4/ADC.c ****         volts = ((float32)adcCounts * ADC_10V_COUNTS) / (float32)ADC_countsPer10Volt[chan];
 1211              		.loc 1 874 0
 1212 0032 BB1C     		add	r3, r7, #2
 1213 0034 0022     		mov	r2, #0
 1214 0036 9B5E     		ldrsh	r3, [r3, r2]
 1215 0038 181C     		mov	r0, r3
 1216 003a FFF7FEFF 		bl	__aeabi_i2f
 1217 003e 031C     		add	r3, r0, #0
 1218 0040 181C     		add	r0, r3, #0
 1219 0042 0D49     		ldr	r1, .L86+4
 1220 0044 FFF7FEFF 		bl	__aeabi_fmul
 1221 0048 031C     		add	r3, r0, #0
 1222 004a 1C1C     		add	r4, r3, #0
 1223 004c 0B4B     		ldr	r3, .L86+8
 1224 004e 7A68     		ldr	r2, [r7, #4]
 1225 0050 9200     		lsl	r2, r2, #2
 1226 0052 D358     		ldr	r3, [r2, r3]
ARM GAS  C:\Users\PC69\AppData\Local\Temp\cckxpNkZ.s 			page 38


 1227 0054 181C     		mov	r0, r3
 1228 0056 FFF7FEFF 		bl	__aeabi_i2f
 1229 005a 031C     		add	r3, r0, #0
 1230 005c 201C     		add	r0, r4, #0
 1231 005e 191C     		add	r1, r3, #0
 1232 0060 FFF7FEFF 		bl	__aeabi_fdiv
 1233 0064 031C     		add	r3, r0, #0
 1234 0066 FB60     		str	r3, [r7, #12]
 875:.\Generated_Source\PSoC4/ADC.c **** 
 876:.\Generated_Source\PSoC4/ADC.c ****         return( volts );
 1235              		.loc 1 876 0
 1236 0068 FB68     		ldr	r3, [r7, #12]
 877:.\Generated_Source\PSoC4/ADC.c ****     }
 1237              		.loc 1 877 0
 1238 006a 181C     		add	r0, r3, #0
 1239 006c BD46     		mov	sp, r7
 1240 006e 05B0     		add	sp, sp, #20
 1241              		@ sp needed
 1242 0070 90BD     		pop	{r4, r7, pc}
 1243              	.L87:
 1244 0072 C046     		.align	2
 1245              	.L86:
 1246 0074 00000000 		.word	ADC_offset
 1247 0078 00002041 		.word	1092616192
 1248 007c 00000000 		.word	ADC_countsPer10Volt
 1249              		.cfi_endproc
 1250              	.LFE17:
 1251              		.size	ADC_CountsTo_Volts, .-ADC_CountsTo_Volts
 1252              		.section	.rodata
 1253              		.align	2
 1254              		.type	ADC_InputsPlacement.4714, %object
 1255              		.size	ADC_InputsPlacement.4714, 8
 1256              	ADC_InputsPlacement.4714:
 1257 0020 00       		.byte	0
 1258 0021 01       		.byte	1
 1259 0022 02       		.byte	2
 1260 0023 03       		.byte	3
 1261 0024 04       		.byte	4
 1262 0025 05       		.byte	5
 1263 0026 06       		.byte	6
 1264 0027 07       		.byte	7
 1265              		.text
 1266              	.Letext0:
 1267              		.file 2 ".\\Generated_Source\\PSoC4\\cytypes.h"
 1268              		.section	.debug_info,"",%progbits
 1269              	.Ldebug_info0:
 1270 0000 96040000 		.4byte	0x496
 1271 0004 0400     		.2byte	0x4
 1272 0006 00000000 		.4byte	.Ldebug_abbrev0
 1273 000a 04       		.byte	0x4
 1274 000b 01       		.uleb128 0x1
 1275 000c 00030000 		.4byte	.LASF60
 1276 0010 01       		.byte	0x1
 1277 0011 18020000 		.4byte	.LASF61
 1278 0015 63020000 		.4byte	.LASF62
 1279 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1280 001d 00000000 		.4byte	0
ARM GAS  C:\Users\PC69\AppData\Local\Temp\cckxpNkZ.s 			page 39


 1281 0021 00000000 		.4byte	.Ldebug_line0
 1282 0025 02       		.uleb128 0x2
 1283 0026 01       		.byte	0x1
 1284 0027 06       		.byte	0x6
 1285 0028 7C000000 		.4byte	.LASF0
 1286 002c 02       		.uleb128 0x2
 1287 002d 01       		.byte	0x1
 1288 002e 08       		.byte	0x8
 1289 002f 37020000 		.4byte	.LASF1
 1290 0033 02       		.uleb128 0x2
 1291 0034 02       		.byte	0x2
 1292 0035 05       		.byte	0x5
 1293 0036 50020000 		.4byte	.LASF2
 1294 003a 02       		.uleb128 0x2
 1295 003b 02       		.byte	0x2
 1296 003c 07       		.byte	0x7
 1297 003d 53010000 		.4byte	.LASF3
 1298 0041 02       		.uleb128 0x2
 1299 0042 04       		.byte	0x4
 1300 0043 05       		.byte	0x5
 1301 0044 9F000000 		.4byte	.LASF4
 1302 0048 02       		.uleb128 0x2
 1303 0049 04       		.byte	0x4
 1304 004a 07       		.byte	0x7
 1305 004b 22010000 		.4byte	.LASF5
 1306 004f 02       		.uleb128 0x2
 1307 0050 08       		.byte	0x8
 1308 0051 05       		.byte	0x5
 1309 0052 6E000000 		.4byte	.LASF6
 1310 0056 02       		.uleb128 0x2
 1311 0057 08       		.byte	0x8
 1312 0058 07       		.byte	0x7
 1313 0059 32000000 		.4byte	.LASF7
 1314 005d 03       		.uleb128 0x3
 1315 005e 04       		.byte	0x4
 1316 005f 05       		.byte	0x5
 1317 0060 696E7400 		.ascii	"int\000"
 1318 0064 02       		.uleb128 0x2
 1319 0065 04       		.byte	0x4
 1320 0066 07       		.byte	0x7
 1321 0067 0E010000 		.4byte	.LASF8
 1322 006b 04       		.uleb128 0x4
 1323 006c D0000000 		.4byte	.LASF9
 1324 0070 02       		.byte	0x2
 1325 0071 A1       		.byte	0xa1
 1326 0072 2C000000 		.4byte	0x2c
 1327 0076 04       		.uleb128 0x4
 1328 0077 00000000 		.4byte	.LASF10
 1329 007b 02       		.byte	0x2
 1330 007c A2       		.byte	0xa2
 1331 007d 3A000000 		.4byte	0x3a
 1332 0081 04       		.uleb128 0x4
 1333 0082 DD000000 		.4byte	.LASF11
 1334 0086 02       		.byte	0x2
 1335 0087 A3       		.byte	0xa3
 1336 0088 48000000 		.4byte	0x48
 1337 008c 04       		.uleb128 0x4
ARM GAS  C:\Users\PC69\AppData\Local\Temp\cckxpNkZ.s 			page 40


 1338 008d EC020000 		.4byte	.LASF12
 1339 0091 02       		.byte	0x2
 1340 0092 A5       		.byte	0xa5
 1341 0093 33000000 		.4byte	0x33
 1342 0097 04       		.uleb128 0x4
 1343 0098 8F000000 		.4byte	.LASF13
 1344 009c 02       		.byte	0x2
 1345 009d A6       		.byte	0xa6
 1346 009e 41000000 		.4byte	0x41
 1347 00a2 04       		.uleb128 0x4
 1348 00a3 83010000 		.4byte	.LASF14
 1349 00a7 02       		.byte	0x2
 1350 00a8 A7       		.byte	0xa7
 1351 00a9 AD000000 		.4byte	0xad
 1352 00ad 02       		.uleb128 0x2
 1353 00ae 04       		.byte	0x4
 1354 00af 04       		.byte	0x4
 1355 00b0 E4010000 		.4byte	.LASF15
 1356 00b4 02       		.uleb128 0x2
 1357 00b5 08       		.byte	0x8
 1358 00b6 04       		.byte	0x4
 1359 00b7 D6000000 		.4byte	.LASF16
 1360 00bb 04       		.uleb128 0x4
 1361 00bc C2010000 		.4byte	.LASF17
 1362 00c0 02       		.byte	0x2
 1363 00c1 AC       		.byte	0xac
 1364 00c2 4F000000 		.4byte	0x4f
 1365 00c6 02       		.uleb128 0x2
 1366 00c7 01       		.byte	0x1
 1367 00c8 08       		.byte	0x8
 1368 00c9 B8020000 		.4byte	.LASF18
 1369 00cd 05       		.uleb128 0x5
 1370 00ce 7D010000 		.4byte	.LASF19
 1371 00d2 02       		.byte	0x2
 1372 00d3 4D01     		.2byte	0x14d
 1373 00d5 D9000000 		.4byte	0xd9
 1374 00d9 06       		.uleb128 0x6
 1375 00da 81000000 		.4byte	0x81
 1376 00de 02       		.uleb128 0x2
 1377 00df 04       		.byte	0x4
 1378 00e0 07       		.byte	0x7
 1379 00e1 8B010000 		.4byte	.LASF20
 1380 00e5 07       		.uleb128 0x7
 1381 00e6 95000000 		.4byte	.LASF25
 1382 00ea 01       		.byte	0x1
 1383 00eb 40       		.byte	0x40
 1384 00ec 00000000 		.4byte	.LFB0
 1385 00f0 24000000 		.4byte	.LFE0-.LFB0
 1386 00f4 01       		.uleb128 0x1
 1387 00f5 9C       		.byte	0x9c
 1388 00f6 08       		.uleb128 0x8
 1389 00f7 29000000 		.4byte	.LASF36
 1390 00fb 01       		.byte	0x1
 1391 00fc 5F       		.byte	0x5f
 1392 00fd 00000000 		.4byte	.LFB1
 1393 0101 F0010000 		.4byte	.LFE1-.LFB1
 1394 0105 01       		.uleb128 0x1
ARM GAS  C:\Users\PC69\AppData\Local\Temp\cckxpNkZ.s 			page 41


 1395 0106 9C       		.byte	0x9c
 1396 0107 47010000 		.4byte	0x147
 1397 010b 09       		.uleb128 0x9
 1398 010c AD020000 		.4byte	.LASF21
 1399 0110 01       		.byte	0x1
 1400 0111 61       		.byte	0x61
 1401 0112 81000000 		.4byte	0x81
 1402 0116 02       		.uleb128 0x2
 1403 0117 91       		.byte	0x91
 1404 0118 74       		.sleb128 -12
 1405 0119 09       		.uleb128 0x9
 1406 011a 49010000 		.4byte	.LASF22
 1407 011e 01       		.byte	0x1
 1408 011f 62       		.byte	0x62
 1409 0120 81000000 		.4byte	0x81
 1410 0124 02       		.uleb128 0x2
 1411 0125 91       		.byte	0x91
 1412 0126 6C       		.sleb128 -20
 1413 0127 09       		.uleb128 0x9
 1414 0128 0F000000 		.4byte	.LASF23
 1415 012c 01       		.byte	0x1
 1416 012d 63       		.byte	0x63
 1417 012e 97000000 		.4byte	0x97
 1418 0132 02       		.uleb128 0x2
 1419 0133 91       		.byte	0x91
 1420 0134 70       		.sleb128 -16
 1421 0135 09       		.uleb128 0x9
 1422 0136 49000000 		.4byte	.LASF24
 1423 013a 01       		.byte	0x1
 1424 013b 66       		.byte	0x66
 1425 013c 57010000 		.4byte	0x157
 1426 0140 05       		.uleb128 0x5
 1427 0141 03       		.byte	0x3
 1428 0142 20000000 		.4byte	ADC_InputsPlacement.4714
 1429 0146 00       		.byte	0
 1430 0147 0A       		.uleb128 0xa
 1431 0148 6B000000 		.4byte	0x6b
 1432 014c 57010000 		.4byte	0x157
 1433 0150 0B       		.uleb128 0xb
 1434 0151 DE000000 		.4byte	0xde
 1435 0155 07       		.byte	0x7
 1436 0156 00       		.byte	0
 1437 0157 0C       		.uleb128 0xc
 1438 0158 47010000 		.4byte	0x147
 1439 015c 0D       		.uleb128 0xd
 1440 015d E1020000 		.4byte	.LASF26
 1441 0161 01       		.byte	0x1
 1442 0162 4B01     		.2byte	0x14b
 1443 0164 00000000 		.4byte	.LFB2
 1444 0168 28000000 		.4byte	.LFE2-.LFB2
 1445 016c 01       		.uleb128 0x1
 1446 016d 9C       		.byte	0x9c
 1447 016e 0E       		.uleb128 0xe
 1448 016f 5A020000 		.4byte	.LASF27
 1449 0173 01       		.byte	0x1
 1450 0174 6E01     		.2byte	0x16e
 1451 0176 00000000 		.4byte	.LFB3
ARM GAS  C:\Users\PC69\AppData\Local\Temp\cckxpNkZ.s 			page 42


 1452 017a 18000000 		.4byte	.LFE3-.LFB3
 1453 017e 01       		.uleb128 0x1
 1454 017f 9C       		.byte	0x9c
 1455 0180 0E       		.uleb128 0xe
 1456 0181 5D000000 		.4byte	.LASF28
 1457 0185 01       		.byte	0x1
 1458 0186 8801     		.2byte	0x188
 1459 0188 00000000 		.4byte	.LFB4
 1460 018c 1C000000 		.4byte	.LFE4-.LFB4
 1461 0190 01       		.uleb128 0x1
 1462 0191 9C       		.byte	0x9c
 1463 0192 0E       		.uleb128 0xe
 1464 0193 66010000 		.4byte	.LASF29
 1465 0197 01       		.byte	0x1
 1466 0198 A101     		.2byte	0x1a1
 1467 019a 00000000 		.4byte	.LFB5
 1468 019e 1C000000 		.4byte	.LFE5-.LFB5
 1469 01a2 01       		.uleb128 0x1
 1470 01a3 9C       		.byte	0x9c
 1471 01a4 0F       		.uleb128 0xf
 1472 01a5 AE010000 		.4byte	.LASF31
 1473 01a9 01       		.byte	0x1
 1474 01aa C301     		.2byte	0x1c3
 1475 01ac 81000000 		.4byte	0x81
 1476 01b0 00000000 		.4byte	.LFB6
 1477 01b4 48000000 		.4byte	.LFE6-.LFB6
 1478 01b8 01       		.uleb128 0x1
 1479 01b9 9C       		.byte	0x9c
 1480 01ba DD010000 		.4byte	0x1dd
 1481 01be 10       		.uleb128 0x10
 1482 01bf F5000000 		.4byte	.LASF33
 1483 01c3 01       		.byte	0x1
 1484 01c4 C301     		.2byte	0x1c3
 1485 01c6 81000000 		.4byte	0x81
 1486 01ca 02       		.uleb128 0x2
 1487 01cb 91       		.byte	0x91
 1488 01cc 6C       		.sleb128 -20
 1489 01cd 11       		.uleb128 0x11
 1490 01ce 88000000 		.4byte	.LASF30
 1491 01d2 01       		.byte	0x1
 1492 01d3 C501     		.2byte	0x1c5
 1493 01d5 81000000 		.4byte	0x81
 1494 01d9 02       		.uleb128 0x2
 1495 01da 91       		.byte	0x91
 1496 01db 74       		.sleb128 -12
 1497 01dc 00       		.byte	0
 1498 01dd 12       		.uleb128 0x12
 1499 01de 95030000 		.4byte	.LASF32
 1500 01e2 01       		.byte	0x1
 1501 01e3 F901     		.2byte	0x1f9
 1502 01e5 8C000000 		.4byte	0x8c
 1503 01e9 00000000 		.4byte	.LFB7
 1504 01ed 44000000 		.4byte	.LFE7-.LFB7
 1505 01f1 01       		.uleb128 0x1
 1506 01f2 9C       		.byte	0x9c
 1507 01f3 16020000 		.4byte	0x216
 1508 01f7 10       		.uleb128 0x10
ARM GAS  C:\Users\PC69\AppData\Local\Temp\cckxpNkZ.s 			page 43


 1509 01f8 B3020000 		.4byte	.LASF34
 1510 01fc 01       		.byte	0x1
 1511 01fd F901     		.2byte	0x1f9
 1512 01ff 81000000 		.4byte	0x81
 1513 0203 02       		.uleb128 0x2
 1514 0204 91       		.byte	0x91
 1515 0205 6C       		.sleb128 -20
 1516 0206 11       		.uleb128 0x11
 1517 0207 8E030000 		.4byte	.LASF35
 1518 020b 01       		.byte	0x1
 1519 020c FB01     		.2byte	0x1fb
 1520 020e 81000000 		.4byte	0x81
 1521 0212 02       		.uleb128 0x2
 1522 0213 91       		.byte	0x91
 1523 0214 74       		.sleb128 -12
 1524 0215 00       		.byte	0
 1525 0216 13       		.uleb128 0x13
 1526 0217 C8010000 		.4byte	.LASF37
 1527 021b 01       		.byte	0x1
 1528 021c 2602     		.2byte	0x226
 1529 021e 00000000 		.4byte	.LFB8
 1530 0222 1C000000 		.4byte	.LFE8-.LFB8
 1531 0226 01       		.uleb128 0x1
 1532 0227 9C       		.byte	0x9c
 1533 0228 3C020000 		.4byte	0x23c
 1534 022c 10       		.uleb128 0x10
 1535 022d E4000000 		.4byte	.LASF38
 1536 0231 01       		.byte	0x1
 1537 0232 2602     		.2byte	0x226
 1538 0234 81000000 		.4byte	0x81
 1539 0238 02       		.uleb128 0x2
 1540 0239 91       		.byte	0x91
 1541 023a 74       		.sleb128 -12
 1542 023b 00       		.byte	0
 1543 023c 13       		.uleb128 0x13
 1544 023d 08020000 		.4byte	.LASF39
 1545 0241 01       		.byte	0x1
 1546 0242 5202     		.2byte	0x252
 1547 0244 00000000 		.4byte	.LFB9
 1548 0248 30000000 		.4byte	.LFE9-.LFB9
 1549 024c 01       		.uleb128 0x1
 1550 024d 9C       		.byte	0x9c
 1551 024e 62020000 		.4byte	0x262
 1552 0252 10       		.uleb128 0x10
 1553 0253 94010000 		.4byte	.LASF40
 1554 0257 01       		.byte	0x1
 1555 0258 5202     		.2byte	0x252
 1556 025a 81000000 		.4byte	0x81
 1557 025e 02       		.uleb128 0x2
 1558 025f 91       		.byte	0x91
 1559 0260 74       		.sleb128 -12
 1560 0261 00       		.byte	0
 1561 0262 13       		.uleb128 0x13
 1562 0263 9D010000 		.4byte	.LASF41
 1563 0267 01       		.byte	0x1
 1564 0268 6702     		.2byte	0x267
 1565 026a 00000000 		.4byte	.LFB10
ARM GAS  C:\Users\PC69\AppData\Local\Temp\cckxpNkZ.s 			page 44


 1566 026e 2C000000 		.4byte	.LFE10-.LFB10
 1567 0272 01       		.uleb128 0x1
 1568 0273 9C       		.byte	0x9c
 1569 0274 88020000 		.4byte	0x288
 1570 0278 10       		.uleb128 0x10
 1571 0279 EA010000 		.4byte	.LASF42
 1572 027d 01       		.byte	0x1
 1573 027e 6702     		.2byte	0x267
 1574 0280 81000000 		.4byte	0x81
 1575 0284 02       		.uleb128 0x2
 1576 0285 91       		.byte	0x91
 1577 0286 74       		.sleb128 -12
 1578 0287 00       		.byte	0
 1579 0288 13       		.uleb128 0x13
 1580 0289 FD000000 		.4byte	.LASF43
 1581 028d 01       		.byte	0x1
 1582 028e 7F02     		.2byte	0x27f
 1583 0290 00000000 		.4byte	.LFB11
 1584 0294 1C000000 		.4byte	.LFE11-.LFB11
 1585 0298 01       		.uleb128 0x1
 1586 0299 9C       		.byte	0x9c
 1587 029a AE020000 		.4byte	0x2ae
 1588 029e 10       		.uleb128 0x10
 1589 029f E4000000 		.4byte	.LASF38
 1590 02a3 01       		.byte	0x1
 1591 02a4 7F02     		.2byte	0x27f
 1592 02a6 81000000 		.4byte	0x81
 1593 02aa 02       		.uleb128 0x2
 1594 02ab 91       		.byte	0x91
 1595 02ac 74       		.sleb128 -12
 1596 02ad 00       		.byte	0
 1597 02ae 13       		.uleb128 0x13
 1598 02af 34010000 		.4byte	.LASF44
 1599 02b3 01       		.byte	0x1
 1600 02b4 9602     		.2byte	0x296
 1601 02b6 00000000 		.4byte	.LFB12
 1602 02ba 1C000000 		.4byte	.LFE12-.LFB12
 1603 02be 01       		.uleb128 0x1
 1604 02bf 9C       		.byte	0x9c
 1605 02c0 D4020000 		.4byte	0x2d4
 1606 02c4 10       		.uleb128 0x10
 1607 02c5 E4000000 		.4byte	.LASF38
 1608 02c9 01       		.byte	0x1
 1609 02ca 9602     		.2byte	0x296
 1610 02cc 81000000 		.4byte	0x81
 1611 02d0 02       		.uleb128 0x2
 1612 02d1 91       		.byte	0x91
 1613 02d2 74       		.sleb128 -12
 1614 02d3 00       		.byte	0
 1615 02d4 14       		.uleb128 0x14
 1616 02d5 F2020000 		.4byte	.LASF45
 1617 02d9 01       		.byte	0x1
 1618 02da B202     		.2byte	0x2b2
 1619 02dc 00000000 		.4byte	.LFB13
 1620 02e0 30000000 		.4byte	.LFE13-.LFB13
 1621 02e4 01       		.uleb128 0x1
 1622 02e5 9C       		.byte	0x9c
ARM GAS  C:\Users\PC69\AppData\Local\Temp\cckxpNkZ.s 			page 45


 1623 02e6 09030000 		.4byte	0x309
 1624 02ea 10       		.uleb128 0x10
 1625 02eb B3020000 		.4byte	.LASF34
 1626 02ef 01       		.byte	0x1
 1627 02f0 B202     		.2byte	0x2b2
 1628 02f2 81000000 		.4byte	0x81
 1629 02f6 02       		.uleb128 0x2
 1630 02f7 91       		.byte	0x91
 1631 02f8 74       		.sleb128 -12
 1632 02f9 10       		.uleb128 0x10
 1633 02fa D0020000 		.4byte	.LASF46
 1634 02fe 01       		.byte	0x1
 1635 02ff B202     		.2byte	0x2b2
 1636 0301 8C000000 		.4byte	0x8c
 1637 0305 02       		.uleb128 0x2
 1638 0306 91       		.byte	0x91
 1639 0307 72       		.sleb128 -14
 1640 0308 00       		.byte	0
 1641 0309 14       		.uleb128 0x14
 1642 030a D8010000 		.4byte	.LASF47
 1643 030e 01       		.byte	0x1
 1644 030f D402     		.2byte	0x2d4
 1645 0311 00000000 		.4byte	.LFB14
 1646 0315 2C000000 		.4byte	.LFE14-.LFB14
 1647 0319 01       		.uleb128 0x1
 1648 031a 9C       		.byte	0x9c
 1649 031b 3E030000 		.4byte	0x33e
 1650 031f 10       		.uleb128 0x10
 1651 0320 B3020000 		.4byte	.LASF34
 1652 0324 01       		.byte	0x1
 1653 0325 D402     		.2byte	0x2d4
 1654 0327 81000000 		.4byte	0x81
 1655 032b 02       		.uleb128 0x2
 1656 032c 91       		.byte	0x91
 1657 032d 74       		.sleb128 -12
 1658 032e 10       		.uleb128 0x10
 1659 032f 07000000 		.4byte	.LASF48
 1660 0333 01       		.byte	0x1
 1661 0334 D402     		.2byte	0x2d4
 1662 0336 97000000 		.4byte	0x97
 1663 033a 02       		.uleb128 0x2
 1664 033b 91       		.byte	0x91
 1665 033c 70       		.sleb128 -16
 1666 033d 00       		.byte	0
 1667 033e 12       		.uleb128 0x12
 1668 033f F4010000 		.4byte	.LASF49
 1669 0343 01       		.byte	0x1
 1670 0344 F502     		.2byte	0x2f5
 1671 0346 8C000000 		.4byte	0x8c
 1672 034a 00000000 		.4byte	.LFB15
 1673 034e A4000000 		.4byte	.LFE15-.LFB15
 1674 0352 01       		.uleb128 0x1
 1675 0353 9C       		.byte	0x9c
 1676 0354 86030000 		.4byte	0x386
 1677 0358 10       		.uleb128 0x10
 1678 0359 B3020000 		.4byte	.LASF34
 1679 035d 01       		.byte	0x1
ARM GAS  C:\Users\PC69\AppData\Local\Temp\cckxpNkZ.s 			page 46


 1680 035e F502     		.2byte	0x2f5
 1681 0360 81000000 		.4byte	0x81
 1682 0364 02       		.uleb128 0x2
 1683 0365 91       		.byte	0x91
 1684 0366 6C       		.sleb128 -20
 1685 0367 10       		.uleb128 0x10
 1686 0368 D7020000 		.4byte	.LASF50
 1687 036c 01       		.byte	0x1
 1688 036d F502     		.2byte	0x2f5
 1689 036f 8C000000 		.4byte	0x8c
 1690 0373 02       		.uleb128 0x2
 1691 0374 91       		.byte	0x91
 1692 0375 6A       		.sleb128 -22
 1693 0376 11       		.uleb128 0x11
 1694 0377 76010000 		.4byte	.LASF51
 1695 037b 01       		.byte	0x1
 1696 037c F702     		.2byte	0x2f7
 1697 037e 8C000000 		.4byte	0x8c
 1698 0382 02       		.uleb128 0x2
 1699 0383 91       		.byte	0x91
 1700 0384 76       		.sleb128 -10
 1701 0385 00       		.byte	0
 1702 0386 12       		.uleb128 0x12
 1703 0387 A8000000 		.4byte	.LASF52
 1704 038b 01       		.byte	0x1
 1705 038c 2B03     		.2byte	0x32b
 1706 038e 97000000 		.4byte	0x97
 1707 0392 00000000 		.4byte	.LFB16
 1708 0396 90000000 		.4byte	.LFE16-.LFB16
 1709 039a 01       		.uleb128 0x1
 1710 039b 9C       		.byte	0x9c
 1711 039c CE030000 		.4byte	0x3ce
 1712 03a0 10       		.uleb128 0x10
 1713 03a1 B3020000 		.4byte	.LASF34
 1714 03a5 01       		.byte	0x1
 1715 03a6 2B03     		.2byte	0x32b
 1716 03a8 81000000 		.4byte	0x81
 1717 03ac 02       		.uleb128 0x2
 1718 03ad 91       		.byte	0x91
 1719 03ae 64       		.sleb128 -28
 1720 03af 10       		.uleb128 0x10
 1721 03b0 D7020000 		.4byte	.LASF50
 1722 03b4 01       		.byte	0x1
 1723 03b5 2B03     		.2byte	0x32b
 1724 03b7 8C000000 		.4byte	0x8c
 1725 03bb 02       		.uleb128 0x2
 1726 03bc 91       		.byte	0x91
 1727 03bd 62       		.sleb128 -30
 1728 03be 11       		.uleb128 0x11
 1729 03bf 1B010000 		.4byte	.LASF53
 1730 03c3 01       		.byte	0x1
 1731 03c4 2D03     		.2byte	0x32d
 1732 03c6 BB000000 		.4byte	0xbb
 1733 03ca 02       		.uleb128 0x2
 1734 03cb 91       		.byte	0x91
 1735 03cc 68       		.sleb128 -24
 1736 03cd 00       		.byte	0
ARM GAS  C:\Users\PC69\AppData\Local\Temp\cckxpNkZ.s 			page 47


 1737 03ce 12       		.uleb128 0x12
 1738 03cf 16000000 		.4byte	.LASF54
 1739 03d3 01       		.byte	0x1
 1740 03d4 5803     		.2byte	0x358
 1741 03d6 A2000000 		.4byte	0xa2
 1742 03da 00000000 		.4byte	.LFB17
 1743 03de 80000000 		.4byte	.LFE17-.LFB17
 1744 03e2 01       		.uleb128 0x1
 1745 03e3 9C       		.byte	0x9c
 1746 03e4 16040000 		.4byte	0x416
 1747 03e8 10       		.uleb128 0x10
 1748 03e9 B3020000 		.4byte	.LASF34
 1749 03ed 01       		.byte	0x1
 1750 03ee 5803     		.2byte	0x358
 1751 03f0 81000000 		.4byte	0x81
 1752 03f4 02       		.uleb128 0x2
 1753 03f5 91       		.byte	0x91
 1754 03f6 64       		.sleb128 -28
 1755 03f7 10       		.uleb128 0x10
 1756 03f8 D7020000 		.4byte	.LASF50
 1757 03fc 01       		.byte	0x1
 1758 03fd 5803     		.2byte	0x358
 1759 03ff 8C000000 		.4byte	0x8c
 1760 0403 02       		.uleb128 0x2
 1761 0404 91       		.byte	0x91
 1762 0405 62       		.sleb128 -30
 1763 0406 11       		.uleb128 0x11
 1764 0407 43010000 		.4byte	.LASF55
 1765 040b 01       		.byte	0x1
 1766 040c 5A03     		.2byte	0x35a
 1767 040e A2000000 		.4byte	0xa2
 1768 0412 02       		.uleb128 0x2
 1769 0413 91       		.byte	0x91
 1770 0414 6C       		.sleb128 -20
 1771 0415 00       		.byte	0
 1772 0416 0A       		.uleb128 0xa
 1773 0417 81000000 		.4byte	0x81
 1774 041b 26040000 		.4byte	0x426
 1775 041f 0B       		.uleb128 0xb
 1776 0420 DE000000 		.4byte	0xde
 1777 0424 07       		.byte	0x7
 1778 0425 00       		.byte	0
 1779 0426 09       		.uleb128 0x9
 1780 0427 BD020000 		.4byte	.LASF56
 1781 042b 01       		.byte	0x1
 1782 042c 21       		.byte	0x21
 1783 042d 37040000 		.4byte	0x437
 1784 0431 05       		.uleb128 0x5
 1785 0432 03       		.byte	0x3
 1786 0433 00000000 		.4byte	ADC_channelsConfig
 1787 0437 0C       		.uleb128 0xc
 1788 0438 16040000 		.4byte	0x416
 1789 043c 15       		.uleb128 0x15
 1790 043d E9000000 		.4byte	.LASF57
 1791 0441 01       		.byte	0x1
 1792 0442 18       		.byte	0x18
 1793 0443 6B000000 		.4byte	0x6b
ARM GAS  C:\Users\PC69\AppData\Local\Temp\cckxpNkZ.s 			page 48


 1794 0447 05       		.uleb128 0x5
 1795 0448 03       		.byte	0x3
 1796 0449 00000000 		.4byte	ADC_initVar
 1797 044d 0A       		.uleb128 0xa
 1798 044e 8C000000 		.4byte	0x8c
 1799 0452 5D040000 		.4byte	0x45d
 1800 0456 0B       		.uleb128 0xb
 1801 0457 DE000000 		.4byte	0xde
 1802 045b 07       		.byte	0x7
 1803 045c 00       		.byte	0
 1804 045d 15       		.uleb128 0x15
 1805 045e 45020000 		.4byte	.LASF58
 1806 0462 01       		.byte	0x1
 1807 0463 19       		.byte	0x19
 1808 0464 6E040000 		.4byte	0x46e
 1809 0468 05       		.uleb128 0x5
 1810 0469 03       		.byte	0x3
 1811 046a 00000000 		.4byte	ADC_offset
 1812 046e 06       		.uleb128 0x6
 1813 046f 4D040000 		.4byte	0x44d
 1814 0473 0A       		.uleb128 0xa
 1815 0474 97000000 		.4byte	0x97
 1816 0478 83040000 		.4byte	0x483
 1817 047c 0B       		.uleb128 0xb
 1818 047d DE000000 		.4byte	0xde
 1819 0481 07       		.byte	0x7
 1820 0482 00       		.byte	0
 1821 0483 15       		.uleb128 0x15
 1822 0484 BC000000 		.4byte	.LASF59
 1823 0488 01       		.byte	0x1
 1824 0489 1A       		.byte	0x1a
 1825 048a 94040000 		.4byte	0x494
 1826 048e 05       		.uleb128 0x5
 1827 048f 03       		.byte	0x3
 1828 0490 00000000 		.4byte	ADC_countsPer10Volt
 1829 0494 06       		.uleb128 0x6
 1830 0495 73040000 		.4byte	0x473
 1831 0499 00       		.byte	0
 1832              		.section	.debug_abbrev,"",%progbits
 1833              	.Ldebug_abbrev0:
 1834 0000 01       		.uleb128 0x1
 1835 0001 11       		.uleb128 0x11
 1836 0002 01       		.byte	0x1
 1837 0003 25       		.uleb128 0x25
 1838 0004 0E       		.uleb128 0xe
 1839 0005 13       		.uleb128 0x13
 1840 0006 0B       		.uleb128 0xb
 1841 0007 03       		.uleb128 0x3
 1842 0008 0E       		.uleb128 0xe
 1843 0009 1B       		.uleb128 0x1b
 1844 000a 0E       		.uleb128 0xe
 1845 000b 55       		.uleb128 0x55
 1846 000c 17       		.uleb128 0x17
 1847 000d 11       		.uleb128 0x11
 1848 000e 01       		.uleb128 0x1
 1849 000f 10       		.uleb128 0x10
 1850 0010 17       		.uleb128 0x17
ARM GAS  C:\Users\PC69\AppData\Local\Temp\cckxpNkZ.s 			page 49


 1851 0011 00       		.byte	0
 1852 0012 00       		.byte	0
 1853 0013 02       		.uleb128 0x2
 1854 0014 24       		.uleb128 0x24
 1855 0015 00       		.byte	0
 1856 0016 0B       		.uleb128 0xb
 1857 0017 0B       		.uleb128 0xb
 1858 0018 3E       		.uleb128 0x3e
 1859 0019 0B       		.uleb128 0xb
 1860 001a 03       		.uleb128 0x3
 1861 001b 0E       		.uleb128 0xe
 1862 001c 00       		.byte	0
 1863 001d 00       		.byte	0
 1864 001e 03       		.uleb128 0x3
 1865 001f 24       		.uleb128 0x24
 1866 0020 00       		.byte	0
 1867 0021 0B       		.uleb128 0xb
 1868 0022 0B       		.uleb128 0xb
 1869 0023 3E       		.uleb128 0x3e
 1870 0024 0B       		.uleb128 0xb
 1871 0025 03       		.uleb128 0x3
 1872 0026 08       		.uleb128 0x8
 1873 0027 00       		.byte	0
 1874 0028 00       		.byte	0
 1875 0029 04       		.uleb128 0x4
 1876 002a 16       		.uleb128 0x16
 1877 002b 00       		.byte	0
 1878 002c 03       		.uleb128 0x3
 1879 002d 0E       		.uleb128 0xe
 1880 002e 3A       		.uleb128 0x3a
 1881 002f 0B       		.uleb128 0xb
 1882 0030 3B       		.uleb128 0x3b
 1883 0031 0B       		.uleb128 0xb
 1884 0032 49       		.uleb128 0x49
 1885 0033 13       		.uleb128 0x13
 1886 0034 00       		.byte	0
 1887 0035 00       		.byte	0
 1888 0036 05       		.uleb128 0x5
 1889 0037 16       		.uleb128 0x16
 1890 0038 00       		.byte	0
 1891 0039 03       		.uleb128 0x3
 1892 003a 0E       		.uleb128 0xe
 1893 003b 3A       		.uleb128 0x3a
 1894 003c 0B       		.uleb128 0xb
 1895 003d 3B       		.uleb128 0x3b
 1896 003e 05       		.uleb128 0x5
 1897 003f 49       		.uleb128 0x49
 1898 0040 13       		.uleb128 0x13
 1899 0041 00       		.byte	0
 1900 0042 00       		.byte	0
 1901 0043 06       		.uleb128 0x6
 1902 0044 35       		.uleb128 0x35
 1903 0045 00       		.byte	0
 1904 0046 49       		.uleb128 0x49
 1905 0047 13       		.uleb128 0x13
 1906 0048 00       		.byte	0
 1907 0049 00       		.byte	0
ARM GAS  C:\Users\PC69\AppData\Local\Temp\cckxpNkZ.s 			page 50


 1908 004a 07       		.uleb128 0x7
 1909 004b 2E       		.uleb128 0x2e
 1910 004c 00       		.byte	0
 1911 004d 3F       		.uleb128 0x3f
 1912 004e 19       		.uleb128 0x19
 1913 004f 03       		.uleb128 0x3
 1914 0050 0E       		.uleb128 0xe
 1915 0051 3A       		.uleb128 0x3a
 1916 0052 0B       		.uleb128 0xb
 1917 0053 3B       		.uleb128 0x3b
 1918 0054 0B       		.uleb128 0xb
 1919 0055 27       		.uleb128 0x27
 1920 0056 19       		.uleb128 0x19
 1921 0057 11       		.uleb128 0x11
 1922 0058 01       		.uleb128 0x1
 1923 0059 12       		.uleb128 0x12
 1924 005a 06       		.uleb128 0x6
 1925 005b 40       		.uleb128 0x40
 1926 005c 18       		.uleb128 0x18
 1927 005d 9642     		.uleb128 0x2116
 1928 005f 19       		.uleb128 0x19
 1929 0060 00       		.byte	0
 1930 0061 00       		.byte	0
 1931 0062 08       		.uleb128 0x8
 1932 0063 2E       		.uleb128 0x2e
 1933 0064 01       		.byte	0x1
 1934 0065 3F       		.uleb128 0x3f
 1935 0066 19       		.uleb128 0x19
 1936 0067 03       		.uleb128 0x3
 1937 0068 0E       		.uleb128 0xe
 1938 0069 3A       		.uleb128 0x3a
 1939 006a 0B       		.uleb128 0xb
 1940 006b 3B       		.uleb128 0x3b
 1941 006c 0B       		.uleb128 0xb
 1942 006d 27       		.uleb128 0x27
 1943 006e 19       		.uleb128 0x19
 1944 006f 11       		.uleb128 0x11
 1945 0070 01       		.uleb128 0x1
 1946 0071 12       		.uleb128 0x12
 1947 0072 06       		.uleb128 0x6
 1948 0073 40       		.uleb128 0x40
 1949 0074 18       		.uleb128 0x18
 1950 0075 9642     		.uleb128 0x2116
 1951 0077 19       		.uleb128 0x19
 1952 0078 01       		.uleb128 0x1
 1953 0079 13       		.uleb128 0x13
 1954 007a 00       		.byte	0
 1955 007b 00       		.byte	0
 1956 007c 09       		.uleb128 0x9
 1957 007d 34       		.uleb128 0x34
 1958 007e 00       		.byte	0
 1959 007f 03       		.uleb128 0x3
 1960 0080 0E       		.uleb128 0xe
 1961 0081 3A       		.uleb128 0x3a
 1962 0082 0B       		.uleb128 0xb
 1963 0083 3B       		.uleb128 0x3b
 1964 0084 0B       		.uleb128 0xb
ARM GAS  C:\Users\PC69\AppData\Local\Temp\cckxpNkZ.s 			page 51


 1965 0085 49       		.uleb128 0x49
 1966 0086 13       		.uleb128 0x13
 1967 0087 02       		.uleb128 0x2
 1968 0088 18       		.uleb128 0x18
 1969 0089 00       		.byte	0
 1970 008a 00       		.byte	0
 1971 008b 0A       		.uleb128 0xa
 1972 008c 01       		.uleb128 0x1
 1973 008d 01       		.byte	0x1
 1974 008e 49       		.uleb128 0x49
 1975 008f 13       		.uleb128 0x13
 1976 0090 01       		.uleb128 0x1
 1977 0091 13       		.uleb128 0x13
 1978 0092 00       		.byte	0
 1979 0093 00       		.byte	0
 1980 0094 0B       		.uleb128 0xb
 1981 0095 21       		.uleb128 0x21
 1982 0096 00       		.byte	0
 1983 0097 49       		.uleb128 0x49
 1984 0098 13       		.uleb128 0x13
 1985 0099 2F       		.uleb128 0x2f
 1986 009a 0B       		.uleb128 0xb
 1987 009b 00       		.byte	0
 1988 009c 00       		.byte	0
 1989 009d 0C       		.uleb128 0xc
 1990 009e 26       		.uleb128 0x26
 1991 009f 00       		.byte	0
 1992 00a0 49       		.uleb128 0x49
 1993 00a1 13       		.uleb128 0x13
 1994 00a2 00       		.byte	0
 1995 00a3 00       		.byte	0
 1996 00a4 0D       		.uleb128 0xd
 1997 00a5 2E       		.uleb128 0x2e
 1998 00a6 00       		.byte	0
 1999 00a7 3F       		.uleb128 0x3f
 2000 00a8 19       		.uleb128 0x19
 2001 00a9 03       		.uleb128 0x3
 2002 00aa 0E       		.uleb128 0xe
 2003 00ab 3A       		.uleb128 0x3a
 2004 00ac 0B       		.uleb128 0xb
 2005 00ad 3B       		.uleb128 0x3b
 2006 00ae 05       		.uleb128 0x5
 2007 00af 27       		.uleb128 0x27
 2008 00b0 19       		.uleb128 0x19
 2009 00b1 11       		.uleb128 0x11
 2010 00b2 01       		.uleb128 0x1
 2011 00b3 12       		.uleb128 0x12
 2012 00b4 06       		.uleb128 0x6
 2013 00b5 40       		.uleb128 0x40
 2014 00b6 18       		.uleb128 0x18
 2015 00b7 9642     		.uleb128 0x2116
 2016 00b9 19       		.uleb128 0x19
 2017 00ba 00       		.byte	0
 2018 00bb 00       		.byte	0
 2019 00bc 0E       		.uleb128 0xe
 2020 00bd 2E       		.uleb128 0x2e
 2021 00be 00       		.byte	0
ARM GAS  C:\Users\PC69\AppData\Local\Temp\cckxpNkZ.s 			page 52


 2022 00bf 3F       		.uleb128 0x3f
 2023 00c0 19       		.uleb128 0x19
 2024 00c1 03       		.uleb128 0x3
 2025 00c2 0E       		.uleb128 0xe
 2026 00c3 3A       		.uleb128 0x3a
 2027 00c4 0B       		.uleb128 0xb
 2028 00c5 3B       		.uleb128 0x3b
 2029 00c6 05       		.uleb128 0x5
 2030 00c7 27       		.uleb128 0x27
 2031 00c8 19       		.uleb128 0x19
 2032 00c9 11       		.uleb128 0x11
 2033 00ca 01       		.uleb128 0x1
 2034 00cb 12       		.uleb128 0x12
 2035 00cc 06       		.uleb128 0x6
 2036 00cd 40       		.uleb128 0x40
 2037 00ce 18       		.uleb128 0x18
 2038 00cf 9742     		.uleb128 0x2117
 2039 00d1 19       		.uleb128 0x19
 2040 00d2 00       		.byte	0
 2041 00d3 00       		.byte	0
 2042 00d4 0F       		.uleb128 0xf
 2043 00d5 2E       		.uleb128 0x2e
 2044 00d6 01       		.byte	0x1
 2045 00d7 3F       		.uleb128 0x3f
 2046 00d8 19       		.uleb128 0x19
 2047 00d9 03       		.uleb128 0x3
 2048 00da 0E       		.uleb128 0xe
 2049 00db 3A       		.uleb128 0x3a
 2050 00dc 0B       		.uleb128 0xb
 2051 00dd 3B       		.uleb128 0x3b
 2052 00de 05       		.uleb128 0x5
 2053 00df 27       		.uleb128 0x27
 2054 00e0 19       		.uleb128 0x19
 2055 00e1 49       		.uleb128 0x49
 2056 00e2 13       		.uleb128 0x13
 2057 00e3 11       		.uleb128 0x11
 2058 00e4 01       		.uleb128 0x1
 2059 00e5 12       		.uleb128 0x12
 2060 00e6 06       		.uleb128 0x6
 2061 00e7 40       		.uleb128 0x40
 2062 00e8 18       		.uleb128 0x18
 2063 00e9 9742     		.uleb128 0x2117
 2064 00eb 19       		.uleb128 0x19
 2065 00ec 01       		.uleb128 0x1
 2066 00ed 13       		.uleb128 0x13
 2067 00ee 00       		.byte	0
 2068 00ef 00       		.byte	0
 2069 00f0 10       		.uleb128 0x10
 2070 00f1 05       		.uleb128 0x5
 2071 00f2 00       		.byte	0
 2072 00f3 03       		.uleb128 0x3
 2073 00f4 0E       		.uleb128 0xe
 2074 00f5 3A       		.uleb128 0x3a
 2075 00f6 0B       		.uleb128 0xb
 2076 00f7 3B       		.uleb128 0x3b
 2077 00f8 05       		.uleb128 0x5
 2078 00f9 49       		.uleb128 0x49
ARM GAS  C:\Users\PC69\AppData\Local\Temp\cckxpNkZ.s 			page 53


 2079 00fa 13       		.uleb128 0x13
 2080 00fb 02       		.uleb128 0x2
 2081 00fc 18       		.uleb128 0x18
 2082 00fd 00       		.byte	0
 2083 00fe 00       		.byte	0
 2084 00ff 11       		.uleb128 0x11
 2085 0100 34       		.uleb128 0x34
 2086 0101 00       		.byte	0
 2087 0102 03       		.uleb128 0x3
 2088 0103 0E       		.uleb128 0xe
 2089 0104 3A       		.uleb128 0x3a
 2090 0105 0B       		.uleb128 0xb
 2091 0106 3B       		.uleb128 0x3b
 2092 0107 05       		.uleb128 0x5
 2093 0108 49       		.uleb128 0x49
 2094 0109 13       		.uleb128 0x13
 2095 010a 02       		.uleb128 0x2
 2096 010b 18       		.uleb128 0x18
 2097 010c 00       		.byte	0
 2098 010d 00       		.byte	0
 2099 010e 12       		.uleb128 0x12
 2100 010f 2E       		.uleb128 0x2e
 2101 0110 01       		.byte	0x1
 2102 0111 3F       		.uleb128 0x3f
 2103 0112 19       		.uleb128 0x19
 2104 0113 03       		.uleb128 0x3
 2105 0114 0E       		.uleb128 0xe
 2106 0115 3A       		.uleb128 0x3a
 2107 0116 0B       		.uleb128 0xb
 2108 0117 3B       		.uleb128 0x3b
 2109 0118 05       		.uleb128 0x5
 2110 0119 27       		.uleb128 0x27
 2111 011a 19       		.uleb128 0x19
 2112 011b 49       		.uleb128 0x49
 2113 011c 13       		.uleb128 0x13
 2114 011d 11       		.uleb128 0x11
 2115 011e 01       		.uleb128 0x1
 2116 011f 12       		.uleb128 0x12
 2117 0120 06       		.uleb128 0x6
 2118 0121 40       		.uleb128 0x40
 2119 0122 18       		.uleb128 0x18
 2120 0123 9642     		.uleb128 0x2116
 2121 0125 19       		.uleb128 0x19
 2122 0126 01       		.uleb128 0x1
 2123 0127 13       		.uleb128 0x13
 2124 0128 00       		.byte	0
 2125 0129 00       		.byte	0
 2126 012a 13       		.uleb128 0x13
 2127 012b 2E       		.uleb128 0x2e
 2128 012c 01       		.byte	0x1
 2129 012d 3F       		.uleb128 0x3f
 2130 012e 19       		.uleb128 0x19
 2131 012f 03       		.uleb128 0x3
 2132 0130 0E       		.uleb128 0xe
 2133 0131 3A       		.uleb128 0x3a
 2134 0132 0B       		.uleb128 0xb
 2135 0133 3B       		.uleb128 0x3b
ARM GAS  C:\Users\PC69\AppData\Local\Temp\cckxpNkZ.s 			page 54


 2136 0134 05       		.uleb128 0x5
 2137 0135 27       		.uleb128 0x27
 2138 0136 19       		.uleb128 0x19
 2139 0137 11       		.uleb128 0x11
 2140 0138 01       		.uleb128 0x1
 2141 0139 12       		.uleb128 0x12
 2142 013a 06       		.uleb128 0x6
 2143 013b 40       		.uleb128 0x40
 2144 013c 18       		.uleb128 0x18
 2145 013d 9742     		.uleb128 0x2117
 2146 013f 19       		.uleb128 0x19
 2147 0140 01       		.uleb128 0x1
 2148 0141 13       		.uleb128 0x13
 2149 0142 00       		.byte	0
 2150 0143 00       		.byte	0
 2151 0144 14       		.uleb128 0x14
 2152 0145 2E       		.uleb128 0x2e
 2153 0146 01       		.byte	0x1
 2154 0147 3F       		.uleb128 0x3f
 2155 0148 19       		.uleb128 0x19
 2156 0149 03       		.uleb128 0x3
 2157 014a 0E       		.uleb128 0xe
 2158 014b 3A       		.uleb128 0x3a
 2159 014c 0B       		.uleb128 0xb
 2160 014d 3B       		.uleb128 0x3b
 2161 014e 05       		.uleb128 0x5
 2162 014f 27       		.uleb128 0x27
 2163 0150 19       		.uleb128 0x19
 2164 0151 11       		.uleb128 0x11
 2165 0152 01       		.uleb128 0x1
 2166 0153 12       		.uleb128 0x12
 2167 0154 06       		.uleb128 0x6
 2168 0155 40       		.uleb128 0x40
 2169 0156 18       		.uleb128 0x18
 2170 0157 9642     		.uleb128 0x2116
 2171 0159 19       		.uleb128 0x19
 2172 015a 01       		.uleb128 0x1
 2173 015b 13       		.uleb128 0x13
 2174 015c 00       		.byte	0
 2175 015d 00       		.byte	0
 2176 015e 15       		.uleb128 0x15
 2177 015f 34       		.uleb128 0x34
 2178 0160 00       		.byte	0
 2179 0161 03       		.uleb128 0x3
 2180 0162 0E       		.uleb128 0xe
 2181 0163 3A       		.uleb128 0x3a
 2182 0164 0B       		.uleb128 0xb
 2183 0165 3B       		.uleb128 0x3b
 2184 0166 0B       		.uleb128 0xb
 2185 0167 49       		.uleb128 0x49
 2186 0168 13       		.uleb128 0x13
 2187 0169 3F       		.uleb128 0x3f
 2188 016a 19       		.uleb128 0x19
 2189 016b 02       		.uleb128 0x2
 2190 016c 18       		.uleb128 0x18
 2191 016d 00       		.byte	0
 2192 016e 00       		.byte	0
ARM GAS  C:\Users\PC69\AppData\Local\Temp\cckxpNkZ.s 			page 55


 2193 016f 00       		.byte	0
 2194              		.section	.debug_aranges,"",%progbits
 2195 0000 A4000000 		.4byte	0xa4
 2196 0004 0200     		.2byte	0x2
 2197 0006 00000000 		.4byte	.Ldebug_info0
 2198 000a 04       		.byte	0x4
 2199 000b 00       		.byte	0
 2200 000c 0000     		.2byte	0
 2201 000e 0000     		.2byte	0
 2202 0010 00000000 		.4byte	.LFB0
 2203 0014 24000000 		.4byte	.LFE0-.LFB0
 2204 0018 00000000 		.4byte	.LFB1
 2205 001c F0010000 		.4byte	.LFE1-.LFB1
 2206 0020 00000000 		.4byte	.LFB2
 2207 0024 28000000 		.4byte	.LFE2-.LFB2
 2208 0028 00000000 		.4byte	.LFB3
 2209 002c 18000000 		.4byte	.LFE3-.LFB3
 2210 0030 00000000 		.4byte	.LFB4
 2211 0034 1C000000 		.4byte	.LFE4-.LFB4
 2212 0038 00000000 		.4byte	.LFB5
 2213 003c 1C000000 		.4byte	.LFE5-.LFB5
 2214 0040 00000000 		.4byte	.LFB6
 2215 0044 48000000 		.4byte	.LFE6-.LFB6
 2216 0048 00000000 		.4byte	.LFB7
 2217 004c 44000000 		.4byte	.LFE7-.LFB7
 2218 0050 00000000 		.4byte	.LFB8
 2219 0054 1C000000 		.4byte	.LFE8-.LFB8
 2220 0058 00000000 		.4byte	.LFB9
 2221 005c 30000000 		.4byte	.LFE9-.LFB9
 2222 0060 00000000 		.4byte	.LFB10
 2223 0064 2C000000 		.4byte	.LFE10-.LFB10
 2224 0068 00000000 		.4byte	.LFB11
 2225 006c 1C000000 		.4byte	.LFE11-.LFB11
 2226 0070 00000000 		.4byte	.LFB12
 2227 0074 1C000000 		.4byte	.LFE12-.LFB12
 2228 0078 00000000 		.4byte	.LFB13
 2229 007c 30000000 		.4byte	.LFE13-.LFB13
 2230 0080 00000000 		.4byte	.LFB14
 2231 0084 2C000000 		.4byte	.LFE14-.LFB14
 2232 0088 00000000 		.4byte	.LFB15
 2233 008c A4000000 		.4byte	.LFE15-.LFB15
 2234 0090 00000000 		.4byte	.LFB16
 2235 0094 90000000 		.4byte	.LFE16-.LFB16
 2236 0098 00000000 		.4byte	.LFB17
 2237 009c 80000000 		.4byte	.LFE17-.LFB17
 2238 00a0 00000000 		.4byte	0
 2239 00a4 00000000 		.4byte	0
 2240              		.section	.debug_ranges,"",%progbits
 2241              	.Ldebug_ranges0:
 2242 0000 00000000 		.4byte	.LFB0
 2243 0004 24000000 		.4byte	.LFE0
 2244 0008 00000000 		.4byte	.LFB1
 2245 000c F0010000 		.4byte	.LFE1
 2246 0010 00000000 		.4byte	.LFB2
 2247 0014 28000000 		.4byte	.LFE2
 2248 0018 00000000 		.4byte	.LFB3
 2249 001c 18000000 		.4byte	.LFE3
ARM GAS  C:\Users\PC69\AppData\Local\Temp\cckxpNkZ.s 			page 56


 2250 0020 00000000 		.4byte	.LFB4
 2251 0024 1C000000 		.4byte	.LFE4
 2252 0028 00000000 		.4byte	.LFB5
 2253 002c 1C000000 		.4byte	.LFE5
 2254 0030 00000000 		.4byte	.LFB6
 2255 0034 48000000 		.4byte	.LFE6
 2256 0038 00000000 		.4byte	.LFB7
 2257 003c 44000000 		.4byte	.LFE7
 2258 0040 00000000 		.4byte	.LFB8
 2259 0044 1C000000 		.4byte	.LFE8
 2260 0048 00000000 		.4byte	.LFB9
 2261 004c 30000000 		.4byte	.LFE9
 2262 0050 00000000 		.4byte	.LFB10
 2263 0054 2C000000 		.4byte	.LFE10
 2264 0058 00000000 		.4byte	.LFB11
 2265 005c 1C000000 		.4byte	.LFE11
 2266 0060 00000000 		.4byte	.LFB12
 2267 0064 1C000000 		.4byte	.LFE12
 2268 0068 00000000 		.4byte	.LFB13
 2269 006c 30000000 		.4byte	.LFE13
 2270 0070 00000000 		.4byte	.LFB14
 2271 0074 2C000000 		.4byte	.LFE14
 2272 0078 00000000 		.4byte	.LFB15
 2273 007c A4000000 		.4byte	.LFE15
 2274 0080 00000000 		.4byte	.LFB16
 2275 0084 90000000 		.4byte	.LFE16
 2276 0088 00000000 		.4byte	.LFB17
 2277 008c 80000000 		.4byte	.LFE17
 2278 0090 00000000 		.4byte	0
 2279 0094 00000000 		.4byte	0
 2280              		.section	.debug_line,"",%progbits
 2281              	.Ldebug_line0:
 2282 0000 93020000 		.section	.debug_str,"MS",%progbits,1
 2282      02004200 
 2282      00000201 
 2282      FB0E0D00 
 2282      01010101 
 2283              	.LASF10:
 2284 0000 75696E74 		.ascii	"uint16\000"
 2284      313600
 2285              	.LASF48:
 2286 0007 61646347 		.ascii	"adcGain\000"
 2286      61696E00 
 2287              	.LASF23:
 2288 000f 636F756E 		.ascii	"counts\000"
 2288      747300
 2289              	.LASF54:
 2290 0016 4144435F 		.ascii	"ADC_CountsTo_Volts\000"
 2290      436F756E 
 2290      7473546F 
 2290      5F566F6C 
 2290      747300
 2291              	.LASF36:
 2292 0029 4144435F 		.ascii	"ADC_Init\000"
 2292      496E6974 
 2292      00
 2293              	.LASF7:
ARM GAS  C:\Users\PC69\AppData\Local\Temp\cckxpNkZ.s 			page 57


 2294 0032 6C6F6E67 		.ascii	"long long unsigned int\000"
 2294      206C6F6E 
 2294      6720756E 
 2294      7369676E 
 2294      65642069 
 2295              	.LASF24:
 2296 0049 4144435F 		.ascii	"ADC_InputsPlacement\000"
 2296      496E7075 
 2296      7473506C 
 2296      6163656D 
 2296      656E7400 
 2297              	.LASF28:
 2298 005d 4144435F 		.ascii	"ADC_StartConvert\000"
 2298      53746172 
 2298      74436F6E 
 2298      76657274 
 2298      00
 2299              	.LASF6:
 2300 006e 6C6F6E67 		.ascii	"long long int\000"
 2300      206C6F6E 
 2300      6720696E 
 2300      7400
 2301              	.LASF0:
 2302 007c 7369676E 		.ascii	"signed char\000"
 2302      65642063 
 2302      68617200 
 2303              	.LASF30:
 2304 0088 73746174 		.ascii	"status\000"
 2304      757300
 2305              	.LASF13:
 2306 008f 696E7433 		.ascii	"int32\000"
 2306      3200
 2307              	.LASF25:
 2308 0095 4144435F 		.ascii	"ADC_Start\000"
 2308      53746172 
 2308      7400
 2309              	.LASF4:
 2310 009f 6C6F6E67 		.ascii	"long int\000"
 2310      20696E74 
 2310      00
 2311              	.LASF52:
 2312 00a8 4144435F 		.ascii	"ADC_CountsTo_uVolts\000"
 2312      436F756E 
 2312      7473546F 
 2312      5F75566F 
 2312      6C747300 
 2313              	.LASF59:
 2314 00bc 4144435F 		.ascii	"ADC_countsPer10Volt\000"
 2314      636F756E 
 2314      74735065 
 2314      72313056 
 2314      6F6C7400 
 2315              	.LASF9:
 2316 00d0 75696E74 		.ascii	"uint8\000"
 2316      3800
 2317              	.LASF16:
 2318 00d6 646F7562 		.ascii	"double\000"
ARM GAS  C:\Users\PC69\AppData\Local\Temp\cckxpNkZ.s 			page 58


 2318      6C6500
 2319              	.LASF11:
 2320 00dd 75696E74 		.ascii	"uint32\000"
 2320      333200
 2321              	.LASF38:
 2322 00e4 6D61736B 		.ascii	"mask\000"
 2322      00
 2323              	.LASF57:
 2324 00e9 4144435F 		.ascii	"ADC_initVar\000"
 2324      696E6974 
 2324      56617200 
 2325              	.LASF33:
 2326 00f5 7265744D 		.ascii	"retMode\000"
 2326      6F646500 
 2327              	.LASF43:
 2328 00fd 4144435F 		.ascii	"ADC_SetLimitMask\000"
 2328      5365744C 
 2328      696D6974 
 2328      4D61736B 
 2328      00
 2329              	.LASF8:
 2330 010e 756E7369 		.ascii	"unsigned int\000"
 2330      676E6564 
 2330      20696E74 
 2330      00
 2331              	.LASF53:
 2332 011b 75566F6C 		.ascii	"uVolts\000"
 2332      747300
 2333              	.LASF5:
 2334 0122 6C6F6E67 		.ascii	"long unsigned int\000"
 2334      20756E73 
 2334      69676E65 
 2334      6420696E 
 2334      7400
 2335              	.LASF44:
 2336 0134 4144435F 		.ascii	"ADC_SetSatMask\000"
 2336      53657453 
 2336      61744D61 
 2336      736B00
 2337              	.LASF55:
 2338 0143 766F6C74 		.ascii	"volts\000"
 2338      7300
 2339              	.LASF22:
 2340 0149 746D7052 		.ascii	"tmpRegVal\000"
 2340      65675661 
 2340      6C00
 2341              	.LASF3:
 2342 0153 73686F72 		.ascii	"short unsigned int\000"
 2342      7420756E 
 2342      7369676E 
 2342      65642069 
 2342      6E7400
 2343              	.LASF29:
 2344 0166 4144435F 		.ascii	"ADC_StopConvert\000"
 2344      53746F70 
 2344      436F6E76 
 2344      65727400 
ARM GAS  C:\Users\PC69\AppData\Local\Temp\cckxpNkZ.s 			page 59


 2345              	.LASF51:
 2346 0176 6D566F6C 		.ascii	"mVolts\000"
 2346      747300
 2347              	.LASF19:
 2348 017d 72656733 		.ascii	"reg32\000"
 2348      3200
 2349              	.LASF14:
 2350 0183 666C6F61 		.ascii	"float32\000"
 2350      74333200 
 2351              	.LASF20:
 2352 018b 73697A65 		.ascii	"sizetype\000"
 2352      74797065 
 2352      00
 2353              	.LASF40:
 2354 0194 6C6F774C 		.ascii	"lowLimit\000"
 2354      696D6974 
 2354      00
 2355              	.LASF41:
 2356 019d 4144435F 		.ascii	"ADC_SetHighLimit\000"
 2356      53657448 
 2356      6967684C 
 2356      696D6974 
 2356      00
 2357              	.LASF31:
 2358 01ae 4144435F 		.ascii	"ADC_IsEndConversion\000"
 2358      4973456E 
 2358      64436F6E 
 2358      76657273 
 2358      696F6E00 
 2359              	.LASF17:
 2360 01c2 696E7436 		.ascii	"int64\000"
 2360      3400
 2361              	.LASF37:
 2362 01c8 4144435F 		.ascii	"ADC_SetChanMask\000"
 2362      53657443 
 2362      68616E4D 
 2362      61736B00 
 2363              	.LASF47:
 2364 01d8 4144435F 		.ascii	"ADC_SetGain\000"
 2364      53657447 
 2364      61696E00 
 2365              	.LASF15:
 2366 01e4 666C6F61 		.ascii	"float\000"
 2366      7400
 2367              	.LASF42:
 2368 01ea 68696768 		.ascii	"highLimit\000"
 2368      4C696D69 
 2368      7400
 2369              	.LASF49:
 2370 01f4 4144435F 		.ascii	"ADC_CountsTo_mVolts\000"
 2370      436F756E 
 2370      7473546F 
 2370      5F6D566F 
 2370      6C747300 
 2371              	.LASF39:
 2372 0208 4144435F 		.ascii	"ADC_SetLowLimit\000"
 2372      5365744C 
ARM GAS  C:\Users\PC69\AppData\Local\Temp\cckxpNkZ.s 			page 60


 2372      6F774C69 
 2372      6D697400 
 2373              	.LASF61:
 2374 0218 2E5C4765 		.ascii	".\\Generated_Source\\PSoC4\\ADC.c\000"
 2374      6E657261 
 2374      7465645F 
 2374      536F7572 
 2374      63655C50 
 2375              	.LASF1:
 2376 0237 756E7369 		.ascii	"unsigned char\000"
 2376      676E6564 
 2376      20636861 
 2376      7200
 2377              	.LASF58:
 2378 0245 4144435F 		.ascii	"ADC_offset\000"
 2378      6F666673 
 2378      657400
 2379              	.LASF2:
 2380 0250 73686F72 		.ascii	"short int\000"
 2380      7420696E 
 2380      7400
 2381              	.LASF27:
 2382 025a 4144435F 		.ascii	"ADC_Stop\000"
 2382      53746F70 
 2382      00
 2383              	.LASF62:
 2384 0263 433A5C43 		.ascii	"C:\\Cypress\\IR_sensor_controller\\SCB_Bootloader\\"
 2384      79707265 
 2384      73735C49 
 2384      525F7365 
 2384      6E736F72 
 2385 0292 49525F73 		.ascii	"IR_sensor_controller.cydsn\000"
 2385      656E736F 
 2385      725F636F 
 2385      6E74726F 
 2385      6C6C6572 
 2386              	.LASF21:
 2387 02ad 63684E75 		.ascii	"chNum\000"
 2387      6D00
 2388              	.LASF34:
 2389 02b3 6368616E 		.ascii	"chan\000"
 2389      00
 2390              	.LASF18:
 2391 02b8 63686172 		.ascii	"char\000"
 2391      00
 2392              	.LASF56:
 2393 02bd 4144435F 		.ascii	"ADC_channelsConfig\000"
 2393      6368616E 
 2393      6E656C73 
 2393      436F6E66 
 2393      696700
 2394              	.LASF46:
 2395 02d0 6F666673 		.ascii	"offset\000"
 2395      657400
 2396              	.LASF50:
 2397 02d7 61646343 		.ascii	"adcCounts\000"
 2397      6F756E74 
ARM GAS  C:\Users\PC69\AppData\Local\Temp\cckxpNkZ.s 			page 61


 2397      7300
 2398              	.LASF26:
 2399 02e1 4144435F 		.ascii	"ADC_Enable\000"
 2399      456E6162 
 2399      6C6500
 2400              	.LASF12:
 2401 02ec 696E7431 		.ascii	"int16\000"
 2401      3600
 2402              	.LASF45:
 2403 02f2 4144435F 		.ascii	"ADC_SetOffset\000"
 2403      5365744F 
 2403      66667365 
 2403      7400
 2404              	.LASF60:
 2405 0300 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 2405      4320342E 
 2405      392E3320 
 2405      32303135 
 2405      30333033 
 2406 0333 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0 -mthumb -g -O"
 2406      20726576 
 2406      6973696F 
 2406      6E203232 
 2406      31323230 
 2407 0366 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 2407      66756E63 
 2407      74696F6E 
 2407      2D736563 
 2407      74696F6E 
 2408              	.LASF35:
 2409 038e 72657375 		.ascii	"result\000"
 2409      6C7400
 2410              	.LASF32:
 2411 0395 4144435F 		.ascii	"ADC_GetResult16\000"
 2411      47657452 
 2411      6573756C 
 2411      74313600 
 2412              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
